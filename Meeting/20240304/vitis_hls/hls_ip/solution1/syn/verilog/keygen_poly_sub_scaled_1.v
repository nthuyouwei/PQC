// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module keygen_poly_sub_scaled_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        vla18_address0,
        vla18_ce0,
        vla18_q0,
        vla18_address1,
        vla18_ce1,
        vla18_we1,
        vla18_d1,
        vla18_q1,
        F,
        Flen,
        Fstride,
        f_r,
        flen_r,
        fstride_r,
        k,
        sch,
        scl,
        logn
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] vla18_address0;
output   vla18_ce0;
input  [31:0] vla18_q0;
output  [12:0] vla18_address1;
output   vla18_ce1;
output  [3:0] vla18_we1;
output  [31:0] vla18_d1;
input  [31:0] vla18_q1;
input  [63:0] F;
input  [63:0] Flen;
input  [8:0] Fstride;
input  [14:0] f_r;
input  [7:0] flen_r;
input  [7:0] fstride_r;
input  [14:0] k;
input  [27:0] sch;
input  [5:0] scl;
input  [31:0] logn;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[12:0] vla18_address0;
reg vla18_ce0;
reg[12:0] vla18_address1;
reg vla18_ce1;
reg[3:0] vla18_we1;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [31:0] scl_cast_fu_282_p1;
reg  signed [31:0] scl_cast_reg_788;
wire   [63:0] fstride_cast_fu_286_p1;
reg   [63:0] fstride_cast_reg_793;
wire   [63:0] flen_cast3_fu_290_p1;
reg   [63:0] flen_cast3_reg_798;
wire   [61:0] Fstride_cast2_fu_294_p1;
reg   [61:0] Fstride_cast2_reg_803;
wire   [63:0] n_fu_302_p2;
reg   [63:0] n_reg_808;
wire   [63:0] sub4_fu_308_p2;
reg   [63:0] sub4_reg_814;
wire   [63:0] u_122_cast_cast_cast_cast_fu_318_p1;
reg   [63:0] u_122_cast_cast_cast_cast_reg_819;
wire   [31:0] zext_ln2423_fu_328_p1;
reg   [31:0] zext_ln2423_reg_825;
wire   [63:0] shl_ln2423_cast_fu_340_p1;
reg   [63:0] shl_ln2423_cast_reg_830;
wire   [12:0] zext_ln2415_fu_344_p1;
reg   [12:0] zext_ln2415_reg_835;
reg   [63:0] u_reg_843;
wire    ap_CS_fsm_state2;
wire   [61:0] add_ln2415_fu_364_p2;
reg   [61:0] add_ln2415_reg_848;
wire   [63:0] u_195_fu_374_p2;
reg   [63:0] u_195_reg_856;
wire   [0:0] icmp_ln2415_fu_369_p2;
wire   [31:0] kf_fu_412_p2;
wire    ap_CS_fsm_state3;
wire   [63:0] x_fu_425_p2;
wire   [63:0] v_33_fu_435_p2;
reg   [63:0] v_33_reg_879;
wire    ap_CS_fsm_state4;
wire   [12:0] trunc_ln2222_fu_441_p1;
reg   [12:0] trunc_ln2222_reg_884;
wire   [0:0] icmp_ln2427_fu_430_p2;
wire   [31:0] zext_ln2222_2_fu_526_p1;
reg   [31:0] zext_ln2222_2_reg_894;
wire    ap_CS_fsm_state5;
wire  signed [62:0] sext_ln2214_fu_530_p1;
reg  signed [62:0] sext_ln2214_reg_899;
wire   [0:0] icmp_ln2234_fu_544_p2;
reg   [0:0] icmp_ln2234_reg_907;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln2225_fu_534_p2;
reg   [12:0] vla18_addr_301_reg_917;
wire   [63:0] u_196_fu_623_p2;
reg   [63:0] u_196_reg_923;
wire   [31:0] kf_3_fu_650_p3;
wire   [63:0] x_28_fu_658_p3;
wire   [63:0] add_ln2439_fu_665_p2;
wire   [30:0] trunc_ln2241_fu_696_p1;
wire    ap_CS_fsm_state7;
reg   [63:0] x_22_reg_205;
reg   [63:0] v_02_reg_215;
reg  signed [31:0] kf_1_reg_227;
reg   [63:0] idx_reg_237;
reg   [31:0] cc_reg_249;
reg   [30:0] tw_reg_261;
reg   [63:0] u_122_reg_273;
wire   [63:0] zext_ln2422_fu_407_p1;
wire   [63:0] zext_ln2222_fu_479_p1;
wire   [63:0] zext_ln2234_fu_581_p1;
wire   [63:0] zext_ln2241_1_fu_618_p1;
reg   [61:0] phi_mul_fu_96;
reg   [63:0] u_05_fu_100;
wire  signed [5:0] scl_cast_fu_282_p0;
wire   [63:0] zext_ln2414_fu_298_p1;
wire  signed [31:0] u_122_cast_cast_cast_fu_314_p1;
wire  signed [5:0] sub9_i_fu_322_p1;
wire   [5:0] sub9_i_fu_322_p2;
wire   [10:0] shl_ln_fu_332_p3;
wire   [12:0] trunc_ln2422_fu_380_p1;
wire   [14:0] shl_ln58_fu_384_p3;
wire   [14:0] add_ln2422_fu_392_p2;
wire   [12:0] lshr_ln_fu_397_p4;
wire   [63:0] shl_ln2423_1_fu_418_p3;
wire   [12:0] add_ln2222_fu_445_p2;
wire   [12:0] add_ln2222_2_fu_451_p2;
wire   [14:0] shl_ln59_fu_456_p3;
wire   [14:0] add_ln2222_1_fu_464_p2;
wire   [12:0] lshr_ln2222_1_fu_469_p4;
wire   [1:0] trunc_ln2222_1_fu_492_p4;
wire   [2:0] zext_ln2222_1_fu_502_p1;
wire   [2:0] sub_ln2222_fu_506_p2;
wire   [1:0] ysign_fu_512_p4;
wire  signed [30:0] sext_ln2222_fu_522_p1;
wire   [63:0] v_fu_539_p2;
wire   [12:0] trunc_ln2234_fu_549_p1;
wire   [12:0] add_ln2234_fu_553_p2;
wire   [14:0] shl_ln60_fu_558_p3;
wire   [14:0] add_ln2234_1_fu_566_p2;
wire   [12:0] lshr_ln60_fu_571_p4;
wire   [12:0] trunc_ln2241_1_fu_586_p1;
wire   [14:0] shl_ln61_fu_590_p3;
wire   [14:0] trunc_ln2427_fu_598_p1;
wire   [14:0] add_ln2241_fu_602_p2;
wire   [12:0] lshr_ln61_fu_608_p4;
wire   [63:0] add_ln2431_fu_629_p2;
wire   [0:0] icmp_ln2431_fu_634_p2;
wire   [31:0] kf_2_fu_639_p2;
wire   [63:0] x_27_fu_645_p2;
wire   [31:0] wy_fu_670_p3;
wire   [31:0] shl_ln2235_fu_676_p2;
wire   [30:0] trunc_ln2235_fu_681_p1;
wire   [31:0] tw_2_fu_691_p2;
wire   [30:0] wys_fu_685_p2;
wire   [30:0] mul_ln2241_fu_704_p0;
wire  signed [31:0] mul_ln2241_fu_704_p1;
wire   [33:0] zext_ln2241_2_fu_709_p1;
wire  signed [33:0] sext_ln2241_fu_713_p1;
wire   [33:0] add_ln2241_1_fu_717_p2;
wire  signed [62:0] sext_ln2241_1_fu_723_p1;
wire   [62:0] mul_ln2241_fu_704_p2;
wire   [62:0] z_fu_727_p2;
wire   [30:0] trunc_ln2242_fu_733_p1;
reg   [6:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire   [62:0] mul_ln2241_fu_704_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

keygen_mul_31ns_32s_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 63 ))
mul_31ns_32s_63_1_1_U365(
    .din0(mul_ln2241_fu_704_p0),
    .din1(mul_ln2241_fu_704_p1),
    .dout(mul_ln2241_fu_704_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        cc_reg_249 <= {{z_fu_727_p2[62:31]}};
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        cc_reg_249 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln2225_fu_534_p2 == 1'd0))) begin
        idx_reg_237 <= add_ln2439_fu_665_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        idx_reg_237 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln2225_fu_534_p2 == 1'd0))) begin
        kf_1_reg_227 <= kf_3_fu_650_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        kf_1_reg_227 <= kf_fu_412_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_fu_96 <= 62'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln2427_fu_430_p2 == 1'd1))) begin
        phi_mul_fu_96 <= add_ln2415_reg_848;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tw_reg_261 <= trunc_ln2241_fu_696_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        tw_reg_261 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        u_05_fu_100 <= 64'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln2427_fu_430_p2 == 1'd1))) begin
        u_05_fu_100 <= u_195_reg_856;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        u_122_reg_273 <= u_196_reg_923;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        u_122_reg_273 <= u_122_cast_cast_cast_cast_reg_819;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln2225_fu_534_p2 == 1'd0))) begin
        v_02_reg_215 <= v_33_reg_879;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        v_02_reg_215 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln2225_fu_534_p2 == 1'd0))) begin
        x_22_reg_205 <= x_28_fu_658_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        x_22_reg_205 <= x_fu_425_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        Fstride_cast2_reg_803[8 : 0] <= Fstride_cast2_fu_294_p1[8 : 0];
        flen_cast3_reg_798[7 : 0] <= flen_cast3_fu_290_p1[7 : 0];
        fstride_cast_reg_793[7 : 0] <= fstride_cast_fu_286_p1[7 : 0];
        n_reg_808 <= n_fu_302_p2;
        scl_cast_reg_788 <= scl_cast_fu_282_p1;
        shl_ln2423_cast_reg_830[10 : 2] <= shl_ln2423_cast_fu_340_p1[10 : 2];
        sub4_reg_814 <= sub4_fu_308_p2;
        u_122_cast_cast_cast_cast_reg_819[31 : 0] <= u_122_cast_cast_cast_cast_fu_318_p1[31 : 0];
        zext_ln2415_reg_835[7 : 0] <= zext_ln2415_fu_344_p1[7 : 0];
        zext_ln2423_reg_825[5 : 0] <= zext_ln2423_fu_328_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln2415_reg_848 <= add_ln2415_fu_364_p2;
        u_195_reg_856 <= u_195_fu_374_p2;
        u_reg_843 <= u_05_fu_100;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln2225_fu_534_p2 == 1'd1))) begin
        icmp_ln2234_reg_907 <= icmp_ln2234_fu_544_p2;
        u_196_reg_923 <= u_196_fu_623_p2;
        vla18_addr_301_reg_917 <= zext_ln2241_1_fu_618_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sext_ln2214_reg_899 <= sext_ln2214_fu_530_p1;
        zext_ln2222_2_reg_894[30 : 0] <= zext_ln2222_2_fu_526_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln2427_fu_430_p2 == 1'd0))) begin
        trunc_ln2222_reg_884 <= trunc_ln2222_fu_441_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        v_33_reg_879 <= v_33_fu_435_p2;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

always @ (*) begin
    if ((((icmp_ln2415_fu_369_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln2415_fu_369_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        vla18_address0 = zext_ln2241_1_fu_618_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        vla18_address0 = zext_ln2222_fu_479_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        vla18_address0 = zext_ln2422_fu_407_p1;
    end else begin
        vla18_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        vla18_address1 = vla18_addr_301_reg_917;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        vla18_address1 = zext_ln2234_fu_581_p1;
    end else begin
        vla18_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4))) begin
        vla18_ce0 = 1'b1;
    end else begin
        vla18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        vla18_ce1 = 1'b1;
    end else begin
        vla18_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        vla18_we1 = 4'd15;
    end else begin
        vla18_we1 = 4'd0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln2415_fu_369_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln2427_fu_430_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln2225_fu_534_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Fstride_cast2_fu_294_p1 = Fstride;

assign add_ln2222_1_fu_464_p2 = (shl_ln59_fu_456_p3 + f_r);

assign add_ln2222_2_fu_451_p2 = (add_ln2222_fu_445_p2 + zext_ln2415_reg_835);

assign add_ln2222_fu_445_p2 = ($signed(trunc_ln2222_fu_441_p1) + $signed(13'd8191));

assign add_ln2234_1_fu_566_p2 = (shl_ln60_fu_558_p3 + f_r);

assign add_ln2234_fu_553_p2 = (trunc_ln2234_fu_549_p1 + trunc_ln2222_reg_884);

assign add_ln2241_1_fu_717_p2 = ($signed(zext_ln2241_2_fu_709_p1) + $signed(sext_ln2241_fu_713_p1));

assign add_ln2241_fu_602_p2 = (shl_ln61_fu_590_p3 + trunc_ln2427_fu_598_p1);

assign add_ln2415_fu_364_p2 = (phi_mul_fu_96 + Fstride_cast2_reg_803);

assign add_ln2422_fu_392_p2 = (shl_ln58_fu_384_p3 + k);

assign add_ln2431_fu_629_p2 = (v_02_reg_215 + u_reg_843);

assign add_ln2439_fu_665_p2 = (idx_reg_237 + fstride_cast_reg_793);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign flen_cast3_fu_290_p1 = flen_r;

assign fstride_cast_fu_286_p1 = fstride_r;

assign icmp_ln2225_fu_534_p2 = ((u_122_reg_273 < Flen) ? 1'b1 : 1'b0);

assign icmp_ln2234_fu_544_p2 = ((v_fu_539_p2 < flen_cast3_reg_798) ? 1'b1 : 1'b0);

assign icmp_ln2415_fu_369_p2 = ((u_05_fu_100 == n_reg_808) ? 1'b1 : 1'b0);

assign icmp_ln2427_fu_430_p2 = ((v_02_reg_215 == n_reg_808) ? 1'b1 : 1'b0);

assign icmp_ln2431_fu_634_p2 = ((add_ln2431_fu_629_p2 == sub4_reg_814) ? 1'b1 : 1'b0);

assign kf_2_fu_639_p2 = ($signed(32'd0) - $signed(kf_1_reg_227));

assign kf_3_fu_650_p3 = ((icmp_ln2431_fu_634_p2[0:0] == 1'b1) ? kf_2_fu_639_p2 : kf_1_reg_227);

assign kf_fu_412_p2 = (32'd0 - vla18_q0);

assign lshr_ln2222_1_fu_469_p4 = {{add_ln2222_1_fu_464_p2[14:2]}};

assign lshr_ln60_fu_571_p4 = {{add_ln2234_1_fu_566_p2[14:2]}};

assign lshr_ln61_fu_608_p4 = {{add_ln2241_fu_602_p2[14:2]}};

assign lshr_ln_fu_397_p4 = {{add_ln2422_fu_392_p2[14:2]}};

assign mul_ln2241_fu_704_p0 = mul_ln2241_fu_704_p00;

assign mul_ln2241_fu_704_p00 = wys_fu_685_p2;

assign mul_ln2241_fu_704_p1 = sext_ln2214_reg_899;

assign n_fu_302_p2 = 64'd1 << zext_ln2414_fu_298_p1;

assign scl_cast_fu_282_p0 = scl;

assign scl_cast_fu_282_p1 = scl_cast_fu_282_p0;

assign sext_ln2214_fu_530_p1 = kf_1_reg_227;

assign sext_ln2222_fu_522_p1 = $signed(ysign_fu_512_p4);

assign sext_ln2241_1_fu_723_p1 = $signed(add_ln2241_1_fu_717_p2);

assign sext_ln2241_fu_713_p1 = $signed(cc_reg_249);

assign shl_ln2235_fu_676_p2 = wy_fu_670_p3 << scl_cast_reg_788;

assign shl_ln2423_1_fu_418_p3 = {{phi_mul_fu_96}, {2'd0}};

assign shl_ln2423_cast_fu_340_p1 = shl_ln_fu_332_p3;

assign shl_ln58_fu_384_p3 = {{trunc_ln2422_fu_380_p1}, {2'd0}};

assign shl_ln59_fu_456_p3 = {{add_ln2222_2_fu_451_p2}, {2'd0}};

assign shl_ln60_fu_558_p3 = {{add_ln2234_fu_553_p2}, {2'd0}};

assign shl_ln61_fu_590_p3 = {{trunc_ln2241_1_fu_586_p1}, {2'd0}};

assign shl_ln_fu_332_p3 = {{Fstride}, {2'd0}};

assign sub4_fu_308_p2 = ($signed(n_fu_302_p2) + $signed(64'd18446744073709551615));

assign sub9_i_fu_322_p1 = scl;

assign sub9_i_fu_322_p2 = ($signed(6'd31) - $signed(sub9_i_fu_322_p1));

assign sub_ln2222_fu_506_p2 = (3'd0 - zext_ln2222_1_fu_502_p1);

assign trunc_ln2222_1_fu_492_p4 = {{vla18_q0[31:30]}};

assign trunc_ln2222_fu_441_p1 = idx_reg_237[12:0];

assign trunc_ln2234_fu_549_p1 = v_fu_539_p2[12:0];

assign trunc_ln2235_fu_681_p1 = shl_ln2235_fu_676_p2[30:0];

assign trunc_ln2241_1_fu_586_p1 = u_122_reg_273[12:0];

assign trunc_ln2241_fu_696_p1 = tw_2_fu_691_p2[30:0];

assign trunc_ln2242_fu_733_p1 = z_fu_727_p2[30:0];

assign trunc_ln2422_fu_380_p1 = u_05_fu_100[12:0];

assign trunc_ln2427_fu_598_p1 = x_22_reg_205[14:0];

assign tw_2_fu_691_p2 = wy_fu_670_p3 >> zext_ln2423_reg_825;

assign u_122_cast_cast_cast_cast_fu_318_p1 = $unsigned(u_122_cast_cast_cast_fu_314_p1);

assign u_122_cast_cast_cast_fu_314_p1 = $signed(sch);

assign u_195_fu_374_p2 = (u_05_fu_100 + 64'd1);

assign u_196_fu_623_p2 = (u_122_reg_273 + 64'd1);

assign v_33_fu_435_p2 = (v_02_reg_215 + 64'd1);

assign v_fu_539_p2 = (u_122_reg_273 - u_122_cast_cast_cast_cast_reg_819);

assign vla18_d1 = trunc_ln2242_fu_733_p1;

assign wy_fu_670_p3 = ((icmp_ln2234_reg_907[0:0] == 1'b1) ? vla18_q1 : zext_ln2222_2_reg_894);

assign wys_fu_685_p2 = (tw_reg_261 | trunc_ln2235_fu_681_p1);

assign x_27_fu_645_p2 = (x_22_reg_205 + shl_ln2423_cast_reg_830);

assign x_28_fu_658_p3 = ((icmp_ln2431_fu_634_p2[0:0] == 1'b1) ? F : x_27_fu_645_p2);

assign x_fu_425_p2 = (shl_ln2423_1_fu_418_p3 + F);

assign ysign_fu_512_p4 = {{sub_ln2222_fu_506_p2[2:1]}};

assign z_fu_727_p2 = ($signed(sext_ln2241_1_fu_723_p1) + $signed(mul_ln2241_fu_704_p2));

assign zext_ln2222_1_fu_502_p1 = trunc_ln2222_1_fu_492_p4;

assign zext_ln2222_2_fu_526_p1 = $unsigned(sext_ln2222_fu_522_p1);

assign zext_ln2222_fu_479_p1 = lshr_ln2222_1_fu_469_p4;

assign zext_ln2234_fu_581_p1 = lshr_ln60_fu_571_p4;

assign zext_ln2241_1_fu_618_p1 = lshr_ln61_fu_608_p4;

assign zext_ln2241_2_fu_709_p1 = vla18_q0;

assign zext_ln2414_fu_298_p1 = logn;

assign zext_ln2415_fu_344_p1 = flen_r;

assign zext_ln2422_fu_407_p1 = lshr_ln_fu_397_p4;

assign zext_ln2423_fu_328_p1 = sub9_i_fu_322_p2;

always @ (posedge ap_clk) begin
    fstride_cast_reg_793[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    flen_cast3_reg_798[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    Fstride_cast2_reg_803[61:9] <= 53'b00000000000000000000000000000000000000000000000000000;
    u_122_cast_cast_cast_cast_reg_819[63:32] <= 32'b00000000000000000000000000000000;
    zext_ln2423_reg_825[31:6] <= 26'b00000000000000000000000000;
    shl_ln2423_cast_reg_830[1:0] <= 2'b00;
    shl_ln2423_cast_reg_830[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    zext_ln2415_reg_835[12:8] <= 5'b00000;
    zext_ln2222_2_reg_894[31] <= 1'b0;
end

endmodule //keygen_poly_sub_scaled_1
