// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module keygen_zint_mod_small_signed_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        vla18_address0,
        vla18_ce0,
        vla18_q0,
        d,
        dlen,
        p,
        p0i,
        R2,
        Rx,
        ap_return
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] vla18_address0;
output   vla18_ce0;
input  [31:0] vla18_q0;
input  [14:0] d;
input  [7:0] dlen;
input  [24:0] p;
input  [30:0] p0i;
input  [30:0] R2;
input  [31:0] Rx;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[12:0] vla18_address0;
reg vla18_ce0;
reg[31:0] ap_return;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] p_cast2_cast_cast_cast_fu_147_p1;
reg   [31:0] p_cast2_cast_cast_cast_reg_552;
wire   [62:0] zext_ln722_fu_155_p1;
reg   [62:0] zext_ln722_reg_559;
wire   [61:0] zext_ln1510_fu_159_p1;
reg   [61:0] zext_ln1510_reg_564;
wire   [8:0] u_fu_179_p2;
reg   [8:0] u_reg_569;
wire    ap_CS_fsm_state2;
reg   [31:0] trunc_ln_reg_575;
wire   [31:0] x_7_fu_383_p2;
reg   [31:0] x_7_reg_585;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln1520_fu_389_p2;
wire   [63:0] zext_ln1524_fu_259_p1;
wire   [63:0] zext_ln1544_1_fu_435_p1;
reg   [31:0] x_fu_78;
reg   [8:0] u_22_fu_82;
wire   [8:0] dlen_cast1_fu_151_p1;
wire  signed [24:0] p_cast2_cast_cast_fu_143_p0;
wire  signed [30:0] p_cast2_cast_cast_fu_143_p1;
wire   [30:0] z_10_fu_189_p0;
wire   [31:0] z_10_fu_189_p1;
wire   [62:0] z_10_fu_189_p2;
wire  signed [30:0] mul_ln722_fu_198_p0;
wire   [30:0] mul_ln722_fu_198_p2;
wire   [30:0] w_4_fu_207_p0;
wire   [30:0] w_4_fu_207_p1;
wire   [61:0] w_4_fu_207_p2;
wire   [62:0] zext_ln718_fu_212_p1;
wire   [62:0] add_ln723_fu_216_p2;
wire   [10:0] shl_ln_fu_232_p3;
wire  signed [14:0] sext_ln1524_fu_240_p1;
wire   [14:0] add_ln1524_fu_244_p2;
wire   [12:0] lshr_ln_fu_249_p4;
wire   [31:0] d_1_fu_264_p2;
wire   [0:0] tmp_fu_268_p3;
wire   [24:0] select_ln724_fu_276_p3;
wire  signed [24:0] and_ln724_fu_284_p1;
wire   [24:0] and_ln724_fu_284_p2;
wire  signed [30:0] sext_ln724_fu_289_p1;
wire   [31:0] zext_ln724_fu_293_p1;
wire   [31:0] w_fu_303_p2;
wire   [0:0] tmp_9_fu_308_p3;
wire   [24:0] select_ln1525_fu_316_p3;
wire  signed [24:0] and_ln1525_fu_324_p1;
wire   [24:0] and_ln1525_fu_324_p2;
wire  signed [30:0] sext_ln1521_fu_329_p1;
wire   [31:0] d_3_fu_297_p2;
wire   [31:0] zext_ln1521_fu_333_p1;
wire   [31:0] add_ln685_fu_342_p2;
wire   [31:0] w_6_fu_337_p2;
wire   [31:0] add_ln685_3_fu_348_p2;
wire   [0:0] tmp_10_fu_354_p3;
wire   [24:0] select_ln685_fu_362_p3;
wire  signed [24:0] and_ln685_fu_370_p1;
wire   [24:0] and_ln685_fu_370_p2;
wire  signed [30:0] sext_ln685_fu_375_p1;
wire   [31:0] zext_ln685_fu_379_p1;
wire   [9:0] shl_ln11_fu_403_p3;
wire   [9:0] add_ln1544_fu_410_p2;
wire   [14:0] zext_ln1544_fu_416_p1;
wire   [14:0] add_ln1544_1_fu_420_p2;
wire   [12:0] lshr_ln1544_1_fu_425_p4;
wire    ap_CS_fsm_state4;
wire   [1:0] trunc_ln1_fu_440_p4;
wire   [2:0] zext_ln1544_2_fu_450_p1;
wire   [2:0] sub_ln1544_fu_454_p2;
wire  signed [31:0] sext_ln1544_fu_460_p1;
wire   [31:0] and_ln1544_fu_464_p2;
wire   [31:0] sub_ln697_fu_469_p2;
wire   [0:0] tmp_11_fu_474_p3;
wire   [24:0] select_ln697_fu_482_p3;
wire  signed [24:0] and_ln697_fu_490_p1;
wire   [24:0] and_ln697_fu_490_p2;
wire  signed [30:0] sext_ln697_fu_495_p1;
wire   [31:0] zext_ln697_fu_499_p1;
wire   [31:0] z_fu_503_p2;
reg   [31:0] ap_return_preg;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire   [61:0] w_4_fu_207_p00;
wire   [62:0] z_10_fu_189_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_return_preg = 32'd0;
end

keygen_mul_31ns_32ns_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 63 ))
mul_31ns_32ns_63_1_1_U237(
    .din0(z_10_fu_189_p0),
    .din1(z_10_fu_189_p1),
    .dout(z_10_fu_189_p2)
);

keygen_mul_31s_31s_31_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 31 ))
mul_31s_31s_31_1_1_U238(
    .din0(mul_ln722_fu_198_p0),
    .din1(p0i),
    .dout(mul_ln722_fu_198_p2)
);

keygen_mul_31ns_31ns_62_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 62 ))
mul_31ns_31ns_62_1_1_U239(
    .din0(w_4_fu_207_p0),
    .din1(w_4_fu_207_p1),
    .dout(w_4_fu_207_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_return_preg <= z_fu_503_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        u_22_fu_82 <= dlen_cast1_fu_151_p1;
    end else if (((icmp_ln1520_fu_389_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        u_22_fu_82 <= u_reg_569;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        x_fu_78 <= 32'd0;
    end else if (((icmp_ln1520_fu_389_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        x_fu_78 <= x_7_fu_383_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        p_cast2_cast_cast_cast_reg_552[30 : 0] <= p_cast2_cast_cast_cast_fu_147_p1[30 : 0];
        zext_ln1510_reg_564[30 : 0] <= zext_ln1510_fu_159_p1[30 : 0];
        zext_ln722_reg_559[30 : 0] <= zext_ln722_fu_155_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        trunc_ln_reg_575 <= {{add_ln723_fu_216_p2[62:31]}};
        u_reg_569 <= u_fu_179_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        x_7_reg_585 <= x_7_fu_383_p2;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_return = z_fu_503_p2;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        vla18_address0 = zext_ln1544_1_fu_435_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        vla18_address0 = zext_ln1524_fu_259_p1;
    end else begin
        vla18_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        vla18_ce0 = 1'b1;
    end else begin
        vla18_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln1520_fu_389_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1524_fu_244_p2 = ($signed(sext_ln1524_fu_240_p1) + $signed(d));

assign add_ln1544_1_fu_420_p2 = (zext_ln1544_fu_416_p1 + d);

assign add_ln1544_fu_410_p2 = ($signed(shl_ln11_fu_403_p3) + $signed(10'd1020));

assign add_ln685_3_fu_348_p2 = (add_ln685_fu_342_p2 + w_6_fu_337_p2);

assign add_ln685_fu_342_p2 = (w_fu_303_p2 + zext_ln1521_fu_333_p1);

assign add_ln723_fu_216_p2 = (zext_ln718_fu_212_p1 + z_10_fu_189_p2);

assign and_ln1525_fu_324_p1 = p;

assign and_ln1525_fu_324_p2 = (select_ln1525_fu_316_p3 & and_ln1525_fu_324_p1);

assign and_ln1544_fu_464_p2 = (sext_ln1544_fu_460_p1 & Rx);

assign and_ln685_fu_370_p1 = p;

assign and_ln685_fu_370_p2 = (select_ln685_fu_362_p3 & and_ln685_fu_370_p1);

assign and_ln697_fu_490_p1 = p;

assign and_ln697_fu_490_p2 = (select_ln697_fu_482_p3 & and_ln697_fu_490_p1);

assign and_ln724_fu_284_p1 = p;

assign and_ln724_fu_284_p2 = (select_ln724_fu_276_p3 & and_ln724_fu_284_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign d_1_fu_264_p2 = (trunc_ln_reg_575 - p_cast2_cast_cast_cast_reg_552);

assign d_3_fu_297_p2 = (zext_ln724_fu_293_p1 + d_1_fu_264_p2);

assign dlen_cast1_fu_151_p1 = dlen;

assign icmp_ln1520_fu_389_p2 = ((u_reg_569 == 9'd0) ? 1'b1 : 1'b0);

assign lshr_ln1544_1_fu_425_p4 = {{add_ln1544_1_fu_420_p2[14:2]}};

assign lshr_ln_fu_249_p4 = {{add_ln1524_fu_244_p2[14:2]}};

assign mul_ln722_fu_198_p0 = z_10_fu_189_p2[30:0];

assign p_cast2_cast_cast_cast_fu_147_p1 = $unsigned(p_cast2_cast_cast_fu_143_p1);

assign p_cast2_cast_cast_fu_143_p0 = p;

assign p_cast2_cast_cast_fu_143_p1 = p_cast2_cast_cast_fu_143_p0;

assign select_ln1525_fu_316_p3 = ((tmp_9_fu_308_p3[0:0] == 1'b1) ? 25'd33554431 : 25'd0);

assign select_ln685_fu_362_p3 = ((tmp_10_fu_354_p3[0:0] == 1'b1) ? 25'd33554431 : 25'd0);

assign select_ln697_fu_482_p3 = ((tmp_11_fu_474_p3[0:0] == 1'b1) ? 25'd33554431 : 25'd0);

assign select_ln724_fu_276_p3 = ((tmp_fu_268_p3[0:0] == 1'b1) ? 25'd33554431 : 25'd0);

assign sext_ln1521_fu_329_p1 = $signed(and_ln1525_fu_324_p2);

assign sext_ln1524_fu_240_p1 = $signed(shl_ln_fu_232_p3);

assign sext_ln1544_fu_460_p1 = $signed(sub_ln1544_fu_454_p2);

assign sext_ln685_fu_375_p1 = $signed(and_ln685_fu_370_p2);

assign sext_ln697_fu_495_p1 = $signed(and_ln697_fu_490_p2);

assign sext_ln724_fu_289_p1 = $signed(and_ln724_fu_284_p2);

assign shl_ln11_fu_403_p3 = {{dlen}, {2'd0}};

assign shl_ln_fu_232_p3 = {{u_fu_179_p2}, {2'd0}};

assign sub_ln1544_fu_454_p2 = (3'd0 - zext_ln1544_2_fu_450_p1);

assign sub_ln697_fu_469_p2 = (x_7_reg_585 - and_ln1544_fu_464_p2);

assign tmp_10_fu_354_p3 = add_ln685_3_fu_348_p2[32'd31];

assign tmp_11_fu_474_p3 = sub_ln697_fu_469_p2[32'd31];

assign tmp_9_fu_308_p3 = w_fu_303_p2[32'd31];

assign tmp_fu_268_p3 = d_1_fu_264_p2[32'd31];

assign trunc_ln1_fu_440_p4 = {{vla18_q0[31:30]}};

assign u_fu_179_p2 = ($signed(u_22_fu_82) + $signed(9'd511));

assign w_4_fu_207_p0 = w_4_fu_207_p00;

assign w_4_fu_207_p00 = mul_ln722_fu_198_p2;

assign w_4_fu_207_p1 = zext_ln1510_reg_564;

assign w_6_fu_337_p2 = (d_3_fu_297_p2 - p_cast2_cast_cast_cast_reg_552);

assign w_fu_303_p2 = (vla18_q0 - p_cast2_cast_cast_cast_reg_552);

assign x_7_fu_383_p2 = (zext_ln685_fu_379_p1 + add_ln685_3_fu_348_p2);

assign z_10_fu_189_p0 = zext_ln722_reg_559;

assign z_10_fu_189_p1 = z_10_fu_189_p10;

assign z_10_fu_189_p10 = x_fu_78;

assign z_fu_503_p2 = (zext_ln697_fu_499_p1 + sub_ln697_fu_469_p2);

assign zext_ln1510_fu_159_p1 = $unsigned(p_cast2_cast_cast_fu_143_p1);

assign zext_ln1521_fu_333_p1 = $unsigned(sext_ln1521_fu_329_p1);

assign zext_ln1524_fu_259_p1 = lshr_ln_fu_249_p4;

assign zext_ln1544_1_fu_435_p1 = lshr_ln1544_1_fu_425_p4;

assign zext_ln1544_2_fu_450_p1 = trunc_ln1_fu_440_p4;

assign zext_ln1544_fu_416_p1 = add_ln1544_fu_410_p2;

assign zext_ln685_fu_379_p1 = $unsigned(sext_ln685_fu_375_p1);

assign zext_ln697_fu_499_p1 = $unsigned(sext_ln697_fu_495_p1);

assign zext_ln718_fu_212_p1 = w_4_fu_207_p2;

assign zext_ln722_fu_155_p1 = R2;

assign zext_ln724_fu_293_p1 = $unsigned(sext_ln724_fu_289_p1);

always @ (posedge ap_clk) begin
    p_cast2_cast_cast_cast_reg_552[31] <= 1'b0;
    zext_ln722_reg_559[62:31] <= 32'b00000000000000000000000000000000;
    zext_ln1510_reg_564[61:31] <= 31'b0000000000000000000000000000000;
end

endmodule //keygen_zint_mod_small_signed_1
