// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module keygen_get_rng_u64_82_101 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        p_read6,
        p_read7,
        p_read8,
        p_read9,
        p_read10,
        p_read11,
        p_read12,
        p_read13,
        p_read14,
        p_read15,
        p_read16,
        p_read17,
        p_read18,
        p_read19,
        p_read20,
        p_read21,
        p_read22,
        p_read23,
        p_read24,
        rng_dptr_read,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9,
        ap_return_10,
        ap_return_11,
        ap_return_12,
        ap_return_13,
        ap_return_14,
        ap_return_15,
        ap_return_16,
        ap_return_17,
        ap_return_18,
        ap_return_19,
        ap_return_20,
        ap_return_21,
        ap_return_22,
        ap_return_23,
        ap_return_24,
        ap_return_25,
        ap_return_26
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] p_read;
input  [63:0] p_read1;
input  [63:0] p_read2;
input  [63:0] p_read3;
input  [63:0] p_read4;
input  [63:0] p_read5;
input  [63:0] p_read6;
input  [63:0] p_read7;
input  [63:0] p_read8;
input  [63:0] p_read9;
input  [63:0] p_read10;
input  [63:0] p_read11;
input  [63:0] p_read12;
input  [63:0] p_read13;
input  [63:0] p_read14;
input  [63:0] p_read15;
input  [63:0] p_read16;
input  [63:0] p_read17;
input  [63:0] p_read18;
input  [63:0] p_read19;
input  [63:0] p_read20;
input  [63:0] p_read21;
input  [63:0] p_read22;
input  [63:0] p_read23;
input  [63:0] p_read24;
input  [63:0] rng_dptr_read;
output  [63:0] ap_return_0;
output  [63:0] ap_return_1;
output  [63:0] ap_return_2;
output  [63:0] ap_return_3;
output  [63:0] ap_return_4;
output  [63:0] ap_return_5;
output  [63:0] ap_return_6;
output  [63:0] ap_return_7;
output  [63:0] ap_return_8;
output  [63:0] ap_return_9;
output  [63:0] ap_return_10;
output  [63:0] ap_return_11;
output  [63:0] ap_return_12;
output  [63:0] ap_return_13;
output  [63:0] ap_return_14;
output  [63:0] ap_return_15;
output  [63:0] ap_return_16;
output  [63:0] ap_return_17;
output  [63:0] ap_return_18;
output  [63:0] ap_return_19;
output  [63:0] ap_return_20;
output  [63:0] ap_return_21;
output  [63:0] ap_return_22;
output  [63:0] ap_return_23;
output  [63:0] ap_return_24;
output  [63:0] ap_return_25;
output  [63:0] ap_return_26;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[63:0] ap_return_0;
reg[63:0] ap_return_1;
reg[63:0] ap_return_2;
reg[63:0] ap_return_3;
reg[63:0] ap_return_4;
reg[63:0] ap_return_5;
reg[63:0] ap_return_6;
reg[63:0] ap_return_7;
reg[63:0] ap_return_8;
reg[63:0] ap_return_9;
reg[63:0] ap_return_10;
reg[63:0] ap_return_11;
reg[63:0] ap_return_12;
reg[63:0] ap_return_13;
reg[63:0] ap_return_14;
reg[63:0] ap_return_15;
reg[63:0] ap_return_16;
reg[63:0] ap_return_17;
reg[63:0] ap_return_18;
reg[63:0] ap_return_19;
reg[63:0] ap_return_20;
reg[63:0] ap_return_21;
reg[63:0] ap_return_22;
reg[63:0] ap_return_23;
reg[63:0] ap_return_24;
reg[63:0] ap_return_25;
reg[63:0] ap_return_26;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [63:0] dptr_4_reg_1624;
wire    ap_CS_fsm_state2;
reg   [63:0] rng_st_24_0_load_1_reg_1635;
wire   [0:0] icmp_ln846_fu_789_p2;
wire   [0:0] icmp_ln854_fu_795_p2;
reg   [63:0] rng_st_23_0_load_1_reg_1640;
reg   [63:0] rng_st_22_0_load_1_reg_1645;
reg   [63:0] rng_st_21_0_load_1_reg_1650;
reg   [63:0] rng_st_20_0_load_1_reg_1655;
reg   [63:0] rng_st_19_0_load_1_reg_1660;
reg   [63:0] rng_st_18_0_load_1_reg_1665;
reg   [63:0] rng_st_17_0_load_1_reg_1670;
reg   [63:0] rng_st_16_0_load_1_reg_1675;
reg   [63:0] rng_st_15_0_load_1_reg_1680;
reg   [63:0] rng_st_14_0_load_1_reg_1685;
reg   [63:0] rng_st_1316_0_load_1_reg_1690;
reg   [63:0] rng_st_12_0_load_1_reg_1695;
reg   [63:0] rng_st_11_0_load_1_reg_1700;
reg   [63:0] rng_st_10_0_load_1_reg_1705;
reg   [63:0] rng_st_9_0_load_1_reg_1710;
reg   [63:0] rng_st_8_0_load_1_reg_1715;
reg   [63:0] rng_st_7_0_load_1_reg_1720;
reg   [63:0] rng_st_6_0_load_1_reg_1725;
reg   [63:0] rng_st_5_0_load_1_reg_1730;
reg   [63:0] rng_st_4_0_load_1_reg_1735;
reg   [63:0] rng_st_3_0_load_1_reg_1740;
reg   [63:0] rng_st_2_0_load_1_reg_1745;
reg   [63:0] rng_st_1_0_load_1_reg_1750;
reg   [63:0] rng_st_0_0_load_1_reg_1755;
wire   [63:0] clen_1_fu_1037_p3;
reg   [63:0] clen_1_reg_1770;
wire    ap_CS_fsm_state4;
wire   [63:0] sub_ln862_fu_1044_p2;
reg   [63:0] sub_ln862_reg_1776;
wire   [0:0] icmp_ln863_fu_1049_p2;
reg   [0:0] icmp_ln863_reg_1781;
wire   [63:0] clen_2_fu_1062_p2;
wire    ap_CS_fsm_state5;
wire   [63:0] add_ln865_fu_1176_p2;
wire   [63:0] dptr_5_fu_1182_p2;
wire   [63:0] sub_ln863_fu_1230_p2;
wire   [0:0] icmp_ln863_1_fu_1188_p2;
wire   [7:0] tmp_q1;
reg   [7:0] empty_reg_1808;
wire    ap_CS_fsm_state7;
wire   [7:0] tmp_q0;
reg   [7:0] empty_398_reg_1813;
reg   [7:0] empty_399_reg_1828;
wire    ap_CS_fsm_state8;
reg   [7:0] empty_400_reg_1833;
reg   [7:0] empty_401_reg_1848;
wire    ap_CS_fsm_state9;
reg   [7:0] empty_402_reg_1853;
reg   [2:0] tmp_address0;
reg    tmp_ce0;
reg    tmp_we0;
wire   [7:0] tmp_d0;
reg   [2:0] tmp_address1;
reg    tmp_ce1;
wire    grp_process_block_111_112_fu_512_ap_start;
wire    grp_process_block_111_112_fu_512_ap_done;
wire    grp_process_block_111_112_fu_512_ap_idle;
wire    grp_process_block_111_112_fu_512_ap_ready;
wire   [63:0] grp_process_block_111_112_fu_512_ap_return_0;
wire   [63:0] grp_process_block_111_112_fu_512_ap_return_1;
wire   [63:0] grp_process_block_111_112_fu_512_ap_return_2;
wire   [63:0] grp_process_block_111_112_fu_512_ap_return_3;
wire   [63:0] grp_process_block_111_112_fu_512_ap_return_4;
wire   [63:0] grp_process_block_111_112_fu_512_ap_return_5;
wire   [63:0] grp_process_block_111_112_fu_512_ap_return_6;
wire   [63:0] grp_process_block_111_112_fu_512_ap_return_7;
wire   [63:0] grp_process_block_111_112_fu_512_ap_return_8;
wire   [63:0] grp_process_block_111_112_fu_512_ap_return_9;
wire   [63:0] grp_process_block_111_112_fu_512_ap_return_10;
wire   [63:0] grp_process_block_111_112_fu_512_ap_return_11;
wire   [63:0] grp_process_block_111_112_fu_512_ap_return_12;
wire   [63:0] grp_process_block_111_112_fu_512_ap_return_13;
wire   [63:0] grp_process_block_111_112_fu_512_ap_return_14;
wire   [63:0] grp_process_block_111_112_fu_512_ap_return_15;
wire   [63:0] grp_process_block_111_112_fu_512_ap_return_16;
wire   [63:0] grp_process_block_111_112_fu_512_ap_return_17;
wire   [63:0] grp_process_block_111_112_fu_512_ap_return_18;
wire   [63:0] grp_process_block_111_112_fu_512_ap_return_19;
wire   [63:0] grp_process_block_111_112_fu_512_ap_return_20;
wire   [63:0] grp_process_block_111_112_fu_512_ap_return_21;
wire   [63:0] grp_process_block_111_112_fu_512_ap_return_22;
wire   [63:0] grp_process_block_111_112_fu_512_ap_return_23;
wire   [63:0] grp_process_block_111_112_fu_512_ap_return_24;
reg   [63:0] dptr_reg_460;
wire    ap_CS_fsm_state3;
reg   [63:0] indvars_iv_reg_472;
reg   [63:0] dec5_i_in_reg_483;
reg   [63:0] dptr_1_reg_492;
reg   [63:0] dptr_2_lcssa_i_reg_502;
reg    grp_process_block_111_112_fu_512_ap_start_reg;
wire   [63:0] zext_ln843_fu_1078_p1;
reg   [63:0] len_assign_fu_108;
reg   [63:0] out_assign_fu_112;
wire   [63:0] add_ln863_1_fu_1211_p2;
reg   [63:0] dptr_2_fu_116;
wire    ap_CS_fsm_state6;
reg   [63:0] rng_st_24_0_fu_120;
wire    ap_CS_fsm_state10;
reg   [63:0] rng_st_23_0_fu_124;
reg   [63:0] rng_st_22_0_fu_128;
reg   [63:0] rng_st_21_0_fu_132;
reg   [63:0] rng_st_20_0_fu_136;
reg   [63:0] rng_st_19_0_fu_140;
reg   [63:0] rng_st_18_0_fu_144;
reg   [63:0] rng_st_17_0_fu_148;
reg   [63:0] rng_st_16_0_fu_152;
reg   [63:0] rng_st_15_0_fu_156;
reg   [63:0] rng_st_14_0_fu_160;
reg   [63:0] rng_st_1316_0_fu_164;
reg   [63:0] rng_st_12_0_fu_168;
reg   [63:0] rng_st_11_0_fu_172;
reg   [63:0] rng_st_10_0_fu_176;
reg   [63:0] rng_st_9_0_fu_180;
reg   [63:0] rng_st_8_0_fu_184;
reg   [63:0] rng_st_7_0_fu_188;
reg   [63:0] rng_st_6_0_fu_192;
reg   [63:0] rng_st_5_0_fu_196;
reg   [63:0] rng_st_4_0_fu_200;
reg   [63:0] rng_st_3_0_fu_204;
reg   [63:0] rng_st_2_0_fu_208;
reg   [63:0] rng_st_1_0_fu_212;
reg   [63:0] rng_st_0_0_fu_216;
wire   [63:0] clen_fu_1026_p2;
wire   [0:0] icmp_ln859_fu_1032_p2;
wire   [2:0] trunc_ln852_fu_1058_p1;
wire   [2:0] trunc_ln841_fu_1068_p1;
wire   [2:0] add_ln843_fu_1072_p2;
wire   [60:0] tmp_s_fu_1093_p26;
wire   [2:0] trunc_ln865_fu_1149_p1;
wire   [5:0] shl_ln_fu_1153_p3;
wire   [63:0] tmp_s_fu_1093_p27;
wire   [63:0] zext_ln865_fu_1161_p1;
wire   [63:0] lshr_ln865_fu_1165_p2;
wire   [63:0] add_ln863_fu_1194_p2;
wire   [63:0] xor_ln863_fu_1200_p2;
wire   [0:0] icmp_ln863_2_fu_1205_p2;
wire   [63:0] add_ln863_2_fu_1224_p2;
wire   [63:0] select_ln863_fu_1216_p3;
wire   [63:0] or_ln_fu_1250_p9;
reg   [63:0] ap_return_0_preg;
reg   [63:0] ap_return_1_preg;
reg   [63:0] ap_return_2_preg;
reg   [63:0] ap_return_3_preg;
reg   [63:0] ap_return_4_preg;
reg   [63:0] ap_return_5_preg;
reg   [63:0] ap_return_6_preg;
reg   [63:0] ap_return_7_preg;
reg   [63:0] ap_return_8_preg;
reg   [63:0] ap_return_9_preg;
reg   [63:0] ap_return_10_preg;
reg   [63:0] ap_return_11_preg;
reg   [63:0] ap_return_12_preg;
reg   [63:0] ap_return_13_preg;
reg   [63:0] ap_return_14_preg;
reg   [63:0] ap_return_15_preg;
reg   [63:0] ap_return_16_preg;
reg   [63:0] ap_return_17_preg;
reg   [63:0] ap_return_18_preg;
reg   [63:0] ap_return_19_preg;
reg   [63:0] ap_return_20_preg;
reg   [63:0] ap_return_21_preg;
reg   [63:0] ap_return_22_preg;
reg   [63:0] ap_return_23_preg;
reg   [63:0] ap_return_24_preg;
reg   [63:0] ap_return_25_preg;
reg   [63:0] ap_return_26_preg;
reg   [9:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 grp_process_block_111_112_fu_512_ap_start_reg = 1'b0;
#0 ap_return_0_preg = 64'd0;
#0 ap_return_1_preg = 64'd0;
#0 ap_return_2_preg = 64'd0;
#0 ap_return_3_preg = 64'd0;
#0 ap_return_4_preg = 64'd0;
#0 ap_return_5_preg = 64'd0;
#0 ap_return_6_preg = 64'd0;
#0 ap_return_7_preg = 64'd0;
#0 ap_return_8_preg = 64'd0;
#0 ap_return_9_preg = 64'd0;
#0 ap_return_10_preg = 64'd0;
#0 ap_return_11_preg = 64'd0;
#0 ap_return_12_preg = 64'd0;
#0 ap_return_13_preg = 64'd0;
#0 ap_return_14_preg = 64'd0;
#0 ap_return_15_preg = 64'd0;
#0 ap_return_16_preg = 64'd0;
#0 ap_return_17_preg = 64'd0;
#0 ap_return_18_preg = 64'd0;
#0 ap_return_19_preg = 64'd0;
#0 ap_return_20_preg = 64'd0;
#0 ap_return_21_preg = 64'd0;
#0 ap_return_22_preg = 64'd0;
#0 ap_return_23_preg = 64'd0;
#0 ap_return_24_preg = 64'd0;
#0 ap_return_25_preg = 64'd0;
#0 ap_return_26_preg = 64'd0;
end

keygen_get_rng_u64_82_101_tmp_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
tmp_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tmp_address0),
    .ce0(tmp_ce0),
    .we0(tmp_we0),
    .d0(tmp_d0),
    .q0(tmp_q0),
    .address1(tmp_address1),
    .ce1(tmp_ce1),
    .q1(tmp_q1)
);

keygen_process_block_111_112 grp_process_block_111_112_fu_512(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_process_block_111_112_fu_512_ap_start),
    .ap_done(grp_process_block_111_112_fu_512_ap_done),
    .ap_idle(grp_process_block_111_112_fu_512_ap_idle),
    .ap_ready(grp_process_block_111_112_fu_512_ap_ready),
    .state_0_read(rng_st_0_0_load_1_reg_1755),
    .state_1_read(rng_st_1_0_load_1_reg_1750),
    .state_2_read(rng_st_2_0_load_1_reg_1745),
    .state_3_read(rng_st_3_0_load_1_reg_1740),
    .state_4_read(rng_st_4_0_load_1_reg_1735),
    .state_5_read(rng_st_5_0_load_1_reg_1730),
    .state_6_read(rng_st_6_0_load_1_reg_1725),
    .state_7_read(rng_st_7_0_load_1_reg_1720),
    .state_8_read(rng_st_8_0_load_1_reg_1715),
    .state_9_read(rng_st_9_0_load_1_reg_1710),
    .state_10_read(rng_st_10_0_load_1_reg_1705),
    .state_11_read(rng_st_11_0_load_1_reg_1700),
    .state_1213_read(rng_st_12_0_load_1_reg_1695),
    .state_13_read(rng_st_1316_0_load_1_reg_1690),
    .state_14_read(rng_st_14_0_load_1_reg_1685),
    .state_15_read(rng_st_15_0_load_1_reg_1680),
    .state_16_read(rng_st_16_0_load_1_reg_1675),
    .state_17_read(rng_st_17_0_load_1_reg_1670),
    .state_18_read(rng_st_18_0_load_1_reg_1665),
    .state_19_read(rng_st_19_0_load_1_reg_1660),
    .state_20_read(rng_st_20_0_load_1_reg_1655),
    .state_21_read(rng_st_21_0_load_1_reg_1650),
    .state_22_read(rng_st_22_0_load_1_reg_1645),
    .state_2325_read(rng_st_23_0_load_1_reg_1640),
    .state_24_read(rng_st_24_0_load_1_reg_1635),
    .ap_return_0(grp_process_block_111_112_fu_512_ap_return_0),
    .ap_return_1(grp_process_block_111_112_fu_512_ap_return_1),
    .ap_return_2(grp_process_block_111_112_fu_512_ap_return_2),
    .ap_return_3(grp_process_block_111_112_fu_512_ap_return_3),
    .ap_return_4(grp_process_block_111_112_fu_512_ap_return_4),
    .ap_return_5(grp_process_block_111_112_fu_512_ap_return_5),
    .ap_return_6(grp_process_block_111_112_fu_512_ap_return_6),
    .ap_return_7(grp_process_block_111_112_fu_512_ap_return_7),
    .ap_return_8(grp_process_block_111_112_fu_512_ap_return_8),
    .ap_return_9(grp_process_block_111_112_fu_512_ap_return_9),
    .ap_return_10(grp_process_block_111_112_fu_512_ap_return_10),
    .ap_return_11(grp_process_block_111_112_fu_512_ap_return_11),
    .ap_return_12(grp_process_block_111_112_fu_512_ap_return_12),
    .ap_return_13(grp_process_block_111_112_fu_512_ap_return_13),
    .ap_return_14(grp_process_block_111_112_fu_512_ap_return_14),
    .ap_return_15(grp_process_block_111_112_fu_512_ap_return_15),
    .ap_return_16(grp_process_block_111_112_fu_512_ap_return_16),
    .ap_return_17(grp_process_block_111_112_fu_512_ap_return_17),
    .ap_return_18(grp_process_block_111_112_fu_512_ap_return_18),
    .ap_return_19(grp_process_block_111_112_fu_512_ap_return_19),
    .ap_return_20(grp_process_block_111_112_fu_512_ap_return_20),
    .ap_return_21(grp_process_block_111_112_fu_512_ap_return_21),
    .ap_return_22(grp_process_block_111_112_fu_512_ap_return_22),
    .ap_return_23(grp_process_block_111_112_fu_512_ap_return_23),
    .ap_return_24(grp_process_block_111_112_fu_512_ap_return_24)
);

keygen_mux_2561_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 64 ),
    .din10_WIDTH( 64 ),
    .din11_WIDTH( 64 ),
    .din12_WIDTH( 64 ),
    .din13_WIDTH( 64 ),
    .din14_WIDTH( 64 ),
    .din15_WIDTH( 64 ),
    .din16_WIDTH( 64 ),
    .din17_WIDTH( 64 ),
    .din18_WIDTH( 64 ),
    .din19_WIDTH( 64 ),
    .din20_WIDTH( 64 ),
    .din21_WIDTH( 64 ),
    .din22_WIDTH( 64 ),
    .din23_WIDTH( 64 ),
    .din24_WIDTH( 64 ),
    .din25_WIDTH( 61 ),
    .dout_WIDTH( 64 ))
mux_2561_64_1_1_U27(
    .din0(rng_st_0_0_fu_216),
    .din1(rng_st_1_0_fu_212),
    .din2(rng_st_2_0_fu_208),
    .din3(rng_st_3_0_fu_204),
    .din4(rng_st_4_0_fu_200),
    .din5(rng_st_5_0_fu_196),
    .din6(rng_st_6_0_fu_192),
    .din7(rng_st_7_0_fu_188),
    .din8(rng_st_8_0_fu_184),
    .din9(rng_st_9_0_fu_180),
    .din10(rng_st_10_0_fu_176),
    .din11(rng_st_11_0_fu_172),
    .din12(rng_st_12_0_fu_168),
    .din13(rng_st_1316_0_fu_164),
    .din14(rng_st_14_0_fu_160),
    .din15(rng_st_15_0_fu_156),
    .din16(rng_st_16_0_fu_152),
    .din17(rng_st_17_0_fu_148),
    .din18(rng_st_18_0_fu_144),
    .din19(rng_st_19_0_fu_140),
    .din20(rng_st_20_0_fu_136),
    .din21(rng_st_21_0_fu_132),
    .din22(rng_st_22_0_fu_128),
    .din23(rng_st_23_0_fu_124),
    .din24(rng_st_24_0_fu_120),
    .din25(tmp_s_fu_1093_p26),
    .dout(tmp_s_fu_1093_p27)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_return_0_preg <= or_ln_fu_1250_p9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_10_preg <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_return_10_preg <= rng_st_8_0_fu_184;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_11_preg <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_return_11_preg <= rng_st_9_0_fu_180;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_12_preg <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_return_12_preg <= rng_st_10_0_fu_176;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_13_preg <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_return_13_preg <= rng_st_11_0_fu_172;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_14_preg <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_return_14_preg <= rng_st_12_0_fu_168;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_15_preg <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_return_15_preg <= rng_st_1316_0_fu_164;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_16_preg <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_return_16_preg <= rng_st_14_0_fu_160;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_17_preg <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_return_17_preg <= rng_st_15_0_fu_156;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_18_preg <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_return_18_preg <= rng_st_16_0_fu_152;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_19_preg <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_return_19_preg <= rng_st_17_0_fu_148;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_return_1_preg <= dptr_4_reg_1624;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_20_preg <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_return_20_preg <= rng_st_18_0_fu_144;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_21_preg <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_return_21_preg <= rng_st_19_0_fu_140;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_22_preg <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_return_22_preg <= rng_st_20_0_fu_136;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_23_preg <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_return_23_preg <= rng_st_21_0_fu_132;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_24_preg <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_return_24_preg <= rng_st_22_0_fu_128;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_25_preg <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_return_25_preg <= rng_st_23_0_fu_124;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_26_preg <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_return_26_preg <= rng_st_24_0_fu_120;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_return_2_preg <= rng_st_0_0_fu_216;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_return_3_preg <= rng_st_1_0_fu_212;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_4_preg <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_return_4_preg <= rng_st_2_0_fu_208;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_5_preg <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_return_5_preg <= rng_st_3_0_fu_204;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_6_preg <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_return_6_preg <= rng_st_4_0_fu_200;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_7_preg <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_return_7_preg <= rng_st_5_0_fu_196;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_8_preg <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_return_8_preg <= rng_st_6_0_fu_192;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_9_preg <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_return_9_preg <= rng_st_7_0_fu_188;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_process_block_111_112_fu_512_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln854_fu_795_p2 == 1'd1) & (icmp_ln846_fu_789_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_process_block_111_112_fu_512_ap_start_reg <= 1'b1;
        end else if ((grp_process_block_111_112_fu_512_ap_ready == 1'b1)) begin
            grp_process_block_111_112_fu_512_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln863_fu_1049_p2 == 1'd0))) begin
        dec5_i_in_reg_483 <= clen_1_fu_1037_p3;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln863_1_fu_1188_p2 == 1'd0) & (icmp_ln863_reg_1781 == 1'd0))) begin
        dec5_i_in_reg_483 <= clen_2_fu_1062_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln863_fu_1049_p2 == 1'd0))) begin
        dptr_1_reg_492 <= dptr_reg_460;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln863_1_fu_1188_p2 == 1'd0) & (icmp_ln863_reg_1781 == 1'd0))) begin
        dptr_1_reg_492 <= dptr_5_fu_1182_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        dptr_2_fu_116 <= rng_dptr_read;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        dptr_2_fu_116 <= dptr_2_lcssa_i_reg_502;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln863_fu_1049_p2 == 1'd1))) begin
        dptr_2_lcssa_i_reg_502 <= dptr_reg_460;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln863_1_fu_1188_p2 == 1'd1) & (icmp_ln863_reg_1781 == 1'd0))) begin
        dptr_2_lcssa_i_reg_502 <= sub_ln863_fu_1230_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln854_fu_795_p2 == 1'd0) & (icmp_ln846_fu_789_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        dptr_reg_460 <= dptr_2_fu_116;
    end else if (((grp_process_block_111_112_fu_512_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        dptr_reg_460 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln863_fu_1049_p2 == 1'd0))) begin
        indvars_iv_reg_472 <= 64'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln863_1_fu_1188_p2 == 1'd0) & (icmp_ln863_reg_1781 == 1'd0))) begin
        indvars_iv_reg_472 <= add_ln865_fu_1176_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        len_assign_fu_108 <= 64'd8;
    end else if (((1'b1 == ap_CS_fsm_state5) & ((icmp_ln863_1_fu_1188_p2 == 1'd1) | (icmp_ln863_reg_1781 == 1'd1)))) begin
        len_assign_fu_108 <= sub_ln862_reg_1776;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_assign_fu_112 <= 64'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln863_1_fu_1188_p2 == 1'd1) & (icmp_ln863_reg_1781 == 1'd0))) begin
        out_assign_fu_112 <= add_ln863_1_fu_1211_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rng_st_0_0_fu_216 <= p_read;
    end else if (((grp_process_block_111_112_fu_512_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        rng_st_0_0_fu_216 <= grp_process_block_111_112_fu_512_ap_return_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rng_st_10_0_fu_176 <= p_read10;
    end else if (((grp_process_block_111_112_fu_512_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        rng_st_10_0_fu_176 <= grp_process_block_111_112_fu_512_ap_return_10;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rng_st_11_0_fu_172 <= p_read11;
    end else if (((grp_process_block_111_112_fu_512_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        rng_st_11_0_fu_172 <= grp_process_block_111_112_fu_512_ap_return_11;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rng_st_12_0_fu_168 <= p_read12;
    end else if (((grp_process_block_111_112_fu_512_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        rng_st_12_0_fu_168 <= grp_process_block_111_112_fu_512_ap_return_12;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rng_st_1316_0_fu_164 <= p_read13;
    end else if (((grp_process_block_111_112_fu_512_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        rng_st_1316_0_fu_164 <= grp_process_block_111_112_fu_512_ap_return_13;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rng_st_14_0_fu_160 <= p_read14;
    end else if (((grp_process_block_111_112_fu_512_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        rng_st_14_0_fu_160 <= grp_process_block_111_112_fu_512_ap_return_14;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rng_st_15_0_fu_156 <= p_read15;
    end else if (((grp_process_block_111_112_fu_512_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        rng_st_15_0_fu_156 <= grp_process_block_111_112_fu_512_ap_return_15;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rng_st_16_0_fu_152 <= p_read16;
    end else if (((grp_process_block_111_112_fu_512_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        rng_st_16_0_fu_152 <= grp_process_block_111_112_fu_512_ap_return_16;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rng_st_17_0_fu_148 <= p_read17;
    end else if (((grp_process_block_111_112_fu_512_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        rng_st_17_0_fu_148 <= grp_process_block_111_112_fu_512_ap_return_17;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rng_st_18_0_fu_144 <= p_read18;
    end else if (((grp_process_block_111_112_fu_512_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        rng_st_18_0_fu_144 <= grp_process_block_111_112_fu_512_ap_return_18;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rng_st_19_0_fu_140 <= p_read19;
    end else if (((grp_process_block_111_112_fu_512_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        rng_st_19_0_fu_140 <= grp_process_block_111_112_fu_512_ap_return_19;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rng_st_1_0_fu_212 <= p_read1;
    end else if (((grp_process_block_111_112_fu_512_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        rng_st_1_0_fu_212 <= grp_process_block_111_112_fu_512_ap_return_1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rng_st_20_0_fu_136 <= p_read20;
    end else if (((grp_process_block_111_112_fu_512_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        rng_st_20_0_fu_136 <= grp_process_block_111_112_fu_512_ap_return_20;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rng_st_21_0_fu_132 <= p_read21;
    end else if (((grp_process_block_111_112_fu_512_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        rng_st_21_0_fu_132 <= grp_process_block_111_112_fu_512_ap_return_21;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rng_st_22_0_fu_128 <= p_read22;
    end else if (((grp_process_block_111_112_fu_512_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        rng_st_22_0_fu_128 <= grp_process_block_111_112_fu_512_ap_return_22;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rng_st_23_0_fu_124 <= p_read23;
    end else if (((grp_process_block_111_112_fu_512_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        rng_st_23_0_fu_124 <= grp_process_block_111_112_fu_512_ap_return_23;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rng_st_24_0_fu_120 <= p_read24;
    end else if (((grp_process_block_111_112_fu_512_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        rng_st_24_0_fu_120 <= grp_process_block_111_112_fu_512_ap_return_24;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rng_st_2_0_fu_208 <= p_read2;
    end else if (((grp_process_block_111_112_fu_512_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        rng_st_2_0_fu_208 <= grp_process_block_111_112_fu_512_ap_return_2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rng_st_3_0_fu_204 <= p_read3;
    end else if (((grp_process_block_111_112_fu_512_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        rng_st_3_0_fu_204 <= grp_process_block_111_112_fu_512_ap_return_3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rng_st_4_0_fu_200 <= p_read4;
    end else if (((grp_process_block_111_112_fu_512_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        rng_st_4_0_fu_200 <= grp_process_block_111_112_fu_512_ap_return_4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rng_st_5_0_fu_196 <= p_read5;
    end else if (((grp_process_block_111_112_fu_512_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        rng_st_5_0_fu_196 <= grp_process_block_111_112_fu_512_ap_return_5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rng_st_6_0_fu_192 <= p_read6;
    end else if (((grp_process_block_111_112_fu_512_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        rng_st_6_0_fu_192 <= grp_process_block_111_112_fu_512_ap_return_6;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rng_st_7_0_fu_188 <= p_read7;
    end else if (((grp_process_block_111_112_fu_512_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        rng_st_7_0_fu_188 <= grp_process_block_111_112_fu_512_ap_return_7;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rng_st_8_0_fu_184 <= p_read8;
    end else if (((grp_process_block_111_112_fu_512_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        rng_st_8_0_fu_184 <= grp_process_block_111_112_fu_512_ap_return_8;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rng_st_9_0_fu_180 <= p_read9;
    end else if (((grp_process_block_111_112_fu_512_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        rng_st_9_0_fu_180 <= grp_process_block_111_112_fu_512_ap_return_9;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        clen_1_reg_1770 <= clen_1_fu_1037_p3;
        icmp_ln863_reg_1781 <= icmp_ln863_fu_1049_p2;
        sub_ln862_reg_1776 <= sub_ln862_fu_1044_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        dptr_4_reg_1624 <= dptr_2_fu_116;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        empty_398_reg_1813 <= tmp_q0;
        empty_reg_1808 <= tmp_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        empty_399_reg_1828 <= tmp_q0;
        empty_400_reg_1833 <= tmp_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        empty_401_reg_1848 <= tmp_q0;
        empty_402_reg_1853 <= tmp_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln854_fu_795_p2 == 1'd1) & (icmp_ln846_fu_789_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        rng_st_0_0_load_1_reg_1755 <= rng_st_0_0_fu_216;
        rng_st_10_0_load_1_reg_1705 <= rng_st_10_0_fu_176;
        rng_st_11_0_load_1_reg_1700 <= rng_st_11_0_fu_172;
        rng_st_12_0_load_1_reg_1695 <= rng_st_12_0_fu_168;
        rng_st_1316_0_load_1_reg_1690 <= rng_st_1316_0_fu_164;
        rng_st_14_0_load_1_reg_1685 <= rng_st_14_0_fu_160;
        rng_st_15_0_load_1_reg_1680 <= rng_st_15_0_fu_156;
        rng_st_16_0_load_1_reg_1675 <= rng_st_16_0_fu_152;
        rng_st_17_0_load_1_reg_1670 <= rng_st_17_0_fu_148;
        rng_st_18_0_load_1_reg_1665 <= rng_st_18_0_fu_144;
        rng_st_19_0_load_1_reg_1660 <= rng_st_19_0_fu_140;
        rng_st_1_0_load_1_reg_1750 <= rng_st_1_0_fu_212;
        rng_st_20_0_load_1_reg_1655 <= rng_st_20_0_fu_136;
        rng_st_21_0_load_1_reg_1650 <= rng_st_21_0_fu_132;
        rng_st_22_0_load_1_reg_1645 <= rng_st_22_0_fu_128;
        rng_st_23_0_load_1_reg_1640 <= rng_st_23_0_fu_124;
        rng_st_24_0_load_1_reg_1635 <= rng_st_24_0_fu_120;
        rng_st_2_0_load_1_reg_1745 <= rng_st_2_0_fu_208;
        rng_st_3_0_load_1_reg_1740 <= rng_st_3_0_fu_204;
        rng_st_4_0_load_1_reg_1735 <= rng_st_4_0_fu_200;
        rng_st_5_0_load_1_reg_1730 <= rng_st_5_0_fu_196;
        rng_st_6_0_load_1_reg_1725 <= rng_st_6_0_fu_192;
        rng_st_7_0_load_1_reg_1720 <= rng_st_7_0_fu_188;
        rng_st_8_0_load_1_reg_1715 <= rng_st_8_0_fu_184;
        rng_st_9_0_load_1_reg_1710 <= rng_st_9_0_fu_180;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_process_block_111_112_fu_512_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_return_0 = or_ln_fu_1250_p9;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_return_1 = dptr_4_reg_1624;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_return_10 = rng_st_8_0_fu_184;
    end else begin
        ap_return_10 = ap_return_10_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_return_11 = rng_st_9_0_fu_180;
    end else begin
        ap_return_11 = ap_return_11_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_return_12 = rng_st_10_0_fu_176;
    end else begin
        ap_return_12 = ap_return_12_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_return_13 = rng_st_11_0_fu_172;
    end else begin
        ap_return_13 = ap_return_13_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_return_14 = rng_st_12_0_fu_168;
    end else begin
        ap_return_14 = ap_return_14_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_return_15 = rng_st_1316_0_fu_164;
    end else begin
        ap_return_15 = ap_return_15_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_return_16 = rng_st_14_0_fu_160;
    end else begin
        ap_return_16 = ap_return_16_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_return_17 = rng_st_15_0_fu_156;
    end else begin
        ap_return_17 = ap_return_17_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_return_18 = rng_st_16_0_fu_152;
    end else begin
        ap_return_18 = ap_return_18_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_return_19 = rng_st_17_0_fu_148;
    end else begin
        ap_return_19 = ap_return_19_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_return_2 = rng_st_0_0_fu_216;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_return_20 = rng_st_18_0_fu_144;
    end else begin
        ap_return_20 = ap_return_20_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_return_21 = rng_st_19_0_fu_140;
    end else begin
        ap_return_21 = ap_return_21_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_return_22 = rng_st_20_0_fu_136;
    end else begin
        ap_return_22 = ap_return_22_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_return_23 = rng_st_21_0_fu_132;
    end else begin
        ap_return_23 = ap_return_23_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_return_24 = rng_st_22_0_fu_128;
    end else begin
        ap_return_24 = ap_return_24_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_return_25 = rng_st_23_0_fu_124;
    end else begin
        ap_return_25 = ap_return_25_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_return_26 = rng_st_24_0_fu_120;
    end else begin
        ap_return_26 = ap_return_26_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_return_3 = rng_st_1_0_fu_212;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_return_4 = rng_st_2_0_fu_208;
    end else begin
        ap_return_4 = ap_return_4_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_return_5 = rng_st_3_0_fu_204;
    end else begin
        ap_return_5 = ap_return_5_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_return_6 = rng_st_4_0_fu_200;
    end else begin
        ap_return_6 = ap_return_6_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_return_7 = rng_st_5_0_fu_196;
    end else begin
        ap_return_7 = ap_return_7_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_return_8 = rng_st_6_0_fu_192;
    end else begin
        ap_return_8 = ap_return_8_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_return_9 = rng_st_7_0_fu_188;
    end else begin
        ap_return_9 = ap_return_9_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_address0 = zext_ln843_fu_1078_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_address0 = 64'd1;
    end else begin
        tmp_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_address1 = 64'd0;
    end else begin
        tmp_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5))) begin
        tmp_ce0 = 1'b1;
    end else begin
        tmp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        tmp_ce1 = 1'b1;
    end else begin
        tmp_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln863_reg_1781 == 1'd0))) begin
        tmp_we0 = 1'b1;
    end else begin
        tmp_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln854_fu_795_p2 == 1'd0) & (icmp_ln846_fu_789_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if (((icmp_ln854_fu_795_p2 == 1'd1) & (icmp_ln846_fu_789_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((grp_process_block_111_112_fu_512_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & ((icmp_ln863_1_fu_1188_p2 == 1'd1) | (icmp_ln863_reg_1781 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln843_fu_1072_p2 = (trunc_ln852_fu_1058_p1 + trunc_ln841_fu_1068_p1);

assign add_ln863_1_fu_1211_p2 = (clen_1_reg_1770 + out_assign_fu_112);

assign add_ln863_2_fu_1224_p2 = ($signed(dptr_reg_460) + $signed(64'd18446744073709551615));

assign add_ln863_fu_1194_p2 = ($signed(dptr_reg_460) + $signed(64'd18446744073709551479));

assign add_ln865_fu_1176_p2 = (indvars_iv_reg_472 + 64'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign clen_1_fu_1037_p3 = ((icmp_ln859_fu_1032_p2[0:0] == 1'b1) ? len_assign_fu_108 : clen_fu_1026_p2);

assign clen_2_fu_1062_p2 = ($signed(dec5_i_in_reg_483) + $signed(64'd18446744073709551615));

assign clen_fu_1026_p2 = (64'd136 - dptr_reg_460);

assign dptr_5_fu_1182_p2 = (dptr_1_reg_492 + 64'd1);

assign grp_process_block_111_112_fu_512_ap_start = grp_process_block_111_112_fu_512_ap_start_reg;

assign icmp_ln846_fu_789_p2 = ((len_assign_fu_108 == 64'd0) ? 1'b1 : 1'b0);

assign icmp_ln854_fu_795_p2 = ((dptr_2_fu_116 == 64'd136) ? 1'b1 : 1'b0);

assign icmp_ln859_fu_1032_p2 = ((clen_fu_1026_p2 > len_assign_fu_108) ? 1'b1 : 1'b0);

assign icmp_ln863_1_fu_1188_p2 = ((clen_2_fu_1062_p2 == 64'd0) ? 1'b1 : 1'b0);

assign icmp_ln863_2_fu_1205_p2 = ((add_ln863_fu_1194_p2 < xor_ln863_fu_1200_p2) ? 1'b1 : 1'b0);

assign icmp_ln863_fu_1049_p2 = ((clen_1_fu_1037_p3 == 64'd0) ? 1'b1 : 1'b0);

assign lshr_ln865_fu_1165_p2 = tmp_s_fu_1093_p27 >> zext_ln865_fu_1161_p1;

assign or_ln_fu_1250_p9 = {{{{{{{{tmp_q1}, {tmp_q0}}, {empty_402_reg_1853}}, {empty_401_reg_1848}}, {empty_400_reg_1833}}, {empty_399_reg_1828}}, {empty_398_reg_1813}}, {empty_reg_1808}};

assign select_ln863_fu_1216_p3 = ((icmp_ln863_2_fu_1205_p2[0:0] == 1'b1) ? xor_ln863_fu_1200_p2 : add_ln863_fu_1194_p2);

assign shl_ln_fu_1153_p3 = {{trunc_ln865_fu_1149_p1}, {3'd0}};

assign sub_ln862_fu_1044_p2 = (len_assign_fu_108 - clen_1_fu_1037_p3);

assign sub_ln863_fu_1230_p2 = (add_ln863_2_fu_1224_p2 - select_ln863_fu_1216_p3);

assign tmp_d0 = lshr_ln865_fu_1165_p2[7:0];

assign tmp_s_fu_1093_p26 = {{dptr_1_reg_492[63:3]}};

assign trunc_ln841_fu_1068_p1 = out_assign_fu_112[2:0];

assign trunc_ln852_fu_1058_p1 = indvars_iv_reg_472[2:0];

assign trunc_ln865_fu_1149_p1 = dptr_1_reg_492[2:0];

assign xor_ln863_fu_1200_p2 = (len_assign_fu_108 ^ 64'd18446744073709551615);

assign zext_ln843_fu_1078_p1 = add_ln843_fu_1072_p2;

assign zext_ln865_fu_1161_p1 = shl_ln_fu_1153_p3;

endmodule //keygen_get_rng_u64_82_101
