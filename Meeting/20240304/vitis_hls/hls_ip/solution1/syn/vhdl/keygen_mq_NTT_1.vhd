-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity keygen_mq_NTT_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    tmp2108_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    tmp2108_ce0 : OUT STD_LOGIC;
    tmp2108_we0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    tmp2108_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    tmp2108_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of keygen_mq_NTT_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv15_4FFF : STD_LOGIC_VECTOR (14 downto 0) := "100111111111111";
    constant ap_const_lv16_3001 : STD_LOGIC_VECTOR (15 downto 0) := "0011000000000001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv17_1CFFF : STD_LOGIC_VECTOR (16 downto 0) := "11100111111111111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv16_CFFF : STD_LOGIC_VECTOR (15 downto 0) := "1100111111111111";
    constant ap_const_lv16_9FFE : STD_LOGIC_VECTOR (15 downto 0) := "1001111111111110";
    constant ap_const_lv16_2FFF : STD_LOGIC_VECTOR (15 downto 0) := "0010111111111111";
    constant ap_const_lv30_3001 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000011000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal GMb_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal GMb_ce0 : STD_LOGIC;
    signal GMb_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln514_fu_194_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln514_reg_498 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_176_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln512_fu_198_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln515_fu_202_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln515_reg_509 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_fu_215_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_517 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln515_fu_210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln517_fu_249_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln517_reg_527 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal trunc_ln524_fu_263_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln524_reg_535 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln521_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2108_addr_1_reg_540 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_8_fu_277_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_8_reg_545 : STD_LOGIC_VECTOR (63 downto 0);
    signal j1_fu_287_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln515_fu_293_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_456_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal z_reg_565 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp2108_addr_reg_580 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal add_ln527_fu_450_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln527_reg_590 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal indvars_iv_reg_118 : STD_LOGIC_VECTOR (19 downto 0);
    signal j1_2_reg_128 : STD_LOGIC_VECTOR (19 downto 0);
    signal i_04_reg_140 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_02_reg_151 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal zext_ln519_fu_230_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln525_fu_272_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln524_fu_309_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_fu_76 : STD_LOGIC_VECTOR (10 downto 0);
    signal m_fu_80 : STD_LOGIC_VECTOR (10 downto 0);
    signal m_6_fu_235_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln526_fu_417_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ht_fu_184_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln515_2_fu_206_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln507_fu_221_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln519_fu_224_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln515_3_fu_253_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln525_fu_267_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln507_fu_283_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln406_fu_306_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_462_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_469_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln_fu_324_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal z_87_fu_337_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_183_fu_347_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln422_fu_355_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln396_fu_343_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal z_89_fu_363_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln522_1_fu_320_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln356_fu_373_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln356_fu_379_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln396_1_fu_369_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal d_fu_383_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln421_fu_333_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln526_1_fu_397_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_184_fu_389_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln526_fu_409_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln526_2_fu_403_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln522_fu_316_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal d_4_fu_424_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_185_fu_430_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln527_fu_442_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln374_fu_438_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_456_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_456_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_462_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_462_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_469_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_469_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_469_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal grp_fu_456_p00 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_469_p00 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_469_p20 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component keygen_mul_mul_16ns_14ns_30_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component keygen_mul_mul_16s_14ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component keygen_mac_muladd_16ns_14ns_30ns_31_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (29 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component keygen_mq_NTT_GMb_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;



begin
    GMb_U : component keygen_mq_NTT_GMb_ROM_AUTO_1R
    generic map (
        DataWidth => 14,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => GMb_address0,
        ce0 => GMb_ce0,
        q0 => GMb_q0);

    mul_mul_16ns_14ns_30_4_1_U118 : component keygen_mul_mul_16ns_14ns_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_456_p0,
        din1 => grp_fu_456_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_456_p2);

    mul_mul_16s_14ns_16_4_1_U119 : component keygen_mul_mul_16s_14ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_462_p0,
        din1 => grp_fu_462_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_462_p2);

    mac_muladd_16ns_14ns_30ns_31_4_1_U120 : component keygen_mac_muladd_16ns_14ns_30ns_31_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        din2_WIDTH => 30,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_469_p0,
        din1 => grp_fu_469_p1,
        din2 => grp_fu_469_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_469_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_04_reg_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_176_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_04_reg_140 <= ap_const_lv10_0;
            elsif (((icmp_ln521_fu_257_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_04_reg_140 <= i_reg_517;
            end if; 
        end if;
    end process;

    indvars_iv_reg_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_176_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvars_iv_reg_118 <= zext_ln512_fu_198_p1;
            elsif (((icmp_ln521_fu_257_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                indvars_iv_reg_118 <= add_ln515_fu_293_p2;
            end if; 
        end if;
    end process;

    j1_2_reg_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_176_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j1_2_reg_128 <= ap_const_lv20_0;
            elsif (((icmp_ln521_fu_257_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                j1_2_reg_128 <= j1_fu_287_p2;
            end if; 
        end if;
    end process;

    j_02_reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                j_02_reg_151 <= j_8_reg_545;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_02_reg_151 <= zext_ln515_reg_509;
            end if; 
        end if;
    end process;

    m_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                m_fu_80 <= ap_const_lv11_1;
            elsif (((icmp_ln515_fu_210_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                m_fu_80 <= m_6_fu_235_p2;
            end if; 
        end if;
    end process;

    t_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                t_fu_76 <= ap_const_lv11_400;
            elsif (((icmp_ln515_fu_210_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                t_fu_76 <= zext_ln514_reg_498;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                add_ln527_reg_590 <= add_ln527_fu_450_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_reg_517 <= i_fu_215_p2;
                    zext_ln515_reg_509(19 downto 0) <= zext_ln515_fu_202_p1(19 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln521_fu_257_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                j_8_reg_545 <= j_8_fu_277_p2;
                tmp2108_addr_1_reg_540 <= zext_ln525_fu_272_p1(11 - 1 downto 0);
                trunc_ln524_reg_535 <= trunc_ln524_fu_263_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                tmp2108_addr_reg_580 <= zext_ln524_fu_309_p1(11 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                z_reg_565 <= grp_fu_456_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_176_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln514_reg_498(9 downto 0) <= zext_ln514_fu_194_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    zext_ln517_reg_527(13 downto 0) <= zext_ln517_fu_249_p1(13 downto 0);
            end if;
        end if;
    end process;
    zext_ln514_reg_498(10) <= '0';
    zext_ln515_reg_509(63 downto 20) <= "00000000000000000000000000000000000000000000";
    zext_ln517_reg_527(29 downto 14) <= "0000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_176_p3, ap_CS_fsm_state3, icmp_ln515_fu_210_p2, ap_CS_fsm_state5, icmp_ln521_fu_257_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_176_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln515_fu_210_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln521_fu_257_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    GMb_address0 <= zext_ln519_fu_230_p1(10 - 1 downto 0);

    GMb_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            GMb_ce0 <= ap_const_logic_1;
        else 
            GMb_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln356_fu_373_p2 <= std_logic_vector(unsigned(zext_ln522_1_fu_320_p1) + unsigned(ap_const_lv17_1CFFF));
    add_ln515_fu_293_p2 <= std_logic_vector(unsigned(zext_ln507_fu_283_p1) + unsigned(indvars_iv_reg_118));
    add_ln519_fu_224_p2 <= std_logic_vector(unsigned(i_04_reg_140) + unsigned(trunc_ln507_fu_221_p1));
    add_ln525_fu_267_p2 <= std_logic_vector(unsigned(trunc_ln524_fu_263_p1) + unsigned(zext_ln514_reg_498));
    add_ln526_1_fu_397_p2 <= std_logic_vector(unsigned(zext_ln421_fu_333_p1) + unsigned(select_ln422_fu_355_p3));
    add_ln526_2_fu_403_p2 <= std_logic_vector(unsigned(add_ln526_1_fu_397_p2) + unsigned(tmp2108_q0));
    add_ln526_fu_417_p2 <= std_logic_vector(unsigned(select_ln526_fu_409_p3) + unsigned(add_ln526_2_fu_403_p2));
    add_ln527_fu_450_p2 <= std_logic_vector(unsigned(select_ln527_fu_442_p3) + unsigned(trunc_ln374_fu_438_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_176_p3)
    begin
        if ((((tmp_fu_176_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_fu_176_p3)
    begin
        if (((tmp_fu_176_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    d_4_fu_424_p2 <= std_logic_vector(unsigned(zext_ln522_fu_316_p1) - unsigned(sext_ln396_1_fu_369_p1));
    d_fu_383_p2 <= std_logic_vector(signed(sext_ln356_fu_379_p1) + signed(sext_ln396_1_fu_369_p1));
    grp_fu_456_p0 <= grp_fu_456_p00(16 - 1 downto 0);
    grp_fu_456_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2108_q0),30));
    grp_fu_456_p1 <= zext_ln517_reg_527(14 - 1 downto 0);
    grp_fu_462_p0 <= grp_fu_456_p2(16 - 1 downto 0);
    grp_fu_462_p1 <= ap_const_lv16_2FFF(14 - 1 downto 0);
    grp_fu_469_p0 <= grp_fu_469_p00(16 - 1 downto 0);
    grp_fu_469_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln406_fu_306_p0),30));
    grp_fu_469_p1 <= ap_const_lv30_3001(14 - 1 downto 0);
    grp_fu_469_p2 <= grp_fu_469_p20(30 - 1 downto 0);
    grp_fu_469_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(z_reg_565),31));
    ht_fu_184_p4 <= t_fu_76(10 downto 1);
    i_fu_215_p2 <= std_logic_vector(unsigned(i_04_reg_140) + unsigned(ap_const_lv10_1));
    icmp_ln515_fu_210_p2 <= "1" when (zext_ln515_2_fu_206_p1 = m_fu_80) else "0";
    icmp_ln521_fu_257_p2 <= "1" when (unsigned(j_02_reg_151) < unsigned(zext_ln515_3_fu_253_p1)) else "0";
    j1_fu_287_p2 <= std_logic_vector(unsigned(zext_ln507_fu_283_p1) + unsigned(j1_2_reg_128));
    j_8_fu_277_p2 <= std_logic_vector(unsigned(j_02_reg_151) + unsigned(ap_const_lv64_1));
    m_6_fu_235_p2 <= std_logic_vector(shift_left(unsigned(m_fu_80),to_integer(unsigned('0' & ap_const_lv11_1(11-1 downto 0)))));
    select_ln422_fu_355_p3 <= 
        ap_const_lv16_3001 when (tmp_183_fu_347_p3(0) = '1') else 
        ap_const_lv16_0;
    select_ln526_fu_409_p3 <= 
        ap_const_lv16_CFFF when (tmp_184_fu_389_p3(0) = '1') else 
        ap_const_lv16_9FFE;
    select_ln527_fu_442_p3 <= 
        ap_const_lv16_3001 when (tmp_185_fu_430_p3(0) = '1') else 
        ap_const_lv16_0;
        sext_ln356_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln356_fu_373_p2),18));

        sext_ln396_1_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(z_89_fu_363_p2),18));

        sext_ln396_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(z_87_fu_337_p2),16));


    tmp2108_address0_assign_proc : process(ap_CS_fsm_state5, tmp2108_addr_1_reg_540, tmp2108_addr_reg_580, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, zext_ln525_fu_272_p1, zext_ln524_fu_309_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            tmp2108_address0 <= tmp2108_addr_1_reg_540;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            tmp2108_address0 <= tmp2108_addr_reg_580;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            tmp2108_address0 <= zext_ln524_fu_309_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            tmp2108_address0 <= zext_ln525_fu_272_p1(11 - 1 downto 0);
        else 
            tmp2108_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    tmp2108_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            tmp2108_ce0 <= ap_const_logic_1;
        else 
            tmp2108_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tmp2108_d0_assign_proc : process(add_ln527_reg_590, ap_CS_fsm_state15, ap_CS_fsm_state16, add_ln526_fu_417_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            tmp2108_d0 <= add_ln527_reg_590;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            tmp2108_d0 <= add_ln526_fu_417_p2;
        else 
            tmp2108_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    tmp2108_we0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            tmp2108_we0 <= ap_const_lv2_3;
        else 
            tmp2108_we0 <= ap_const_lv2_0;
        end if; 
    end process;

    tmp_183_fu_347_p3 <= z_87_fu_337_p2(14 downto 14);
    tmp_184_fu_389_p3 <= d_fu_383_p2(17 downto 17);
    tmp_185_fu_430_p3 <= d_4_fu_424_p2(17 downto 17);
    tmp_fu_176_p3 <= m_fu_80(10 downto 10);
    trunc_ln374_fu_438_p1 <= d_4_fu_424_p2(16 - 1 downto 0);
    trunc_ln507_fu_221_p1 <= m_fu_80(10 - 1 downto 0);
    trunc_ln524_fu_263_p1 <= j_02_reg_151(11 - 1 downto 0);
    trunc_ln_fu_324_p4 <= grp_fu_469_p3(30 downto 16);
    z_87_fu_337_p2 <= std_logic_vector(unsigned(trunc_ln_fu_324_p4) + unsigned(ap_const_lv15_4FFF));
    z_89_fu_363_p2 <= std_logic_vector(unsigned(select_ln422_fu_355_p3) + unsigned(sext_ln396_fu_343_p1));
    zext_ln406_fu_306_p0 <= grp_fu_462_p2;
    zext_ln421_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln_fu_324_p4),16));
    zext_ln507_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_fu_76),20));
    zext_ln512_fu_198_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ht_fu_184_p4),20));
    zext_ln514_fu_194_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ht_fu_184_p4),11));
    zext_ln515_2_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_04_reg_140),11));
    zext_ln515_3_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv_reg_118),64));
    zext_ln515_fu_202_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j1_2_reg_128),64));
    zext_ln517_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(GMb_q0),30));
    zext_ln519_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln519_fu_224_p2),64));
    zext_ln522_1_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2108_q0),17));
    zext_ln522_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2108_q0),18));
    zext_ln524_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln524_reg_535),64));
    zext_ln525_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln525_fu_267_p2),64));
end behav;
