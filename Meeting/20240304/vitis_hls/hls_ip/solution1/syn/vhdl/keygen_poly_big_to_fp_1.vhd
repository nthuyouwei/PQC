-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity keygen_poly_big_to_fp_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    vla18_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    vla18_ce0 : OUT STD_LOGIC;
    vla18_we0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    vla18_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    vla18_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    vla18_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    vla18_ce1 : OUT STD_LOGIC;
    vla18_we1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    vla18_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    vla18_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    d : IN STD_LOGIC_VECTOR (14 downto 0);
    f : IN STD_LOGIC_VECTOR (14 downto 0);
    flen : IN STD_LOGIC_VECTOR (3 downto 0);
    fstride : IN STD_LOGIC_VECTOR (8 downto 0);
    logn : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of keygen_poly_big_to_fp_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv64_3FF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv64_41E0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000111100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv13_1FFF : STD_LOGIC_VECTOR (12 downto 0) := "1111111111111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal fstride_cast_fu_250_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal fstride_cast_reg_660 : STD_LOGIC_VECTOR (63 downto 0);
    signal n_fu_258_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal n_reg_665 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln2336_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2336_reg_671 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln2342_fu_270_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln2342_reg_691 : STD_LOGIC_VECTOR (12 downto 0);
    signal u_201_fu_297_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal u_201_reg_702 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal trunc_ln2352_fu_303_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln2352_reg_707 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln2342_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln2344_fu_425_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln2344_reg_720 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal cc_fu_429_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln2353_fu_443_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln2353_reg_730 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln2353_fu_447_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln2353_reg_735 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_37_fu_456_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal v_37_reg_743 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln2357_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_753 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal sext_ln2364_fu_638_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln2364_reg_758 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_238_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal fsc_reg_763 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fpr_of_fu_228_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_233_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fpr_of_fu_228_ap_start : STD_LOGIC;
    signal grp_fpr_of_fu_228_ap_done : STD_LOGIC;
    signal grp_fpr_of_fu_228_ap_idle : STD_LOGIC;
    signal grp_fpr_of_fu_228_ap_ready : STD_LOGIC;
    signal fsc_1_reg_183 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_25_reg_195 : STD_LOGIC_VECTOR (63 downto 0);
    signal cc_04_reg_207 : STD_LOGIC_VECTOR (0 downto 0);
    signal v_reg_217 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fpr_of_fu_228_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln2352_fu_341_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2338_fu_384_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln2337_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln2338_1_fu_395_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2360_1_fu_494_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2366_fu_529_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2366_1_fu_556_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal u_01_fu_92 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln2342_1_fu_561_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal u_199_fu_351_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal u_17_fu_96 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln2366_3_fu_534_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_238_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_238_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2335_fu_254_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln2352_fu_307_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln2352_2_fu_313_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln63_fu_318_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln2352_1_fu_326_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal lshr_ln2352_1_fu_331_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln2338_fu_357_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln_fu_361_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln2338_fu_369_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln_fu_374_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln2338_1_fu_389_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln2352_1_fu_405_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln2352_1_fu_415_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal neg_fu_419_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal xm_fu_433_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln2360_fu_462_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln2360_fu_466_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln65_fu_471_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln2360_1_fu_479_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal lshr_ln_fu_484_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln2366_fu_499_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln64_fu_502_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln2366_fu_510_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln2366_2_fu_519_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal bitcast_ln2366_fu_515_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln2366_1_fu_550_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln2360_fu_575_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal xor_ln2360_fu_579_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln2357_fu_593_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln2360_1_fu_588_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln2360_2_fu_584_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal w_fu_597_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_58_fu_603_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal shl_ln2363_fu_621_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln2358_fu_617_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln2363_fu_627_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_59_fu_632_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_238_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component keygen_fpr_of IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        i : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component keygen_dadd_64ns_64ns_64_2_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component keygen_dmul_64ns_64ns_64_2_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_fpr_of_fu_228 : component keygen_fpr_of
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_fpr_of_fu_228_ap_start,
        ap_done => grp_fpr_of_fu_228_ap_done,
        ap_idle => grp_fpr_of_fu_228_ap_idle,
        ap_ready => grp_fpr_of_fu_228_ap_ready,
        i => sext_ln2364_reg_758,
        ap_return => grp_fpr_of_fu_228_ap_return);

    dadd_64ns_64ns_64_2_full_dsp_1_U271 : component keygen_dadd_64ns_64ns_64_2_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => x_25_reg_195,
        din1 => grp_fu_238_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_233_p2);

    dmul_64ns_64ns_64_2_max_dsp_1_U272 : component keygen_dmul_64ns_64ns_64_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_238_p0,
        din1 => grp_fu_238_p1,
        ce => grp_fu_238_ce,
        dout => grp_fu_238_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_fpr_of_fu_228_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_fpr_of_fu_228_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_fpr_of_fu_228_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_fpr_of_fu_228_ap_ready = ap_const_logic_1)) then 
                    grp_fpr_of_fu_228_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    cc_04_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                cc_04_reg_207 <= tmp_reg_753;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                cc_04_reg_207 <= cc_fu_429_p1;
            end if; 
        end if;
    end process;

    fsc_1_reg_183_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                fsc_1_reg_183 <= fsc_reg_763;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                fsc_1_reg_183 <= ap_const_lv64_3FF0000000000000;
            end if; 
        end if;
    end process;

    u_01_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln2336_fu_264_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((icmp_ln2336_fu_264_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
                u_01_fu_92 <= ap_const_lv64_0;
            elsif (((icmp_ln2336_reg_671 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln2337_fu_346_p2 = ap_const_lv1_0))) then 
                u_01_fu_92 <= u_199_fu_351_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln2357_fu_451_p2 = ap_const_lv1_1))) then 
                u_01_fu_92 <= add_ln2342_1_fu_561_p2;
            end if; 
        end if;
    end process;

    u_17_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln2336_fu_264_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                u_17_fu_96 <= ap_const_lv64_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln2357_fu_451_p2 = ap_const_lv1_1))) then 
                u_17_fu_96 <= u_201_reg_702;
            end if; 
        end if;
    end process;

    v_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                v_reg_217 <= v_37_reg_743;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                v_reg_217 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    x_25_reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                x_25_reg_195 <= grp_fu_233_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                x_25_reg_195 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                fsc_reg_763 <= grp_fu_238_p2;
                sext_ln2364_reg_758 <= sext_ln2364_fu_638_p1;
                tmp_reg_753 <= w_fu_597_p2(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    fstride_cast_reg_660(8 downto 0) <= fstride_cast_fu_250_p1(8 downto 0);
                icmp_ln2336_reg_671 <= icmp_ln2336_fu_264_p2;
                n_reg_665 <= n_fu_258_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                sext_ln2344_reg_720 <= sext_ln2344_fu_425_p1;
                sext_ln2353_reg_730 <= sext_ln2353_fu_443_p1;
                    zext_ln2353_reg_735(30 downto 0) <= zext_ln2353_fu_447_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln2342_fu_292_p2 = ap_const_lv1_0) and (icmp_ln2336_reg_671 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                trunc_ln2352_reg_707 <= trunc_ln2352_fu_303_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln2336_reg_671 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                u_201_reg_702 <= u_201_fu_297_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                v_37_reg_743 <= v_37_fu_456_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln2336_fu_264_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    zext_ln2342_reg_691(3 downto 0) <= zext_ln2342_fu_270_p1(3 downto 0);
            end if;
        end if;
    end process;
    fstride_cast_reg_660(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    zext_ln2342_reg_691(12 downto 4) <= "000000000";
    zext_ln2353_reg_735(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln2336_reg_671, ap_CS_fsm_state2, icmp_ln2342_fu_292_p2, ap_CS_fsm_state4, icmp_ln2357_fu_451_p2, ap_CS_fsm_state6, grp_fpr_of_fu_228_ap_done, icmp_ln2337_fu_346_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (((icmp_ln2342_fu_292_p2 = ap_const_lv1_1) and (icmp_ln2336_reg_671 = ap_const_lv1_0)) or ((icmp_ln2336_reg_671 = ap_const_lv1_1) and (icmp_ln2337_fu_346_p2 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((icmp_ln2336_reg_671 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln2337_fu_346_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln2357_fu_451_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_fpr_of_fu_228_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    add_ln2338_1_fu_389_p2 <= std_logic_vector(unsigned(trunc_ln_fu_374_p4) + unsigned(ap_const_lv13_1));
    add_ln2338_fu_369_p2 <= std_logic_vector(unsigned(shl_ln_fu_361_p3) + unsigned(d));
    add_ln2342_1_fu_561_p2 <= std_logic_vector(unsigned(u_01_fu_92) + unsigned(fstride_cast_reg_660));
    add_ln2352_1_fu_326_p2 <= std_logic_vector(unsigned(shl_ln63_fu_318_p3) + unsigned(f));
    add_ln2352_2_fu_313_p2 <= std_logic_vector(unsigned(add_ln2352_fu_307_p2) + unsigned(zext_ln2342_reg_691));
    add_ln2352_fu_307_p2 <= std_logic_vector(unsigned(trunc_ln2352_fu_303_p1) + unsigned(ap_const_lv13_1FFF));
    add_ln2360_1_fu_479_p2 <= std_logic_vector(unsigned(shl_ln65_fu_471_p3) + unsigned(f));
    add_ln2360_fu_466_p2 <= std_logic_vector(unsigned(zext_ln2360_fu_462_p1) + unsigned(trunc_ln2352_reg_707));
    add_ln2366_1_fu_550_p2 <= std_logic_vector(unsigned(trunc_ln2366_2_fu_519_p4) + unsigned(ap_const_lv13_1));
    add_ln2366_fu_510_p2 <= std_logic_vector(unsigned(shl_ln64_fu_502_p3) + unsigned(d));
    and_ln2363_fu_627_p2 <= (shl_ln2363_fu_621_p2 and sext_ln2344_reg_720);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(grp_fpr_of_fu_228_ap_done)
    begin
        if ((grp_fpr_of_fu_228_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln2336_reg_671, ap_CS_fsm_state2, icmp_ln2342_fu_292_p2, icmp_ln2337_fu_346_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (((icmp_ln2342_fu_292_p2 = ap_const_lv1_1) and (icmp_ln2336_reg_671 = ap_const_lv1_0)) or ((icmp_ln2336_reg_671 = ap_const_lv1_1) and (icmp_ln2337_fu_346_p2 = ap_const_lv1_1)))) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln2336_reg_671, ap_CS_fsm_state2, icmp_ln2342_fu_292_p2, icmp_ln2337_fu_346_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (((icmp_ln2342_fu_292_p2 = ap_const_lv1_1) and (icmp_ln2336_reg_671 = ap_const_lv1_0)) or ((icmp_ln2336_reg_671 = ap_const_lv1_1) and (icmp_ln2337_fu_346_p2 = ap_const_lv1_1))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln2366_fu_515_p1 <= x_25_reg_195;
    cc_fu_429_p1 <= neg_fu_419_p2(1 - 1 downto 0);
    fstride_cast_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fstride),64));
    grp_fpr_of_fu_228_ap_start <= grp_fpr_of_fu_228_ap_start_reg;

    grp_fu_238_ce_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, grp_fpr_of_fu_228_ap_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_fpr_of_fu_228_ap_done = ap_const_logic_1)))) then 
            grp_fu_238_ce <= ap_const_logic_1;
        else 
            grp_fu_238_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_238_p0_assign_proc : process(ap_CS_fsm_state4, grp_fpr_of_fu_228_ap_return, ap_CS_fsm_state6, fsc_1_reg_183)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_238_p0 <= grp_fpr_of_fu_228_ap_return;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_238_p0 <= fsc_1_reg_183;
        else 
            grp_fu_238_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_238_p1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, fsc_1_reg_183)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_238_p1 <= fsc_1_reg_183;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_238_p1 <= ap_const_lv64_41E0000000000000;
        else 
            grp_fu_238_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln2336_fu_264_p2 <= "1" when (flen = ap_const_lv4_0) else "0";
    icmp_ln2337_fu_346_p2 <= "1" when (u_01_fu_92 = n_reg_665) else "0";
    icmp_ln2342_fu_292_p2 <= "1" when (u_17_fu_96 = n_reg_665) else "0";
    icmp_ln2357_fu_451_p2 <= "1" when (v_reg_217 = flen) else "0";
    lshr_ln2352_1_fu_331_p4 <= add_ln2352_1_fu_326_p2(14 downto 2);
    lshr_ln_fu_484_p4 <= add_ln2360_1_fu_479_p2(14 downto 2);
    n_fu_258_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_1),to_integer(unsigned('0' & zext_ln2335_fu_254_p1(31-1 downto 0)))));
    neg_fu_419_p2 <= std_logic_vector(unsigned(ap_const_lv3_0) - unsigned(zext_ln2352_1_fu_415_p1));
        sext_ln2344_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(neg_fu_419_p2),32));

        sext_ln2353_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xm_fu_433_p4),31));

        sext_ln2364_fu_638_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(w_59_fu_632_p2),64));

    shl_ln2363_fu_621_p2 <= std_logic_vector(shift_left(unsigned(w_fu_597_p2),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln63_fu_318_p3 <= (add_ln2352_2_fu_313_p2 & ap_const_lv2_0);
    shl_ln64_fu_502_p3 <= (trunc_ln2366_fu_499_p1 & ap_const_lv3_0);
    shl_ln65_fu_471_p3 <= (add_ln2360_fu_466_p2 & ap_const_lv2_0);
    shl_ln_fu_361_p3 <= (trunc_ln2338_fu_357_p1 & ap_const_lv3_0);
    trunc_ln2338_fu_357_p1 <= u_01_fu_92(12 - 1 downto 0);
    trunc_ln2352_1_fu_405_p4 <= vla18_q0(31 downto 30);
    trunc_ln2352_fu_303_p1 <= u_01_fu_92(13 - 1 downto 0);
    trunc_ln2360_fu_575_p1 <= vla18_q1(31 - 1 downto 0);
    trunc_ln2366_2_fu_519_p4 <= add_ln2366_fu_510_p2(14 downto 2);
    trunc_ln2366_3_fu_534_p1 <= bitcast_ln2366_fu_515_p1(32 - 1 downto 0);
    trunc_ln2366_fu_499_p1 <= u_17_fu_96(12 - 1 downto 0);
    trunc_ln_fu_374_p4 <= add_ln2338_fu_369_p2(14 downto 2);
    u_199_fu_351_p2 <= std_logic_vector(unsigned(u_01_fu_92) + unsigned(ap_const_lv64_1));
    u_201_fu_297_p2 <= std_logic_vector(unsigned(u_17_fu_96) + unsigned(ap_const_lv64_1));
    v_37_fu_456_p2 <= std_logic_vector(unsigned(v_reg_217) + unsigned(ap_const_lv4_1));

    vla18_address0_assign_proc : process(icmp_ln2336_reg_671, ap_CS_fsm_state2, icmp_ln2342_fu_292_p2, ap_CS_fsm_state4, zext_ln2352_fu_341_p1, icmp_ln2337_fu_346_p2, zext_ln2338_1_fu_395_p1, zext_ln2366_fu_529_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            vla18_address0 <= zext_ln2366_fu_529_p1(13 - 1 downto 0);
        elsif (((icmp_ln2336_reg_671 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln2337_fu_346_p2 = ap_const_lv1_0))) then 
            vla18_address0 <= zext_ln2338_1_fu_395_p1(13 - 1 downto 0);
        elsif (((icmp_ln2342_fu_292_p2 = ap_const_lv1_0) and (icmp_ln2336_reg_671 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            vla18_address0 <= zext_ln2352_fu_341_p1(13 - 1 downto 0);
        else 
            vla18_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    vla18_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, icmp_ln2357_fu_451_p2, zext_ln2338_fu_384_p1, zext_ln2360_1_fu_494_p1, zext_ln2366_1_fu_556_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln2357_fu_451_p2 = ap_const_lv1_1))) then 
            vla18_address1 <= zext_ln2366_1_fu_556_p1(13 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln2357_fu_451_p2 = ap_const_lv1_0))) then 
            vla18_address1 <= zext_ln2360_1_fu_494_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            vla18_address1 <= zext_ln2338_fu_384_p1(13 - 1 downto 0);
        else 
            vla18_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    vla18_ce0_assign_proc : process(icmp_ln2336_reg_671, ap_CS_fsm_state2, icmp_ln2342_fu_292_p2, ap_CS_fsm_state4, icmp_ln2337_fu_346_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((icmp_ln2342_fu_292_p2 = ap_const_lv1_0) and (icmp_ln2336_reg_671 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((icmp_ln2336_reg_671 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln2337_fu_346_p2 = ap_const_lv1_0)))) then 
            vla18_ce0 <= ap_const_logic_1;
        else 
            vla18_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    vla18_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, icmp_ln2357_fu_451_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln2357_fu_451_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln2357_fu_451_p2 = ap_const_lv1_0)))) then 
            vla18_ce1 <= ap_const_logic_1;
        else 
            vla18_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    vla18_d0_assign_proc : process(icmp_ln2336_reg_671, ap_CS_fsm_state2, ap_CS_fsm_state4, icmp_ln2337_fu_346_p2, trunc_ln2366_3_fu_534_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            vla18_d0 <= trunc_ln2366_3_fu_534_p1;
        elsif (((icmp_ln2336_reg_671 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln2337_fu_346_p2 = ap_const_lv1_0))) then 
            vla18_d0 <= ap_const_lv32_0;
        else 
            vla18_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    vla18_d1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, icmp_ln2357_fu_451_p2, bitcast_ln2366_fu_515_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln2357_fu_451_p2 = ap_const_lv1_1))) then 
            vla18_d1 <= bitcast_ln2366_fu_515_p1(63 downto 32);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            vla18_d1 <= ap_const_lv32_0;
        else 
            vla18_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    vla18_we0_assign_proc : process(icmp_ln2336_reg_671, ap_CS_fsm_state2, ap_CS_fsm_state4, icmp_ln2357_fu_451_p2, icmp_ln2337_fu_346_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln2357_fu_451_p2 = ap_const_lv1_1)) or ((icmp_ln2336_reg_671 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln2337_fu_346_p2 = ap_const_lv1_0)))) then 
            vla18_we0 <= ap_const_lv4_F;
        else 
            vla18_we0 <= ap_const_lv4_0;
        end if; 
    end process;


    vla18_we1_assign_proc : process(icmp_ln2336_reg_671, ap_CS_fsm_state2, ap_CS_fsm_state4, icmp_ln2357_fu_451_p2, icmp_ln2337_fu_346_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln2357_fu_451_p2 = ap_const_lv1_1)) or ((icmp_ln2336_reg_671 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln2337_fu_346_p2 = ap_const_lv1_0)))) then 
            vla18_we1 <= ap_const_lv4_F;
        else 
            vla18_we1 <= ap_const_lv4_0;
        end if; 
    end process;

    w_58_fu_603_p2 <= std_logic_vector(unsigned(xor_ln2360_1_fu_588_p2) + unsigned(zext_ln2360_2_fu_584_p1));
    w_59_fu_632_p2 <= std_logic_vector(unsigned(zext_ln2358_fu_617_p1) - unsigned(and_ln2363_fu_627_p2));
    w_fu_597_p2 <= std_logic_vector(unsigned(xor_ln2360_fu_579_p2) + unsigned(zext_ln2357_fu_593_p1));
    xm_fu_433_p4 <= neg_fu_419_p2(2 downto 1);
    xor_ln2360_1_fu_588_p2 <= (trunc_ln2360_fu_575_p1 xor sext_ln2353_reg_730);
    xor_ln2360_fu_579_p2 <= (zext_ln2353_reg_735 xor vla18_q1);
    zext_ln2335_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(logn),64));
    zext_ln2338_1_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2338_1_fu_389_p2),64));
    zext_ln2338_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln_fu_374_p4),64));
    zext_ln2342_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(flen),13));
    zext_ln2352_1_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln2352_1_fu_405_p4),3));
    zext_ln2352_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln2352_1_fu_331_p4),64));
    zext_ln2353_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln2353_fu_443_p1),32));
    zext_ln2357_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cc_04_reg_207),32));
    zext_ln2358_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_58_fu_603_p2),32));
    zext_ln2360_1_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_484_p4),64));
    zext_ln2360_2_fu_584_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cc_04_reg_207),31));
    zext_ln2360_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v_reg_217),13));
    zext_ln2366_1_fu_556_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2366_1_fu_550_p2),64));
    zext_ln2366_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln2366_2_fu_519_p4),64));
end behav;
