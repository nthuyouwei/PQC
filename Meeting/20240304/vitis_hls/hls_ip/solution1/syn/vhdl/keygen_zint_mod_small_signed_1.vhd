-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity keygen_zint_mod_small_signed_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    vla18_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    vla18_ce0 : OUT STD_LOGIC;
    vla18_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    d : IN STD_LOGIC_VECTOR (14 downto 0);
    dlen : IN STD_LOGIC_VECTOR (7 downto 0);
    p : IN STD_LOGIC_VECTOR (24 downto 0);
    p0i : IN STD_LOGIC_VECTOR (30 downto 0);
    R2 : IN STD_LOGIC_VECTOR (30 downto 0);
    Rx : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of keygen_zint_mod_small_signed_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv25_1FFFFFF : STD_LOGIC_VECTOR (24 downto 0) := "1111111111111111111111111";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv10_3FC : STD_LOGIC_VECTOR (9 downto 0) := "1111111100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_cast2_cast_cast_cast_fu_147_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast2_cast_cast_cast_reg_552 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln722_fu_155_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln722_reg_559 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln1510_fu_159_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal zext_ln1510_reg_564 : STD_LOGIC_VECTOR (61 downto 0);
    signal u_fu_179_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal u_reg_569 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal trunc_ln_reg_575 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_7_fu_383_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_7_reg_585 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln1520_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln1524_fu_259_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1544_1_fu_435_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_fu_78 : STD_LOGIC_VECTOR (31 downto 0);
    signal u_22_fu_82 : STD_LOGIC_VECTOR (8 downto 0);
    signal dlen_cast1_fu_151_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_cast2_cast_cast_fu_143_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_cast2_cast_cast_fu_143_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal z_10_fu_189_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal z_10_fu_189_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_10_fu_189_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal mul_ln722_fu_198_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln722_fu_198_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal w_4_fu_207_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal w_4_fu_207_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal w_4_fu_207_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal zext_ln718_fu_212_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln723_fu_216_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal shl_ln_fu_232_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln1524_fu_240_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln1524_fu_244_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal lshr_ln_fu_249_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal d_1_fu_264_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_268_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln724_fu_276_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal and_ln724_fu_284_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal and_ln724_fu_284_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln724_fu_289_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln724_fu_293_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_fu_303_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_308_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1525_fu_316_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal and_ln1525_fu_324_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal and_ln1525_fu_324_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln1521_fu_329_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal d_3_fu_297_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1521_fu_333_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln685_fu_342_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_6_fu_337_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln685_3_fu_348_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_354_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln685_fu_362_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal and_ln685_fu_370_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal and_ln685_fu_370_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln685_fu_375_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln685_fu_379_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln11_fu_403_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1544_fu_410_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1544_fu_416_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln1544_1_fu_420_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal lshr_ln1544_1_fu_425_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal trunc_ln1_fu_440_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln1544_2_fu_450_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln1544_fu_454_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln1544_fu_460_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln1544_fu_464_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln697_fu_469_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_474_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln697_fu_482_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal and_ln697_fu_490_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal and_ln697_fu_490_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln697_fu_495_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln697_fu_499_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_fu_503_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal w_4_fu_207_p00 : STD_LOGIC_VECTOR (61 downto 0);
    signal z_10_fu_189_p10 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component keygen_mul_31ns_32ns_63_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (62 downto 0) );
    end component;


    component keygen_mul_31s_31s_31_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (30 downto 0);
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component keygen_mul_31ns_31ns_62_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (30 downto 0);
        dout : OUT STD_LOGIC_VECTOR (61 downto 0) );
    end component;



begin
    mul_31ns_32ns_63_1_1_U237 : component keygen_mul_31ns_32ns_63_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 32,
        dout_WIDTH => 63)
    port map (
        din0 => z_10_fu_189_p0,
        din1 => z_10_fu_189_p1,
        dout => z_10_fu_189_p2);

    mul_31s_31s_31_1_1_U238 : component keygen_mul_31s_31s_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        din0 => mul_ln722_fu_198_p0,
        din1 => p0i,
        dout => mul_ln722_fu_198_p2);

    mul_31ns_31ns_62_1_1_U239 : component keygen_mul_31ns_31ns_62_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 31,
        dout_WIDTH => 62)
    port map (
        din0 => w_4_fu_207_p0,
        din1 => w_4_fu_207_p1,
        dout => w_4_fu_207_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_return_preg <= z_fu_503_p2;
                end if; 
            end if;
        end if;
    end process;


    u_22_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                u_22_fu_82 <= dlen_cast1_fu_151_p1;
            elsif (((icmp_ln1520_fu_389_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                u_22_fu_82 <= u_reg_569;
            end if; 
        end if;
    end process;

    x_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                x_fu_78 <= ap_const_lv32_0;
            elsif (((icmp_ln1520_fu_389_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                x_fu_78 <= x_7_fu_383_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    p_cast2_cast_cast_cast_reg_552(30 downto 0) <= p_cast2_cast_cast_cast_fu_147_p1(30 downto 0);
                    zext_ln1510_reg_564(30 downto 0) <= zext_ln1510_fu_159_p1(30 downto 0);
                    zext_ln722_reg_559(30 downto 0) <= zext_ln722_fu_155_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                trunc_ln_reg_575 <= add_ln723_fu_216_p2(62 downto 31);
                u_reg_569 <= u_fu_179_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                x_7_reg_585 <= x_7_fu_383_p2;
            end if;
        end if;
    end process;
    p_cast2_cast_cast_cast_reg_552(31) <= '0';
    zext_ln722_reg_559(62 downto 31) <= "00000000000000000000000000000000";
    zext_ln1510_reg_564(61 downto 31) <= "0000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln1520_fu_389_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln1520_fu_389_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln1524_fu_244_p2 <= std_logic_vector(signed(sext_ln1524_fu_240_p1) + signed(d));
    add_ln1544_1_fu_420_p2 <= std_logic_vector(unsigned(zext_ln1544_fu_416_p1) + unsigned(d));
    add_ln1544_fu_410_p2 <= std_logic_vector(unsigned(shl_ln11_fu_403_p3) + unsigned(ap_const_lv10_3FC));
    add_ln685_3_fu_348_p2 <= std_logic_vector(unsigned(add_ln685_fu_342_p2) + unsigned(w_6_fu_337_p2));
    add_ln685_fu_342_p2 <= std_logic_vector(unsigned(w_fu_303_p2) + unsigned(zext_ln1521_fu_333_p1));
    add_ln723_fu_216_p2 <= std_logic_vector(unsigned(zext_ln718_fu_212_p1) + unsigned(z_10_fu_189_p2));
    and_ln1525_fu_324_p1 <= p;
    and_ln1525_fu_324_p2 <= (select_ln1525_fu_316_p3 and and_ln1525_fu_324_p1);
    and_ln1544_fu_464_p2 <= (sext_ln1544_fu_460_p1 and Rx);
    and_ln685_fu_370_p1 <= p;
    and_ln685_fu_370_p2 <= (select_ln685_fu_362_p3 and and_ln685_fu_370_p1);
    and_ln697_fu_490_p1 <= p;
    and_ln697_fu_490_p2 <= (select_ln697_fu_482_p3 and and_ln697_fu_490_p1);
    and_ln724_fu_284_p1 <= p;
    and_ln724_fu_284_p2 <= (select_ln724_fu_276_p3 and and_ln724_fu_284_p1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state4, z_fu_503_p2, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_return <= z_fu_503_p2;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    d_1_fu_264_p2 <= std_logic_vector(unsigned(trunc_ln_reg_575) - unsigned(p_cast2_cast_cast_cast_reg_552));
    d_3_fu_297_p2 <= std_logic_vector(unsigned(zext_ln724_fu_293_p1) + unsigned(d_1_fu_264_p2));
    dlen_cast1_fu_151_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dlen),9));
    icmp_ln1520_fu_389_p2 <= "1" when (u_reg_569 = ap_const_lv9_0) else "0";
    lshr_ln1544_1_fu_425_p4 <= add_ln1544_1_fu_420_p2(14 downto 2);
    lshr_ln_fu_249_p4 <= add_ln1524_fu_244_p2(14 downto 2);
    mul_ln722_fu_198_p0 <= z_10_fu_189_p2(31 - 1 downto 0);
    p_cast2_cast_cast_cast_fu_147_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_cast2_cast_cast_fu_143_p1),32));
    p_cast2_cast_cast_fu_143_p0 <= p;
        p_cast2_cast_cast_fu_143_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast2_cast_cast_fu_143_p0),31));

    select_ln1525_fu_316_p3 <= 
        ap_const_lv25_1FFFFFF when (tmp_9_fu_308_p3(0) = '1') else 
        ap_const_lv25_0;
    select_ln685_fu_362_p3 <= 
        ap_const_lv25_1FFFFFF when (tmp_10_fu_354_p3(0) = '1') else 
        ap_const_lv25_0;
    select_ln697_fu_482_p3 <= 
        ap_const_lv25_1FFFFFF when (tmp_11_fu_474_p3(0) = '1') else 
        ap_const_lv25_0;
    select_ln724_fu_276_p3 <= 
        ap_const_lv25_1FFFFFF when (tmp_fu_268_p3(0) = '1') else 
        ap_const_lv25_0;
        sext_ln1521_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(and_ln1525_fu_324_p2),31));

        sext_ln1524_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_232_p3),15));

        sext_ln1544_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1544_fu_454_p2),32));

        sext_ln685_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(and_ln685_fu_370_p2),31));

        sext_ln697_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(and_ln697_fu_490_p2),31));

        sext_ln724_fu_289_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(and_ln724_fu_284_p2),31));

    shl_ln11_fu_403_p3 <= (dlen & ap_const_lv2_0);
    shl_ln_fu_232_p3 <= (u_fu_179_p2 & ap_const_lv2_0);
    sub_ln1544_fu_454_p2 <= std_logic_vector(unsigned(ap_const_lv3_0) - unsigned(zext_ln1544_2_fu_450_p1));
    sub_ln697_fu_469_p2 <= std_logic_vector(unsigned(x_7_reg_585) - unsigned(and_ln1544_fu_464_p2));
    tmp_10_fu_354_p3 <= add_ln685_3_fu_348_p2(31 downto 31);
    tmp_11_fu_474_p3 <= sub_ln697_fu_469_p2(31 downto 31);
    tmp_9_fu_308_p3 <= w_fu_303_p2(31 downto 31);
    tmp_fu_268_p3 <= d_1_fu_264_p2(31 downto 31);
    trunc_ln1_fu_440_p4 <= vla18_q0(31 downto 30);
    u_fu_179_p2 <= std_logic_vector(unsigned(u_22_fu_82) + unsigned(ap_const_lv9_1FF));

    vla18_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, zext_ln1524_fu_259_p1, zext_ln1544_1_fu_435_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            vla18_address0 <= zext_ln1544_1_fu_435_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            vla18_address0 <= zext_ln1524_fu_259_p1(13 - 1 downto 0);
        else 
            vla18_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    vla18_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            vla18_ce0 <= ap_const_logic_1;
        else 
            vla18_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    w_4_fu_207_p0 <= w_4_fu_207_p00(31 - 1 downto 0);
    w_4_fu_207_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln722_fu_198_p2),62));
    w_4_fu_207_p1 <= zext_ln1510_reg_564(31 - 1 downto 0);
    w_6_fu_337_p2 <= std_logic_vector(unsigned(d_3_fu_297_p2) - unsigned(p_cast2_cast_cast_cast_reg_552));
    w_fu_303_p2 <= std_logic_vector(unsigned(vla18_q0) - unsigned(p_cast2_cast_cast_cast_reg_552));
    x_7_fu_383_p2 <= std_logic_vector(unsigned(zext_ln685_fu_379_p1) + unsigned(add_ln685_3_fu_348_p2));
    z_10_fu_189_p0 <= zext_ln722_reg_559(31 - 1 downto 0);
    z_10_fu_189_p1 <= z_10_fu_189_p10(32 - 1 downto 0);
    z_10_fu_189_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_fu_78),63));
    z_fu_503_p2 <= std_logic_vector(unsigned(zext_ln697_fu_499_p1) + unsigned(sub_ln697_fu_469_p2));
    zext_ln1510_fu_159_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_cast2_cast_cast_fu_143_p1),62));
    zext_ln1521_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1521_fu_329_p1),32));
    zext_ln1524_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_249_p4),64));
    zext_ln1544_1_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1544_1_fu_425_p4),64));
    zext_ln1544_2_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1_fu_440_p4),3));
    zext_ln1544_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1544_fu_410_p2),15));
    zext_ln685_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln685_fu_375_p1),32));
    zext_ln697_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln697_fu_495_p1),32));
    zext_ln718_fu_212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_4_fu_207_p2),63));
    zext_ln722_fu_155_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(R2),63));
    zext_ln724_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln724_fu_289_p1),32));
end behav;
