-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity keygen_poly_sub_scaled_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    vla18_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    vla18_ce0 : OUT STD_LOGIC;
    vla18_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    vla18_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    vla18_ce1 : OUT STD_LOGIC;
    vla18_we1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    vla18_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    vla18_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    F : IN STD_LOGIC_VECTOR (63 downto 0);
    Flen : IN STD_LOGIC_VECTOR (63 downto 0);
    Fstride : IN STD_LOGIC_VECTOR (8 downto 0);
    f_r : IN STD_LOGIC_VECTOR (14 downto 0);
    flen_r : IN STD_LOGIC_VECTOR (7 downto 0);
    fstride_r : IN STD_LOGIC_VECTOR (7 downto 0);
    k : IN STD_LOGIC_VECTOR (14 downto 0);
    sch : IN STD_LOGIC_VECTOR (27 downto 0);
    scl : IN STD_LOGIC_VECTOR (5 downto 0);
    logn : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of keygen_poly_sub_scaled_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv62_0 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv6_1F : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv13_1FFF : STD_LOGIC_VECTOR (12 downto 0) := "1111111111111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal scl_cast_fu_282_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal scl_cast_reg_788 : STD_LOGIC_VECTOR (31 downto 0);
    signal fstride_cast_fu_286_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal fstride_cast_reg_793 : STD_LOGIC_VECTOR (63 downto 0);
    signal flen_cast3_fu_290_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal flen_cast3_reg_798 : STD_LOGIC_VECTOR (63 downto 0);
    signal Fstride_cast2_fu_294_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal Fstride_cast2_reg_803 : STD_LOGIC_VECTOR (61 downto 0);
    signal n_fu_302_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal n_reg_808 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub4_fu_308_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub4_reg_814 : STD_LOGIC_VECTOR (63 downto 0);
    signal u_122_cast_cast_cast_cast_fu_318_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal u_122_cast_cast_cast_cast_reg_819 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2423_fu_328_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln2423_reg_825 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln2423_cast_fu_340_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln2423_cast_reg_830 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2415_fu_344_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln2415_reg_835 : STD_LOGIC_VECTOR (12 downto 0);
    signal u_reg_843 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln2415_fu_364_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln2415_reg_848 : STD_LOGIC_VECTOR (61 downto 0);
    signal u_195_fu_374_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal u_195_reg_856 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln2415_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal kf_fu_412_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal x_fu_425_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal v_33_fu_435_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal v_33_reg_879 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal trunc_ln2222_fu_441_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln2222_reg_884 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln2427_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln2222_2_fu_526_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln2222_2_reg_894 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal sext_ln2214_fu_530_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln2214_reg_899 : STD_LOGIC_VECTOR (62 downto 0);
    signal icmp_ln2234_fu_544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2234_reg_907 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln2225_fu_534_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal vla18_addr_301_reg_917 : STD_LOGIC_VECTOR (12 downto 0);
    signal u_196_fu_623_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal u_196_reg_923 : STD_LOGIC_VECTOR (63 downto 0);
    signal kf_3_fu_650_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_28_fu_658_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln2439_fu_665_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln2241_fu_696_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal x_22_reg_205 : STD_LOGIC_VECTOR (63 downto 0);
    signal v_02_reg_215 : STD_LOGIC_VECTOR (63 downto 0);
    signal kf_1_reg_227 : STD_LOGIC_VECTOR (31 downto 0);
    signal idx_reg_237 : STD_LOGIC_VECTOR (63 downto 0);
    signal cc_reg_249 : STD_LOGIC_VECTOR (31 downto 0);
    signal tw_reg_261 : STD_LOGIC_VECTOR (30 downto 0);
    signal u_122_reg_273 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2422_fu_407_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2222_fu_479_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2234_fu_581_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2241_1_fu_618_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal phi_mul_fu_96 : STD_LOGIC_VECTOR (61 downto 0);
    signal u_05_fu_100 : STD_LOGIC_VECTOR (63 downto 0);
    signal scl_cast_fu_282_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln2414_fu_298_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal u_122_cast_cast_cast_fu_314_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub9_i_fu_322_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub9_i_fu_322_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln_fu_332_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln2422_fu_380_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln58_fu_384_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln2422_fu_392_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal lshr_ln_fu_397_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln2423_1_fu_418_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln2222_fu_445_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln2222_2_fu_451_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln59_fu_456_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln2222_1_fu_464_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal lshr_ln2222_1_fu_469_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln2222_1_fu_492_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln2222_1_fu_502_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln2222_fu_506_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ysign_fu_512_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal sext_ln2222_fu_522_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal v_fu_539_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln2234_fu_549_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln2234_fu_553_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln60_fu_558_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln2234_1_fu_566_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal lshr_ln60_fu_571_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln2241_1_fu_586_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln61_fu_590_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln2427_fu_598_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln2241_fu_602_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal lshr_ln61_fu_608_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln2431_fu_629_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln2431_fu_634_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal kf_2_fu_639_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_27_fu_645_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal wy_fu_670_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln2235_fu_676_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln2235_fu_681_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tw_2_fu_691_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal wys_fu_685_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln2241_fu_704_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln2241_fu_704_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln2241_2_fu_709_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln2241_fu_713_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal add_ln2241_1_fu_717_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln2241_1_fu_723_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal mul_ln2241_fu_704_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal z_fu_727_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln2242_fu_733_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal mul_ln2241_fu_704_p00 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component keygen_mul_31ns_32s_63_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (62 downto 0) );
    end component;



begin
    mul_31ns_32s_63_1_1_U365 : component keygen_mul_31ns_32s_63_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 32,
        dout_WIDTH => 63)
    port map (
        din0 => mul_ln2241_fu_704_p0,
        din1 => mul_ln2241_fu_704_p1,
        dout => mul_ln2241_fu_704_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    cc_reg_249_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                cc_reg_249 <= z_fu_727_p2(62 downto 31);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                cc_reg_249 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    idx_reg_237_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln2225_fu_534_p2 = ap_const_lv1_0))) then 
                idx_reg_237 <= add_ln2439_fu_665_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                idx_reg_237 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    kf_1_reg_227_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln2225_fu_534_p2 = ap_const_lv1_0))) then 
                kf_1_reg_227 <= kf_3_fu_650_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                kf_1_reg_227 <= kf_fu_412_p2;
            end if; 
        end if;
    end process;

    phi_mul_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_fu_96 <= ap_const_lv62_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln2427_fu_430_p2 = ap_const_lv1_1))) then 
                phi_mul_fu_96 <= add_ln2415_reg_848;
            end if; 
        end if;
    end process;

    tw_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                tw_reg_261 <= trunc_ln2241_fu_696_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                tw_reg_261 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    u_05_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                u_05_fu_100 <= ap_const_lv64_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln2427_fu_430_p2 = ap_const_lv1_1))) then 
                u_05_fu_100 <= u_195_reg_856;
            end if; 
        end if;
    end process;

    u_122_reg_273_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                u_122_reg_273 <= u_196_reg_923;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                u_122_reg_273 <= u_122_cast_cast_cast_cast_reg_819;
            end if; 
        end if;
    end process;

    v_02_reg_215_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln2225_fu_534_p2 = ap_const_lv1_0))) then 
                v_02_reg_215 <= v_33_reg_879;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                v_02_reg_215 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    x_22_reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln2225_fu_534_p2 = ap_const_lv1_0))) then 
                x_22_reg_205 <= x_28_fu_658_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                x_22_reg_205 <= x_fu_425_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    Fstride_cast2_reg_803(8 downto 0) <= Fstride_cast2_fu_294_p1(8 downto 0);
                    flen_cast3_reg_798(7 downto 0) <= flen_cast3_fu_290_p1(7 downto 0);
                    fstride_cast_reg_793(7 downto 0) <= fstride_cast_fu_286_p1(7 downto 0);
                n_reg_808 <= n_fu_302_p2;
                scl_cast_reg_788 <= scl_cast_fu_282_p1;
                    shl_ln2423_cast_reg_830(10 downto 2) <= shl_ln2423_cast_fu_340_p1(10 downto 2);
                sub4_reg_814 <= sub4_fu_308_p2;
                    u_122_cast_cast_cast_cast_reg_819(31 downto 0) <= u_122_cast_cast_cast_cast_fu_318_p1(31 downto 0);
                    zext_ln2415_reg_835(7 downto 0) <= zext_ln2415_fu_344_p1(7 downto 0);
                    zext_ln2423_reg_825(5 downto 0) <= zext_ln2423_fu_328_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln2415_reg_848 <= add_ln2415_fu_364_p2;
                u_195_reg_856 <= u_195_fu_374_p2;
                u_reg_843 <= u_05_fu_100;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln2225_fu_534_p2 = ap_const_lv1_1))) then
                icmp_ln2234_reg_907 <= icmp_ln2234_fu_544_p2;
                u_196_reg_923 <= u_196_fu_623_p2;
                vla18_addr_301_reg_917 <= zext_ln2241_1_fu_618_p1(13 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                sext_ln2214_reg_899 <= sext_ln2214_fu_530_p1;
                    zext_ln2222_2_reg_894(30 downto 0) <= zext_ln2222_2_fu_526_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln2427_fu_430_p2 = ap_const_lv1_0))) then
                trunc_ln2222_reg_884 <= trunc_ln2222_fu_441_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                v_33_reg_879 <= v_33_fu_435_p2;
            end if;
        end if;
    end process;
    fstride_cast_reg_793(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    flen_cast3_reg_798(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    Fstride_cast2_reg_803(61 downto 9) <= "00000000000000000000000000000000000000000000000000000";
    u_122_cast_cast_cast_cast_reg_819(63 downto 32) <= "00000000000000000000000000000000";
    zext_ln2423_reg_825(31 downto 6) <= "00000000000000000000000000";
    shl_ln2423_cast_reg_830(1 downto 0) <= "00";
    shl_ln2423_cast_reg_830(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln2415_reg_835(12 downto 8) <= "00000";
    zext_ln2222_2_reg_894(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln2415_fu_369_p2, ap_CS_fsm_state4, icmp_ln2427_fu_430_p2, ap_CS_fsm_state6, icmp_ln2225_fu_534_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln2415_fu_369_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln2427_fu_430_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln2225_fu_534_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    Fstride_cast2_fu_294_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Fstride),62));
    add_ln2222_1_fu_464_p2 <= std_logic_vector(unsigned(shl_ln59_fu_456_p3) + unsigned(f_r));
    add_ln2222_2_fu_451_p2 <= std_logic_vector(unsigned(add_ln2222_fu_445_p2) + unsigned(zext_ln2415_reg_835));
    add_ln2222_fu_445_p2 <= std_logic_vector(unsigned(trunc_ln2222_fu_441_p1) + unsigned(ap_const_lv13_1FFF));
    add_ln2234_1_fu_566_p2 <= std_logic_vector(unsigned(shl_ln60_fu_558_p3) + unsigned(f_r));
    add_ln2234_fu_553_p2 <= std_logic_vector(unsigned(trunc_ln2234_fu_549_p1) + unsigned(trunc_ln2222_reg_884));
    add_ln2241_1_fu_717_p2 <= std_logic_vector(unsigned(zext_ln2241_2_fu_709_p1) + unsigned(sext_ln2241_fu_713_p1));
    add_ln2241_fu_602_p2 <= std_logic_vector(unsigned(shl_ln61_fu_590_p3) + unsigned(trunc_ln2427_fu_598_p1));
    add_ln2415_fu_364_p2 <= std_logic_vector(unsigned(phi_mul_fu_96) + unsigned(Fstride_cast2_reg_803));
    add_ln2422_fu_392_p2 <= std_logic_vector(unsigned(shl_ln58_fu_384_p3) + unsigned(k));
    add_ln2431_fu_629_p2 <= std_logic_vector(unsigned(v_02_reg_215) + unsigned(u_reg_843));
    add_ln2439_fu_665_p2 <= std_logic_vector(unsigned(idx_reg_237) + unsigned(fstride_cast_reg_793));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln2415_fu_369_p2)
    begin
        if ((((icmp_ln2415_fu_369_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln2415_fu_369_p2)
    begin
        if (((icmp_ln2415_fu_369_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    flen_cast3_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(flen_r),64));
    fstride_cast_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fstride_r),64));
    icmp_ln2225_fu_534_p2 <= "1" when (unsigned(u_122_reg_273) < unsigned(Flen)) else "0";
    icmp_ln2234_fu_544_p2 <= "1" when (unsigned(v_fu_539_p2) < unsigned(flen_cast3_reg_798)) else "0";
    icmp_ln2415_fu_369_p2 <= "1" when (u_05_fu_100 = n_reg_808) else "0";
    icmp_ln2427_fu_430_p2 <= "1" when (v_02_reg_215 = n_reg_808) else "0";
    icmp_ln2431_fu_634_p2 <= "1" when (add_ln2431_fu_629_p2 = sub4_reg_814) else "0";
    kf_2_fu_639_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(kf_1_reg_227));
    kf_3_fu_650_p3 <= 
        kf_2_fu_639_p2 when (icmp_ln2431_fu_634_p2(0) = '1') else 
        kf_1_reg_227;
    kf_fu_412_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(vla18_q0));
    lshr_ln2222_1_fu_469_p4 <= add_ln2222_1_fu_464_p2(14 downto 2);
    lshr_ln60_fu_571_p4 <= add_ln2234_1_fu_566_p2(14 downto 2);
    lshr_ln61_fu_608_p4 <= add_ln2241_fu_602_p2(14 downto 2);
    lshr_ln_fu_397_p4 <= add_ln2422_fu_392_p2(14 downto 2);
    mul_ln2241_fu_704_p0 <= mul_ln2241_fu_704_p00(31 - 1 downto 0);
    mul_ln2241_fu_704_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wys_fu_685_p2),63));
    mul_ln2241_fu_704_p1 <= sext_ln2214_reg_899(32 - 1 downto 0);
    n_fu_302_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_1),to_integer(unsigned('0' & zext_ln2414_fu_298_p1(31-1 downto 0)))));
    scl_cast_fu_282_p0 <= scl;
        scl_cast_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(scl_cast_fu_282_p0),32));

        sext_ln2214_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kf_1_reg_227),63));

        sext_ln2222_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ysign_fu_512_p4),31));

        sext_ln2241_1_fu_723_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln2241_1_fu_717_p2),63));

        sext_ln2241_fu_713_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(cc_reg_249),34));

    shl_ln2235_fu_676_p2 <= std_logic_vector(shift_left(unsigned(wy_fu_670_p3),to_integer(unsigned('0' & scl_cast_reg_788(31-1 downto 0)))));
    shl_ln2423_1_fu_418_p3 <= (phi_mul_fu_96 & ap_const_lv2_0);
    shl_ln2423_cast_fu_340_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_332_p3),64));
    shl_ln58_fu_384_p3 <= (trunc_ln2422_fu_380_p1 & ap_const_lv2_0);
    shl_ln59_fu_456_p3 <= (add_ln2222_2_fu_451_p2 & ap_const_lv2_0);
    shl_ln60_fu_558_p3 <= (add_ln2234_fu_553_p2 & ap_const_lv2_0);
    shl_ln61_fu_590_p3 <= (trunc_ln2241_1_fu_586_p1 & ap_const_lv2_0);
    shl_ln_fu_332_p3 <= (Fstride & ap_const_lv2_0);
    sub4_fu_308_p2 <= std_logic_vector(unsigned(n_fu_302_p2) + unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF));
    sub9_i_fu_322_p1 <= scl;
    sub9_i_fu_322_p2 <= std_logic_vector(unsigned(ap_const_lv6_1F) - unsigned(sub9_i_fu_322_p1));
    sub_ln2222_fu_506_p2 <= std_logic_vector(unsigned(ap_const_lv3_0) - unsigned(zext_ln2222_1_fu_502_p1));
    trunc_ln2222_1_fu_492_p4 <= vla18_q0(31 downto 30);
    trunc_ln2222_fu_441_p1 <= idx_reg_237(13 - 1 downto 0);
    trunc_ln2234_fu_549_p1 <= v_fu_539_p2(13 - 1 downto 0);
    trunc_ln2235_fu_681_p1 <= shl_ln2235_fu_676_p2(31 - 1 downto 0);
    trunc_ln2241_1_fu_586_p1 <= u_122_reg_273(13 - 1 downto 0);
    trunc_ln2241_fu_696_p1 <= tw_2_fu_691_p2(31 - 1 downto 0);
    trunc_ln2242_fu_733_p1 <= z_fu_727_p2(31 - 1 downto 0);
    trunc_ln2422_fu_380_p1 <= u_05_fu_100(13 - 1 downto 0);
    trunc_ln2427_fu_598_p1 <= x_22_reg_205(15 - 1 downto 0);
    tw_2_fu_691_p2 <= std_logic_vector(shift_right(unsigned(wy_fu_670_p3),to_integer(unsigned('0' & zext_ln2423_reg_825(31-1 downto 0)))));
    u_122_cast_cast_cast_cast_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_122_cast_cast_cast_fu_314_p1),64));
        u_122_cast_cast_cast_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sch),32));

    u_195_fu_374_p2 <= std_logic_vector(unsigned(u_05_fu_100) + unsigned(ap_const_lv64_1));
    u_196_fu_623_p2 <= std_logic_vector(unsigned(u_122_reg_273) + unsigned(ap_const_lv64_1));
    v_33_fu_435_p2 <= std_logic_vector(unsigned(v_02_reg_215) + unsigned(ap_const_lv64_1));
    v_fu_539_p2 <= std_logic_vector(unsigned(u_122_reg_273) - unsigned(u_122_cast_cast_cast_cast_reg_819));

    vla18_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, zext_ln2422_fu_407_p1, zext_ln2222_fu_479_p1, zext_ln2241_1_fu_618_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            vla18_address0 <= zext_ln2241_1_fu_618_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            vla18_address0 <= zext_ln2222_fu_479_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            vla18_address0 <= zext_ln2422_fu_407_p1(13 - 1 downto 0);
        else 
            vla18_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    vla18_address1_assign_proc : process(ap_CS_fsm_state6, vla18_addr_301_reg_917, ap_CS_fsm_state7, zext_ln2234_fu_581_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            vla18_address1 <= vla18_addr_301_reg_917;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            vla18_address1 <= zext_ln2234_fu_581_p1(13 - 1 downto 0);
        else 
            vla18_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    vla18_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            vla18_ce0 <= ap_const_logic_1;
        else 
            vla18_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    vla18_ce1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            vla18_ce1 <= ap_const_logic_1;
        else 
            vla18_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    vla18_d1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln2242_fu_733_p1),32));

    vla18_we1_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            vla18_we1 <= ap_const_lv4_F;
        else 
            vla18_we1 <= ap_const_lv4_0;
        end if; 
    end process;

    wy_fu_670_p3 <= 
        vla18_q1 when (icmp_ln2234_reg_907(0) = '1') else 
        zext_ln2222_2_reg_894;
    wys_fu_685_p2 <= (tw_reg_261 or trunc_ln2235_fu_681_p1);
    x_27_fu_645_p2 <= std_logic_vector(unsigned(x_22_reg_205) + unsigned(shl_ln2423_cast_reg_830));
    x_28_fu_658_p3 <= 
        F when (icmp_ln2431_fu_634_p2(0) = '1') else 
        x_27_fu_645_p2;
    x_fu_425_p2 <= std_logic_vector(unsigned(shl_ln2423_1_fu_418_p3) + unsigned(F));
    ysign_fu_512_p4 <= sub_ln2222_fu_506_p2(2 downto 1);
    z_fu_727_p2 <= std_logic_vector(signed(sext_ln2241_1_fu_723_p1) + signed(mul_ln2241_fu_704_p2));
    zext_ln2222_1_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln2222_1_fu_492_p4),3));
    zext_ln2222_2_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln2222_fu_522_p1),32));
    zext_ln2222_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln2222_1_fu_469_p4),64));
    zext_ln2234_fu_581_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln60_fu_571_p4),64));
    zext_ln2241_1_fu_618_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln61_fu_608_p4),64));
    zext_ln2241_2_fu_709_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(vla18_q0),34));
    zext_ln2414_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(logn),64));
    zext_ln2415_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(flen_r),13));
    zext_ln2422_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_397_p4),64));
    zext_ln2423_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub9_i_fu_322_p2),32));
end behav;
