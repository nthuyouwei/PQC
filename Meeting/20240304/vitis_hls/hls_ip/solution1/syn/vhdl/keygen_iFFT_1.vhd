-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity keygen_iFFT_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    vla18_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    vla18_ce0 : OUT STD_LOGIC;
    vla18_we0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    vla18_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    vla18_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    vla18_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    vla18_ce1 : OUT STD_LOGIC;
    vla18_we1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    vla18_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    vla18_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    f : IN STD_LOGIC_VECTOR (14 downto 0);
    logn : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of keygen_iFFT_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_8000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal fpr_gm_tab_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal fpr_gm_tab_ce0 : STD_LOGIC;
    signal fpr_gm_tab_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal fpr_gm_tab_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal fpr_gm_tab_ce1 : STD_LOGIC;
    signal fpr_gm_tab_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal fpr_p2_tab_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal fpr_p2_tab_ce0 : STD_LOGIC;
    signal fpr_p2_tab_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_288_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_314 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal zext_ln1449_fu_320_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1449_reg_967 : STD_LOGIC_VECTOR (63 downto 0);
    signal n_fu_324_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal n_reg_972 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1452_fu_340_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1452_reg_977 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_reg_982 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1457_fu_404_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1457_reg_997 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln1453_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dt_fu_408_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal dt_reg_1002 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln17_reg_1009 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln1474_fu_424_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln1474_reg_1014 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln1489_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1489_reg_1019 : STD_LOGIC_VECTOR (0 downto 0);
    signal i1_1_fu_443_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal i1_1_reg_1038 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln1459_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_re_reg_1053 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal s_im_fu_510_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_im_reg_1059 : STD_LOGIC_VECTOR (63 downto 0);
    signal vla18_addr_349_reg_1068 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln1468_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal vla18_addr_350_reg_1074 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln1473_2_reg_1079 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln1474_1_reg_1085 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln19_reg_1091 : STD_LOGIC_VECTOR (12 downto 0);
    signal j_10_fu_647_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_10_reg_1097 : STD_LOGIC_VECTOR (63 downto 0);
    signal j1_fu_653_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln1459_fu_658_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal vla18_load_229_reg_1112 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal vla18_load_230_reg_1117 : STD_LOGIC_VECTOR (31 downto 0);
    signal vla18_addr_351_reg_1122 : STD_LOGIC_VECTOR (12 downto 0);
    signal vla18_addr_352_reg_1128 : STD_LOGIC_VECTOR (12 downto 0);
    signal vla18_load_231_reg_1133 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal vla18_load_232_reg_1138 : STD_LOGIC_VECTOR (31 downto 0);
    signal vla18_addr_353_reg_1143 : STD_LOGIC_VECTOR (12 downto 0);
    signal vla18_addr_354_reg_1149 : STD_LOGIC_VECTOR (12 downto 0);
    signal x_re_fu_697_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal y_re_fu_711_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal vla18_addr_355_reg_1166 : STD_LOGIC_VECTOR (12 downto 0);
    signal vla18_addr_356_reg_1172 : STD_LOGIC_VECTOR (12 downto 0);
    signal x_im_fu_737_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_im_fu_751_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_292_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_297_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_303_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_308_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ni_reg_1215 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal vla18_addr_reg_1223 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal icmp_ln1493_fu_840_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal vla18_addr_348_reg_1229 : STD_LOGIC_VECTOR (12 downto 0);
    signal bitcast_ln1494_1_fu_907_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal indvars_iv_reg_241 : STD_LOGIC_VECTOR (63 downto 0);
    signal i1_reg_251 : STD_LOGIC_VECTOR (63 downto 0);
    signal j1_6_reg_262 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_03_reg_274 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal zext_ln1466_fu_466_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1467_fu_477_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1472_fu_547_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1472_1_fu_558_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1473_fu_663_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1473_1_fu_672_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1474_fu_677_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1474_1_fu_686_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1475_fu_717_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1475_1_fu_726_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1494_fu_878_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1494_1_fu_889_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_07_fu_86 : STD_LOGIC_VECTOR (63 downto 0);
    signal u_08_fu_90 : STD_LOGIC_VECTOR (63 downto 0);
    signal u_fu_482_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_06_fu_94 : STD_LOGIC_VECTOR (63 downto 0);
    signal u_11_fu_98 : STD_LOGIC_VECTOR (63 downto 0);
    signal u_230_fu_845_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln12_fu_761_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln13_fu_781_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln64_fu_801_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln65_fu_821_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal trunc_ln1494_3_fu_916_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_284_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_284_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_288_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_288_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_292_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_292_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal hn_fu_330_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_211_fu_375_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal hm_fu_394_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln1466_fu_449_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1466_fu_453_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln_fu_458_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln1467_fu_471_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal bitcast_ln147_fu_500_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln147_fu_504_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1472_fu_520_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln97_fu_524_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln1472_fu_532_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln18_fu_537_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln1472_1_fu_552_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln1473_fu_563_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln98_fu_568_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln1473_1_fu_576_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln1474_fu_591_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln99_fu_596_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln1474_1_fu_604_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln1475_fu_619_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln100_fu_624_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln1475_1_fu_632_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln1473_2_fu_667_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln1474_2_fu_681_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_s_fu_691_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_87_fu_703_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln1475_2_fu_721_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_86_fu_731_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_88_fu_743_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_284_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln12_fu_757_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln13_fu_777_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln64_fu_797_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln65_fu_817_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1494_fu_851_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln96_fu_855_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln1494_fu_863_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln1494_2_fu_868_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln1494_1_fu_883_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_fu_899_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln1494_fu_912_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_284_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_288_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component keygen_dadddsub_64ns_64ns_64_2_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component keygen_dmul_64ns_64ns_64_2_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component keygen_FFT_fpr_gm_tab_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component keygen_iFFT_1_fpr_p2_tab_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    fpr_gm_tab_U : component keygen_FFT_fpr_gm_tab_ROM_AUTO_1R
    generic map (
        DataWidth => 64,
        AddressRange => 2048,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fpr_gm_tab_address0,
        ce0 => fpr_gm_tab_ce0,
        q0 => fpr_gm_tab_q0,
        address1 => fpr_gm_tab_address1,
        ce1 => fpr_gm_tab_ce1,
        q1 => fpr_gm_tab_q1);

    fpr_p2_tab_U : component keygen_iFFT_1_fpr_p2_tab_ROM_AUTO_1R
    generic map (
        DataWidth => 64,
        AddressRange => 11,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fpr_p2_tab_address0,
        ce0 => fpr_p2_tab_ce0,
        q0 => fpr_p2_tab_q0);

    dadddsub_64ns_64ns_64_2_full_dsp_1_U223 : component keygen_dadddsub_64ns_64ns_64_2_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_284_p0,
        din1 => grp_fu_284_p1,
        opcode => grp_fu_284_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_284_p2);

    dadddsub_64ns_64ns_64_2_full_dsp_1_U224 : component keygen_dadddsub_64ns_64ns_64_2_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_288_p0,
        din1 => grp_fu_288_p1,
        opcode => grp_fu_288_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_288_p2);

    dmul_64ns_64ns_64_2_max_dsp_1_U225 : component keygen_dmul_64ns_64ns_64_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_292_p0,
        din1 => grp_fu_292_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_292_p2);

    dmul_64ns_64ns_64_2_max_dsp_1_U226 : component keygen_dmul_64ns_64ns_64_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_288_p2,
        din1 => s_im_reg_1059,
        ce => ap_const_logic_1,
        dout => grp_fu_297_p2);

    dmul_64ns_64ns_64_2_max_dsp_1_U227 : component keygen_dmul_64ns_64ns_64_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_314,
        din1 => s_im_reg_1059,
        ce => ap_const_logic_1,
        dout => grp_fu_303_p2);

    dmul_64ns_64ns_64_2_max_dsp_1_U228 : component keygen_dmul_64ns_64ns_64_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_288_p2,
        din1 => s_re_reg_1053,
        ce => ap_const_logic_1,
        dout => grp_fu_308_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i1_reg_251_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln1453_fu_385_p2 = ap_const_lv1_0))) then 
                i1_reg_251 <= ap_const_lv64_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln1468_fu_514_p2 = ap_const_lv1_0))) then 
                i1_reg_251 <= i1_1_reg_1038;
            end if; 
        end if;
    end process;

    indvars_iv_reg_241_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln1453_fu_385_p2 = ap_const_lv1_0))) then 
                indvars_iv_reg_241 <= t_06_fu_94;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln1468_fu_514_p2 = ap_const_lv1_0))) then 
                indvars_iv_reg_241 <= add_ln1459_fu_658_p2;
            end if; 
        end if;
    end process;

    j1_6_reg_262_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln1453_fu_385_p2 = ap_const_lv1_0))) then 
                j1_6_reg_262 <= ap_const_lv64_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln1468_fu_514_p2 = ap_const_lv1_0))) then 
                j1_6_reg_262 <= j1_fu_653_p2;
            end if; 
        end if;
    end process;

    j_03_reg_274_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                j_03_reg_274 <= j_10_reg_1097;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_03_reg_274 <= j1_6_reg_262;
            end if; 
        end if;
    end process;

    m_07_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                m_07_fu_86 <= n_fu_324_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln1459_fu_438_p2 = ap_const_lv1_0))) then 
                m_07_fu_86 <= zext_ln1457_reg_997;
            end if; 
        end if;
    end process;

    t_06_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                t_06_fu_94 <= ap_const_lv64_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln1459_fu_438_p2 = ap_const_lv1_0))) then 
                t_06_fu_94 <= dt_reg_1002;
            end if; 
        end if;
    end process;

    u_08_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                u_08_fu_90 <= zext_ln1449_fu_320_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln1459_fu_438_p2 = ap_const_lv1_0))) then 
                u_08_fu_90 <= u_fu_482_p2;
            end if; 
        end if;
    end process;

    u_11_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln1489_fu_428_p2 = ap_const_lv1_0) and (icmp_ln1453_fu_385_p2 = ap_const_lv1_1))) then 
                u_11_fu_98 <= ap_const_lv64_0;
            elsif (((icmp_ln1493_fu_840_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln1489_reg_1019 = ap_const_lv1_0))) then 
                u_11_fu_98 <= u_230_fu_845_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln1453_fu_385_p2 = ap_const_lv1_0))) then
                    dt_reg_1002(63 downto 1) <= dt_fu_408_p2(63 downto 1);
                trunc_ln1474_reg_1014 <= trunc_ln1474_fu_424_p1;
                trunc_ln17_reg_1009 <= m_07_fu_86(10 downto 1);
                    zext_ln1457_reg_997(62 downto 0) <= zext_ln1457_fu_404_p1(62 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i1_1_reg_1038 <= i1_1_fu_443_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln1453_fu_385_p2 = ap_const_lv1_1))) then
                icmp_ln1489_reg_1019 <= icmp_ln1489_fu_428_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln1468_fu_514_p2 = ap_const_lv1_1))) then
                j_10_reg_1097 <= j_10_fu_647_p2;
                trunc_ln1473_2_reg_1079 <= add_ln1473_1_fu_576_p2(14 downto 2);
                trunc_ln1474_1_reg_1085 <= add_ln1474_1_fu_604_p2(14 downto 2);
                trunc_ln19_reg_1091 <= add_ln1475_1_fu_632_p2(14 downto 2);
                vla18_addr_349_reg_1068 <= zext_ln1472_fu_547_p1(13 - 1 downto 0);
                vla18_addr_350_reg_1074 <= zext_ln1472_1_fu_558_p1(13 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                n_reg_972 <= n_fu_324_p2;
                trunc_ln_reg_982 <= n_fu_324_p2(12 downto 1);
                    zext_ln1449_reg_967(31 downto 0) <= zext_ln1449_fu_320_p1(31 downto 0);
                    zext_ln1452_reg_977(62 downto 0) <= zext_ln1452_fu_340_p1(62 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                ni_reg_1215 <= fpr_p2_tab_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state9))) then
                reg_314 <= grp_fu_288_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                s_im_reg_1059 <= s_im_fu_510_p1;
                s_re_reg_1053 <= fpr_gm_tab_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1493_fu_840_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln1489_reg_1019 = ap_const_lv1_0))) then
                vla18_addr_348_reg_1229 <= zext_ln1494_1_fu_889_p1(13 - 1 downto 0);
                vla18_addr_reg_1223 <= zext_ln1494_fu_878_p1(13 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                vla18_addr_351_reg_1122 <= zext_ln1473_fu_663_p1(13 - 1 downto 0);
                vla18_addr_352_reg_1128 <= zext_ln1473_1_fu_672_p1(13 - 1 downto 0);
                vla18_load_229_reg_1112 <= vla18_q1;
                vla18_load_230_reg_1117 <= vla18_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                vla18_addr_353_reg_1143 <= zext_ln1474_fu_677_p1(13 - 1 downto 0);
                vla18_addr_354_reg_1149 <= zext_ln1474_1_fu_686_p1(13 - 1 downto 0);
                vla18_load_231_reg_1133 <= vla18_q1;
                vla18_load_232_reg_1138 <= vla18_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                vla18_addr_355_reg_1166 <= zext_ln1475_fu_717_p1(13 - 1 downto 0);
                vla18_addr_356_reg_1172 <= zext_ln1475_1_fu_726_p1(13 - 1 downto 0);
            end if;
        end if;
    end process;
    zext_ln1449_reg_967(63 downto 32) <= "00000000000000000000000000000000";
    zext_ln1452_reg_977(63) <= '0';
    zext_ln1457_reg_997(63) <= '0';
    dt_reg_1002(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln1453_fu_385_p2, icmp_ln1489_fu_428_p2, icmp_ln1489_reg_1019, ap_CS_fsm_state3, icmp_ln1459_fu_438_p2, ap_CS_fsm_state5, icmp_ln1468_fu_514_p2, ap_CS_fsm_state15, icmp_ln1493_fu_840_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln1489_fu_428_p2 = ap_const_lv1_1) and (icmp_ln1453_fu_385_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln1489_fu_428_p2 = ap_const_lv1_0) and (icmp_ln1453_fu_385_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln1459_fu_438_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln1468_fu_514_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and ((icmp_ln1493_fu_840_p2 = ap_const_lv1_1) or (icmp_ln1489_reg_1019 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln1459_fu_658_p2 <= std_logic_vector(unsigned(dt_reg_1002) + unsigned(indvars_iv_reg_241));
    add_ln1466_fu_453_p2 <= std_logic_vector(unsigned(trunc_ln1466_fu_449_p1) + unsigned(trunc_ln17_reg_1009));
    add_ln1472_1_fu_552_p2 <= std_logic_vector(unsigned(trunc_ln18_fu_537_p4) + unsigned(ap_const_lv13_1));
    add_ln1472_fu_532_p2 <= std_logic_vector(unsigned(shl_ln97_fu_524_p3) + unsigned(f));
    add_ln1473_1_fu_576_p2 <= std_logic_vector(unsigned(shl_ln98_fu_568_p3) + unsigned(f));
    add_ln1473_2_fu_667_p2 <= std_logic_vector(unsigned(trunc_ln1473_2_reg_1079) + unsigned(ap_const_lv13_1));
    add_ln1473_fu_563_p2 <= std_logic_vector(unsigned(trunc_ln1472_fu_520_p1) + unsigned(trunc_ln_reg_982));
    add_ln1474_1_fu_604_p2 <= std_logic_vector(unsigned(shl_ln99_fu_596_p3) + unsigned(f));
    add_ln1474_2_fu_681_p2 <= std_logic_vector(unsigned(trunc_ln1474_1_reg_1085) + unsigned(ap_const_lv13_1));
    add_ln1474_fu_591_p2 <= std_logic_vector(unsigned(trunc_ln1472_fu_520_p1) + unsigned(trunc_ln1474_reg_1014));
    add_ln1475_1_fu_632_p2 <= std_logic_vector(unsigned(shl_ln100_fu_624_p3) + unsigned(f));
    add_ln1475_2_fu_721_p2 <= std_logic_vector(unsigned(trunc_ln19_reg_1091) + unsigned(ap_const_lv13_1));
    add_ln1475_fu_619_p2 <= std_logic_vector(unsigned(add_ln1474_fu_591_p2) + unsigned(trunc_ln_reg_982));
    add_ln1494_1_fu_883_p2 <= std_logic_vector(unsigned(trunc_ln1494_2_fu_868_p4) + unsigned(ap_const_lv13_1));
    add_ln1494_fu_863_p2 <= std_logic_vector(unsigned(shl_ln96_fu_855_p3) + unsigned(f));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln1489_reg_1019, ap_CS_fsm_state15, icmp_ln1493_fu_840_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state15) and ((icmp_ln1493_fu_840_p2 = ap_const_lv1_1) or (icmp_ln1489_reg_1019 = ap_const_lv1_1))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln1489_reg_1019, ap_CS_fsm_state15, icmp_ln1493_fu_840_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) and ((icmp_ln1493_fu_840_p2 = ap_const_lv1_1) or (icmp_ln1489_reg_1019 = ap_const_lv1_1)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln12_fu_757_p1 <= grp_fu_284_p2;
    bitcast_ln13_fu_777_p1 <= grp_fu_284_p2;
    bitcast_ln147_fu_500_p1 <= fpr_gm_tab_q0;
    bitcast_ln1494_1_fu_907_p1 <= tmp_fu_899_p3;
    bitcast_ln1494_fu_912_p1 <= grp_fu_292_p2;
    bitcast_ln64_fu_797_p1 <= grp_fu_284_p2;
    bitcast_ln65_fu_817_p1 <= reg_314;
    dt_fu_408_p2 <= std_logic_vector(shift_left(unsigned(t_06_fu_94),to_integer(unsigned('0' & ap_const_lv64_1(31-1 downto 0)))));
    fpr_gm_tab_address0 <= zext_ln1467_fu_477_p1(11 - 1 downto 0);
    fpr_gm_tab_address1 <= zext_ln1466_fu_466_p1(11 - 1 downto 0);

    fpr_gm_tab_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fpr_gm_tab_ce0 <= ap_const_logic_1;
        else 
            fpr_gm_tab_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fpr_gm_tab_ce1_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fpr_gm_tab_ce1 <= ap_const_logic_1;
        else 
            fpr_gm_tab_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    fpr_p2_tab_address0 <= zext_ln1449_reg_967(4 - 1 downto 0);

    fpr_p2_tab_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            fpr_p2_tab_ce0 <= ap_const_logic_1;
        else 
            fpr_p2_tab_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_284_opcode_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state8, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_284_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            grp_fu_284_opcode <= ap_const_lv2_0;
        else 
            grp_fu_284_opcode <= "XX";
        end if; 
    end process;


    grp_fu_284_p0_assign_proc : process(ap_CS_fsm_state9, x_re_fu_697_p1, ap_CS_fsm_state8, x_im_fu_737_p1, grp_fu_292_p2, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_284_p0 <= grp_fu_292_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_284_p0 <= x_im_fu_737_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_284_p0 <= x_re_fu_697_p1;
        else 
            grp_fu_284_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_284_p1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state8, y_re_fu_711_p1, y_im_fu_751_p1, ap_CS_fsm_state11, grp_fu_297_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_284_p1 <= grp_fu_297_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_284_p1 <= y_im_fu_751_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_284_p1 <= y_re_fu_711_p1;
        else 
            grp_fu_284_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_288_opcode_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state8, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            grp_fu_288_opcode <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_288_opcode <= ap_const_lv2_0;
        else 
            grp_fu_288_opcode <= "XX";
        end if; 
    end process;


    grp_fu_288_p0_assign_proc : process(ap_CS_fsm_state9, x_re_fu_697_p1, ap_CS_fsm_state8, x_im_fu_737_p1, ap_CS_fsm_state11, grp_fu_303_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_288_p0 <= grp_fu_303_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_288_p0 <= x_im_fu_737_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_288_p0 <= x_re_fu_697_p1;
        else 
            grp_fu_288_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_288_p1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state8, y_re_fu_711_p1, y_im_fu_751_p1, ap_CS_fsm_state11, grp_fu_308_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_288_p1 <= grp_fu_308_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_288_p1 <= y_im_fu_751_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_288_p1 <= y_re_fu_711_p1;
        else 
            grp_fu_288_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_292_p0_assign_proc : process(reg_314, ap_CS_fsm_state10, bitcast_ln1494_1_fu_907_p1, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_292_p0 <= bitcast_ln1494_1_fu_907_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_292_p0 <= reg_314;
        else 
            grp_fu_292_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_292_p1_assign_proc : process(s_re_reg_1053, ap_CS_fsm_state10, ni_reg_1215, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_292_p1 <= ni_reg_1215;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_292_p1 <= s_re_reg_1053;
        else 
            grp_fu_292_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    hm_fu_394_p4 <= m_07_fu_86(63 downto 1);
    hn_fu_330_p4 <= n_fu_324_p2(63 downto 1);
    i1_1_fu_443_p2 <= std_logic_vector(unsigned(i1_reg_251) + unsigned(ap_const_lv64_1));
    icmp_ln1453_fu_385_p2 <= "1" when (tmp_211_fu_375_p4 = ap_const_lv63_0) else "0";
    icmp_ln1459_fu_438_p2 <= "1" when (unsigned(j1_6_reg_262) < unsigned(zext_ln1452_reg_977)) else "0";
    icmp_ln1468_fu_514_p2 <= "1" when (unsigned(j_03_reg_274) < unsigned(indvars_iv_reg_241)) else "0";
    icmp_ln1489_fu_428_p2 <= "1" when (logn = ap_const_lv32_0) else "0";
    icmp_ln1493_fu_840_p2 <= "1" when (u_11_fu_98 = n_reg_972) else "0";
    j1_fu_653_p2 <= std_logic_vector(unsigned(dt_reg_1002) + unsigned(j1_6_reg_262));
    j_10_fu_647_p2 <= std_logic_vector(unsigned(j_03_reg_274) + unsigned(ap_const_lv64_1));
    n_fu_324_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_1),to_integer(unsigned('0' & zext_ln1449_fu_320_p1(31-1 downto 0)))));
    or_ln1467_fu_471_p2 <= (shl_ln_fu_458_p3 or ap_const_lv11_1);
    s_im_fu_510_p1 <= xor_ln147_fu_504_p2;
    shl_ln100_fu_624_p3 <= (add_ln1475_fu_619_p2 & ap_const_lv3_0);
    shl_ln96_fu_855_p3 <= (trunc_ln1494_fu_851_p1 & ap_const_lv3_0);
    shl_ln97_fu_524_p3 <= (trunc_ln1472_fu_520_p1 & ap_const_lv3_0);
    shl_ln98_fu_568_p3 <= (add_ln1473_fu_563_p2 & ap_const_lv3_0);
    shl_ln99_fu_596_p3 <= (add_ln1474_fu_591_p2 & ap_const_lv3_0);
    shl_ln_fu_458_p3 <= (add_ln1466_fu_453_p2 & ap_const_lv1_0);
    tmp_211_fu_375_p4 <= u_08_fu_90(63 downto 1);
    tmp_86_fu_731_p3 <= (vla18_load_232_reg_1138 & vla18_load_231_reg_1133);
    tmp_87_fu_703_p3 <= (vla18_q0 & vla18_q1);
    tmp_88_fu_743_p3 <= (vla18_q0 & vla18_q1);
    tmp_fu_899_p3 <= (vla18_q0 & vla18_q1);
    tmp_s_fu_691_p3 <= (vla18_load_230_reg_1117 & vla18_load_229_reg_1112);
    trunc_ln12_fu_761_p1 <= bitcast_ln12_fu_757_p1(32 - 1 downto 0);
    trunc_ln13_fu_781_p1 <= bitcast_ln13_fu_777_p1(32 - 1 downto 0);
    trunc_ln1466_fu_449_p1 <= i1_reg_251(10 - 1 downto 0);
    trunc_ln1472_fu_520_p1 <= j_03_reg_274(12 - 1 downto 0);
    trunc_ln1474_fu_424_p1 <= t_06_fu_94(12 - 1 downto 0);
    trunc_ln1494_2_fu_868_p4 <= add_ln1494_fu_863_p2(14 downto 2);
    trunc_ln1494_3_fu_916_p1 <= bitcast_ln1494_fu_912_p1(32 - 1 downto 0);
    trunc_ln1494_fu_851_p1 <= u_11_fu_98(12 - 1 downto 0);
    trunc_ln18_fu_537_p4 <= add_ln1472_fu_532_p2(14 downto 2);
    trunc_ln64_fu_801_p1 <= bitcast_ln64_fu_797_p1(32 - 1 downto 0);
    trunc_ln65_fu_821_p1 <= bitcast_ln65_fu_817_p1(32 - 1 downto 0);
    u_230_fu_845_p2 <= std_logic_vector(unsigned(u_11_fu_98) + unsigned(ap_const_lv64_1));
    u_fu_482_p2 <= std_logic_vector(unsigned(u_08_fu_90) + unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF));

    vla18_address0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state12, ap_CS_fsm_state5, vla18_addr_350_reg_1074, ap_CS_fsm_state6, vla18_addr_352_reg_1128, ap_CS_fsm_state7, vla18_addr_354_reg_1149, ap_CS_fsm_state8, vla18_addr_356_reg_1172, ap_CS_fsm_state10, ap_CS_fsm_state15, vla18_addr_348_reg_1229, ap_CS_fsm_state13, zext_ln1472_1_fu_558_p1, zext_ln1473_1_fu_672_p1, zext_ln1474_1_fu_686_p1, zext_ln1475_1_fu_726_p1, zext_ln1494_1_fu_889_p1, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            vla18_address0 <= vla18_addr_348_reg_1229;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            vla18_address0 <= zext_ln1494_1_fu_889_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            vla18_address0 <= vla18_addr_356_reg_1172;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            vla18_address0 <= vla18_addr_354_reg_1149;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            vla18_address0 <= vla18_addr_352_reg_1128;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            vla18_address0 <= vla18_addr_350_reg_1074;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            vla18_address0 <= zext_ln1475_1_fu_726_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            vla18_address0 <= zext_ln1474_1_fu_686_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            vla18_address0 <= zext_ln1473_1_fu_672_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            vla18_address0 <= zext_ln1472_1_fu_558_p1(13 - 1 downto 0);
        else 
            vla18_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    vla18_address1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state12, vla18_addr_349_reg_1068, ap_CS_fsm_state5, ap_CS_fsm_state6, vla18_addr_351_reg_1122, ap_CS_fsm_state7, vla18_addr_353_reg_1143, ap_CS_fsm_state8, vla18_addr_355_reg_1166, ap_CS_fsm_state10, vla18_addr_reg_1223, ap_CS_fsm_state15, ap_CS_fsm_state13, zext_ln1472_fu_547_p1, zext_ln1473_fu_663_p1, zext_ln1474_fu_677_p1, zext_ln1475_fu_717_p1, zext_ln1494_fu_878_p1, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            vla18_address1 <= vla18_addr_reg_1223;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            vla18_address1 <= zext_ln1494_fu_878_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            vla18_address1 <= vla18_addr_355_reg_1166;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            vla18_address1 <= vla18_addr_353_reg_1143;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            vla18_address1 <= vla18_addr_351_reg_1122;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            vla18_address1 <= vla18_addr_349_reg_1068;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            vla18_address1 <= zext_ln1475_fu_717_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            vla18_address1 <= zext_ln1474_fu_677_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            vla18_address1 <= zext_ln1473_fu_663_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            vla18_address1 <= zext_ln1472_fu_547_p1(13 - 1 downto 0);
        else 
            vla18_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    vla18_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state12, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state15, ap_CS_fsm_state13, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            vla18_ce0 <= ap_const_logic_1;
        else 
            vla18_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    vla18_ce1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state12, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state15, ap_CS_fsm_state13, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            vla18_ce1 <= ap_const_logic_1;
        else 
            vla18_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    vla18_d0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state12, ap_CS_fsm_state10, ap_CS_fsm_state13, ap_CS_fsm_state17, bitcast_ln12_fu_757_p1, bitcast_ln13_fu_777_p1, bitcast_ln64_fu_797_p1, bitcast_ln65_fu_817_p1, bitcast_ln1494_fu_912_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            vla18_d0 <= bitcast_ln1494_fu_912_p1(63 downto 32);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            vla18_d0 <= bitcast_ln65_fu_817_p1(63 downto 32);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            vla18_d0 <= bitcast_ln64_fu_797_p1(63 downto 32);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            vla18_d0 <= bitcast_ln13_fu_777_p1(63 downto 32);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            vla18_d0 <= bitcast_ln12_fu_757_p1(63 downto 32);
        else 
            vla18_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    vla18_d1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state12, ap_CS_fsm_state10, ap_CS_fsm_state13, trunc_ln12_fu_761_p1, trunc_ln13_fu_781_p1, trunc_ln64_fu_801_p1, trunc_ln65_fu_821_p1, ap_CS_fsm_state17, trunc_ln1494_3_fu_916_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            vla18_d1 <= trunc_ln1494_3_fu_916_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            vla18_d1 <= trunc_ln65_fu_821_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            vla18_d1 <= trunc_ln64_fu_801_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            vla18_d1 <= trunc_ln13_fu_781_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            vla18_d1 <= trunc_ln12_fu_761_p1;
        else 
            vla18_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    vla18_we0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state12, ap_CS_fsm_state10, ap_CS_fsm_state13, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            vla18_we0 <= ap_const_lv4_F;
        else 
            vla18_we0 <= ap_const_lv4_0;
        end if; 
    end process;


    vla18_we1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state12, ap_CS_fsm_state10, ap_CS_fsm_state13, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            vla18_we1 <= ap_const_lv4_F;
        else 
            vla18_we1 <= ap_const_lv4_0;
        end if; 
    end process;

    x_im_fu_737_p1 <= tmp_86_fu_731_p3;
    x_re_fu_697_p1 <= tmp_s_fu_691_p3;
    xor_ln147_fu_504_p2 <= (bitcast_ln147_fu_500_p1 xor ap_const_lv64_8000000000000000);
    y_im_fu_751_p1 <= tmp_88_fu_743_p3;
    y_re_fu_711_p1 <= tmp_87_fu_703_p3;
    zext_ln1449_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(logn),64));
    zext_ln1452_fu_340_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(hn_fu_330_p4),64));
    zext_ln1457_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(hm_fu_394_p4),64));
    zext_ln1466_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_458_p3),64));
    zext_ln1467_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1467_fu_471_p2),64));
    zext_ln1472_1_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1472_1_fu_552_p2),64));
    zext_ln1472_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln18_fu_537_p4),64));
    zext_ln1473_1_fu_672_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1473_2_fu_667_p2),64));
    zext_ln1473_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1473_2_reg_1079),64));
    zext_ln1474_1_fu_686_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1474_2_fu_681_p2),64));
    zext_ln1474_fu_677_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1474_1_reg_1085),64));
    zext_ln1475_1_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1475_2_fu_721_p2),64));
    zext_ln1475_fu_717_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln19_reg_1091),64));
    zext_ln1494_1_fu_889_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1494_1_fu_883_p2),64));
    zext_ln1494_fu_878_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1494_2_fu_868_p4),64));
end behav;
