-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity keygen is
generic (
    C_M_AXI_GMEM0_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM0_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM0_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM0_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_WUSER_WIDTH-1 downto 0);
    m_axi_gmem0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_RUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of keygen is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "keygen_keygen,hls_ip_2022_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=100.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=73.000000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=115,HLS_SYN_DSP=0,HLS_SYN_FF=86089,HLS_SYN_LUT=170029,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (116 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (116 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (116 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (116 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (116 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (116 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (116 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (116 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (116 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (116 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (116 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (116 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv32_6E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101110";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv32_6D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101101";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv26_0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv11_200 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_400 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000000000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv64_88 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000010001000";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv64_40C8008000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000011001000000000001000000000000000000000000000000000000000";
    constant ap_const_lv64_3FF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv64_40D06D9A5FD8ADAC : STD_LOGIC_VECTOR (63 downto 0) := "0100000011010000011011011001101001011111110110001010110110101100";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv64_1F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011111";
    constant ap_const_lv64_8000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_F1 : STD_LOGIC_VECTOR (7 downto 0) := "11110001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv26_3FFFFFF : STD_LOGIC_VECTOR (25 downto 0) := "11111111111111111111111111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv27_41B6 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000100000110110110";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal f_out : STD_LOGIC_VECTOR (63 downto 0);
    signal g_out : STD_LOGIC_VECTOR (63 downto 0);
    signal F_upper_out : STD_LOGIC_VECTOR (63 downto 0);
    signal G_upper_out : STD_LOGIC_VECTOR (63 downto 0);
    signal h_out : STD_LOGIC_VECTOR (63 downto 0);
    signal seed : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal gmem0_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal gmem0_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal gmem0_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal gmem0_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal ap_CS_fsm_state96 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state96 : signal is "none";
    signal ap_CS_fsm_state101 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state101 : signal is "none";
    signal ap_CS_fsm_state103 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state103 : signal is "none";
    signal ap_CS_fsm_state104 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state104 : signal is "none";
    signal ap_CS_fsm_state109 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state109 : signal is "none";
    signal ap_CS_fsm_state111 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state111 : signal is "none";
    signal ap_CS_fsm_state112 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state112 : signal is "none";
    signal ap_CS_fsm_state117 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state117 : signal is "none";
    signal reg_1615 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_poly_small_mkgauss_fu_1282_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal reg_1620 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_1625 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_1630 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_1635 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_1640 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_1645 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_1650 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_1655 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_1660 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_1665 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_1670 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_1675 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_1680 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_1685 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_1690 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_1695 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_1700 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_1705 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_1710 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_1715 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_1720 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_1725 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_1730 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_1735 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_1740 : STD_LOGIC_VECTOR (63 downto 0);
    signal rt1_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal rt1_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal rt2_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal rt2_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal grp_fu_1422_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal grp_fu_1429_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1436_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1443_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1393_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_1805 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal grp_fu_1397_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal rt3_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal seed_read_reg_3805 : STD_LOGIC_VECTOR (63 downto 0);
    signal h_out_read_reg_3811 : STD_LOGIC_VECTOR (63 downto 0);
    signal G_upper_out_read_reg_3816 : STD_LOGIC_VECTOR (63 downto 0);
    signal F_upper_out_read_reg_3822 : STD_LOGIC_VECTOR (63 downto 0);
    signal g_out_read_reg_3828 : STD_LOGIC_VECTOR (63 downto 0);
    signal f_out_read_reg_3834 : STD_LOGIC_VECTOR (63 downto 0);
    signal rng_st_57_0_load_reg_3843 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal rng_st_58_0_load_reg_3848 : STD_LOGIC_VECTOR (63 downto 0);
    signal rng_st_59_0_load_reg_3853 : STD_LOGIC_VECTOR (63 downto 0);
    signal rng_st_60_0_load_reg_3858 : STD_LOGIC_VECTOR (63 downto 0);
    signal rng_st_61_0_load_reg_3863 : STD_LOGIC_VECTOR (63 downto 0);
    signal rng_st_62_0_load_reg_3868 : STD_LOGIC_VECTOR (63 downto 0);
    signal rng_st_63_0_load_reg_3873 : STD_LOGIC_VECTOR (63 downto 0);
    signal rng_st_64_0_load_reg_3878 : STD_LOGIC_VECTOR (63 downto 0);
    signal rng_st_65_0_load_reg_3883 : STD_LOGIC_VECTOR (63 downto 0);
    signal rng_st_67_0_load_reg_3888 : STD_LOGIC_VECTOR (63 downto 0);
    signal rng_st_68_0_load_reg_3893 : STD_LOGIC_VECTOR (63 downto 0);
    signal rng_st_69_0_load_reg_3898 : STD_LOGIC_VECTOR (63 downto 0);
    signal rng_st_70_0_load_reg_3903 : STD_LOGIC_VECTOR (63 downto 0);
    signal rng_st_71_0_load_reg_3908 : STD_LOGIC_VECTOR (63 downto 0);
    signal rng_st_72_0_load_reg_3913 : STD_LOGIC_VECTOR (63 downto 0);
    signal rng_st_73_0_load_reg_3918 : STD_LOGIC_VECTOR (63 downto 0);
    signal rng_st_74_0_load_reg_3923 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_358_fu_1906_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_358_reg_3931 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln805_fu_2037_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln805_reg_3985 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond19826_fu_1900_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln805_fu_2110_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln805_reg_3996 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal gmem0_addr_reg_4001 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln805_fu_2104_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln809_2_reg_4007 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_2151_p8 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_4011 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_read_reg_4204 : STD_LOGIC_VECTOR (15 downto 0);
    signal u_215_fu_2503_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal u_215_reg_4290 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal icmp_ln5884_fu_2497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_205_fu_2509_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_205_reg_4305 : STD_LOGIC_VECTOR (0 downto 0);
    signal test_1_fu_2579_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal u_216_fu_2598_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal u_216_reg_4317 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal icmp_ln2760_fu_2592_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln2761_fu_2604_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_fu_3630_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ng_1_fu_2611_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal u_217_fu_2628_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal u_217_reg_4346 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal icmp_ln2760_1_fu_2622_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln5913_fu_2700_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln5913_reg_4356 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln2761_1_fu_2706_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_fu_3639_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ng_3_fu_2713_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln2817_fu_2719_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2817_reg_4376 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal u_218_fu_2730_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal u_218_reg_4384 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln2817_fu_2724_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln2819_fu_2736_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln2819_reg_4394 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal zext_ln2817_1_fu_2741_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2817_1_reg_4399 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal u_219_fu_2752_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal u_219_reg_4407 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln2817_1_fu_2746_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln2819_1_fu_2758_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln2819_1_reg_4417 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal zext_ln225_fu_2763_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln225_reg_4422 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal u_220_fu_2775_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal u_220_reg_4430 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln225_fu_2769_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1474_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal div_i_i_reg_4455 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal rt1_addr_3_reg_4463 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal icmp_ln546_fu_2798_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal u_221_fu_2804_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal u_221_reg_4469 : STD_LOGIC_VECTOR (10 downto 0);
    signal rt2_addr_3_reg_4477 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal icmp_ln546_3_fu_2830_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal u_222_fu_2836_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal u_222_reg_4483 : STD_LOGIC_VECTOR (10 downto 0);
    signal u_223_fu_2868_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal u_223_reg_4491 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal rt1_addr_4_reg_4496 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln562_fu_2862_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal u_224_fu_2885_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal u_224_reg_4505 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal rt2_addr_4_reg_4510 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln562_1_fu_2879_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal u_225_fu_2903_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal u_225_reg_4519 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal rt1_addr_5_reg_4524 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln580_fu_2897_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rt1_addr_6_reg_4534 : STD_LOGIC_VECTOR (9 downto 0);
    signal u_226_fu_2932_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal u_226_reg_4542 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal rt2_addr_5_reg_4547 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln580_2_fu_2926_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rt2_addr_6_reg_4557 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln5942_fu_2949_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln5942_reg_4562 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal u_227_fu_2960_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal u_227_reg_4570 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln5942_fu_2954_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln5946_fu_2966_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal xor_ln5946_reg_4580 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln5946_fu_2972_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln5946_reg_4585 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln5948_fu_2985_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln5948_reg_4605 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln5950_fu_2993_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln5950_reg_4615 : STD_LOGIC_VECTOR (63 downto 0);
    signal bnorm1_reg_4635 : STD_LOGIC_VECTOR (63 downto 0);
    signal bnorm2_reg_4640 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1408_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1413_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal and_ln188_fu_3034_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln188_reg_4665 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal grp_compute_public_1_fu_1352_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_4669 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal empty_359_fu_3063_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_359_reg_4686 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal icmp_ln5990_fu_3052_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal exitcond18411_fu_3209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_364_fu_3230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_364_reg_4699 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_addr_1_reg_4705 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_361_fu_3260_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_361_reg_4718 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_365_fu_3275_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_365_reg_4723 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_366_fu_3292_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_366_reg_4728 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal exitcond18310_fu_3306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_372_fu_3327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_372_reg_4741 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_addr_3_reg_4747 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_2_reg_4760 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_373_fu_3388_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_373_reg_4766 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_374_fu_3405_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_374_reg_4771 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal exitcond1829_fu_3419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal h_load_reg_4784 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal empty_380_fu_3441_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_380_reg_4796 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state102 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state102 : signal is "none";
    signal exitcond1818_fu_3452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_385_fu_3473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_385_reg_4809 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_addr_4_reg_4815 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_382_fu_3503_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_382_reg_4828 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_386_fu_3518_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_386_reg_4833 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_387_fu_3535_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_387_reg_4838 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state110 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state110 : signal is "none";
    signal exitcond7_fu_3549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_393_fu_3570_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_393_reg_4851 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_addr_5_reg_4857 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_394_fu_3607_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_394_reg_4863 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_395_fu_3624_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_395_reg_4868 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp2108_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal f_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal f_ce0 : STD_LOGIC;
    signal f_we0 : STD_LOGIC;
    signal f_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal g_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal g_ce0 : STD_LOGIC;
    signal g_we0 : STD_LOGIC;
    signal g_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal F_upper_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal F_upper_ce0 : STD_LOGIC;
    signal F_upper_we0 : STD_LOGIC;
    signal F_upper_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal G_upper_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal G_upper_ce0 : STD_LOGIC;
    signal G_upper_we0 : STD_LOGIC;
    signal G_upper_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal h_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal h_ce0 : STD_LOGIC;
    signal h_we0 : STD_LOGIC;
    signal h_ce1 : STD_LOGIC;
    signal h_we1 : STD_LOGIC;
    signal h_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal rt1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal rt1_ce0 : STD_LOGIC;
    signal rt1_we0 : STD_LOGIC;
    signal rt1_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal rt1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal rt1_ce1 : STD_LOGIC;
    signal rt1_we1 : STD_LOGIC;
    signal rt1_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal rt2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal rt2_ce0 : STD_LOGIC;
    signal rt2_we0 : STD_LOGIC;
    signal rt2_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal rt2_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal rt2_ce1 : STD_LOGIC;
    signal rt2_we1 : STD_LOGIC;
    signal rt2_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal rt3_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal rt3_ce0 : STD_LOGIC;
    signal rt3_we0 : STD_LOGIC;
    signal grp_poly_small_mkgauss_fu_1282_ap_start : STD_LOGIC;
    signal grp_poly_small_mkgauss_fu_1282_ap_idle : STD_LOGIC;
    signal grp_poly_small_mkgauss_fu_1282_ap_ready : STD_LOGIC;
    signal grp_poly_small_mkgauss_fu_1282_p_read : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_poly_small_mkgauss_fu_1282_p_read1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_poly_small_mkgauss_fu_1282_p_read2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_poly_small_mkgauss_fu_1282_p_read3 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_poly_small_mkgauss_fu_1282_p_read4 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_poly_small_mkgauss_fu_1282_p_read5 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_poly_small_mkgauss_fu_1282_p_read6 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_poly_small_mkgauss_fu_1282_p_read7 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_poly_small_mkgauss_fu_1282_p_read8 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_poly_small_mkgauss_fu_1282_p_read9 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_poly_small_mkgauss_fu_1282_p_read10 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_poly_small_mkgauss_fu_1282_p_read11 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_poly_small_mkgauss_fu_1282_p_read12 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_poly_small_mkgauss_fu_1282_p_read13 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_poly_small_mkgauss_fu_1282_p_read14 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_poly_small_mkgauss_fu_1282_p_read15 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_poly_small_mkgauss_fu_1282_p_read16 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_poly_small_mkgauss_fu_1282_p_read17 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_poly_small_mkgauss_fu_1282_p_read18 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_poly_small_mkgauss_fu_1282_p_read19 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_poly_small_mkgauss_fu_1282_p_read20 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_poly_small_mkgauss_fu_1282_p_read21 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_poly_small_mkgauss_fu_1282_p_read22 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_poly_small_mkgauss_fu_1282_p_read23 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_poly_small_mkgauss_fu_1282_p_read24 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_poly_small_mkgauss_fu_1282_p_read25 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_poly_small_mkgauss_fu_1282_f_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_small_mkgauss_fu_1282_f_ce0 : STD_LOGIC;
    signal grp_poly_small_mkgauss_fu_1282_f_we0 : STD_LOGIC;
    signal grp_poly_small_mkgauss_fu_1282_f_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_poly_small_mkgauss_fu_1282_ap_return_0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_poly_small_mkgauss_fu_1282_ap_return_1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_poly_small_mkgauss_fu_1282_ap_return_2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_poly_small_mkgauss_fu_1282_ap_return_3 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_poly_small_mkgauss_fu_1282_ap_return_4 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_poly_small_mkgauss_fu_1282_ap_return_5 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_poly_small_mkgauss_fu_1282_ap_return_6 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_poly_small_mkgauss_fu_1282_ap_return_7 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_poly_small_mkgauss_fu_1282_ap_return_8 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_poly_small_mkgauss_fu_1282_ap_return_9 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_poly_small_mkgauss_fu_1282_ap_return_10 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_poly_small_mkgauss_fu_1282_ap_return_11 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_poly_small_mkgauss_fu_1282_ap_return_12 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_poly_small_mkgauss_fu_1282_ap_return_13 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_poly_small_mkgauss_fu_1282_ap_return_14 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_poly_small_mkgauss_fu_1282_ap_return_15 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_poly_small_mkgauss_fu_1282_ap_return_16 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_poly_small_mkgauss_fu_1282_ap_return_17 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_poly_small_mkgauss_fu_1282_ap_return_18 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_poly_small_mkgauss_fu_1282_ap_return_19 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_poly_small_mkgauss_fu_1282_ap_return_20 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_poly_small_mkgauss_fu_1282_ap_return_21 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_poly_small_mkgauss_fu_1282_ap_return_22 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_poly_small_mkgauss_fu_1282_ap_return_23 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_poly_small_mkgauss_fu_1282_ap_return_24 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_poly_small_mkgauss_fu_1282_ap_return_25 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fpr_of_fu_1317_ap_start : STD_LOGIC;
    signal grp_fpr_of_fu_1317_ap_done : STD_LOGIC;
    signal grp_fpr_of_fu_1317_ap_idle : STD_LOGIC;
    signal grp_fpr_of_fu_1317_ap_ready : STD_LOGIC;
    signal grp_fpr_of_fu_1317_i : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fpr_of_fu_1317_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_FFT_fu_1324_ap_start : STD_LOGIC;
    signal grp_FFT_fu_1324_ap_done : STD_LOGIC;
    signal grp_FFT_fu_1324_ap_idle : STD_LOGIC;
    signal grp_FFT_fu_1324_ap_ready : STD_LOGIC;
    signal grp_FFT_fu_1324_f_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_FFT_fu_1324_f_ce0 : STD_LOGIC;
    signal grp_FFT_fu_1324_f_we0 : STD_LOGIC;
    signal grp_FFT_fu_1324_f_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_FFT_fu_1324_f_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_FFT_fu_1324_f_ce1 : STD_LOGIC;
    signal grp_FFT_fu_1324_f_we1 : STD_LOGIC;
    signal grp_FFT_fu_1324_f_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_FFT_fu_1331_ap_start : STD_LOGIC;
    signal grp_FFT_fu_1331_ap_done : STD_LOGIC;
    signal grp_FFT_fu_1331_ap_idle : STD_LOGIC;
    signal grp_FFT_fu_1331_ap_ready : STD_LOGIC;
    signal grp_FFT_fu_1331_f_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_FFT_fu_1331_f_ce0 : STD_LOGIC;
    signal grp_FFT_fu_1331_f_we0 : STD_LOGIC;
    signal grp_FFT_fu_1331_f_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_FFT_fu_1331_f_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_FFT_fu_1331_f_ce1 : STD_LOGIC;
    signal grp_FFT_fu_1331_f_we1 : STD_LOGIC;
    signal grp_FFT_fu_1331_f_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_iFFT_fu_1338_ap_start : STD_LOGIC;
    signal grp_iFFT_fu_1338_ap_done : STD_LOGIC;
    signal grp_iFFT_fu_1338_ap_idle : STD_LOGIC;
    signal grp_iFFT_fu_1338_ap_ready : STD_LOGIC;
    signal grp_iFFT_fu_1338_f_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_iFFT_fu_1338_f_ce0 : STD_LOGIC;
    signal grp_iFFT_fu_1338_f_we0 : STD_LOGIC;
    signal grp_iFFT_fu_1338_f_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_iFFT_fu_1338_f_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_iFFT_fu_1338_f_ce1 : STD_LOGIC;
    signal grp_iFFT_fu_1338_f_we1 : STD_LOGIC;
    signal grp_iFFT_fu_1338_f_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_iFFT_fu_1345_ap_start : STD_LOGIC;
    signal grp_iFFT_fu_1345_ap_done : STD_LOGIC;
    signal grp_iFFT_fu_1345_ap_idle : STD_LOGIC;
    signal grp_iFFT_fu_1345_ap_ready : STD_LOGIC;
    signal grp_iFFT_fu_1345_f_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_iFFT_fu_1345_f_ce0 : STD_LOGIC;
    signal grp_iFFT_fu_1345_f_we0 : STD_LOGIC;
    signal grp_iFFT_fu_1345_f_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_iFFT_fu_1345_f_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_iFFT_fu_1345_f_ce1 : STD_LOGIC;
    signal grp_iFFT_fu_1345_f_we1 : STD_LOGIC;
    signal grp_iFFT_fu_1345_f_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_compute_public_1_fu_1352_ap_start : STD_LOGIC;
    signal grp_compute_public_1_fu_1352_ap_done : STD_LOGIC;
    signal grp_compute_public_1_fu_1352_ap_idle : STD_LOGIC;
    signal grp_compute_public_1_fu_1352_ap_ready : STD_LOGIC;
    signal grp_compute_public_1_fu_1352_h_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_compute_public_1_fu_1352_h_ce0 : STD_LOGIC;
    signal grp_compute_public_1_fu_1352_h_we0 : STD_LOGIC;
    signal grp_compute_public_1_fu_1352_h_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_compute_public_1_fu_1352_h_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_compute_public_1_fu_1352_h_ce1 : STD_LOGIC;
    signal grp_compute_public_1_fu_1352_h_we1 : STD_LOGIC;
    signal grp_compute_public_1_fu_1352_h_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_compute_public_1_fu_1352_f_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_compute_public_1_fu_1352_f_ce0 : STD_LOGIC;
    signal grp_compute_public_1_fu_1352_g_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_compute_public_1_fu_1352_g_ce0 : STD_LOGIC;
    signal grp_compute_public_1_fu_1352_tmp2108_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_compute_public_1_fu_1352_tmp2108_ce0 : STD_LOGIC;
    signal grp_compute_public_1_fu_1352_tmp2108_we0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_compute_public_1_fu_1352_tmp2108_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_solve_NTRU_fu_1364_ap_start : STD_LOGIC;
    signal grp_solve_NTRU_fu_1364_ap_done : STD_LOGIC;
    signal grp_solve_NTRU_fu_1364_ap_idle : STD_LOGIC;
    signal grp_solve_NTRU_fu_1364_ap_ready : STD_LOGIC;
    signal grp_solve_NTRU_fu_1364_F_upper_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_solve_NTRU_fu_1364_F_upper_ce0 : STD_LOGIC;
    signal grp_solve_NTRU_fu_1364_F_upper_we0 : STD_LOGIC;
    signal grp_solve_NTRU_fu_1364_F_upper_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_solve_NTRU_fu_1364_G_upper_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_solve_NTRU_fu_1364_G_upper_ce0 : STD_LOGIC;
    signal grp_solve_NTRU_fu_1364_G_upper_we0 : STD_LOGIC;
    signal grp_solve_NTRU_fu_1364_G_upper_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_solve_NTRU_fu_1364_f_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_solve_NTRU_fu_1364_f_ce0 : STD_LOGIC;
    signal grp_solve_NTRU_fu_1364_g_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_solve_NTRU_fu_1364_g_ce0 : STD_LOGIC;
    signal grp_solve_NTRU_fu_1364_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_solve_NTRU_fu_1364_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem0_AWVALID : STD_LOGIC;
    signal gmem0_AWREADY : STD_LOGIC;
    signal gmem0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem0_WVALID : STD_LOGIC;
    signal gmem0_WREADY : STD_LOGIC;
    signal gmem0_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal gmem0_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem0_ARVALID : STD_LOGIC;
    signal gmem0_ARREADY : STD_LOGIC;
    signal gmem0_RVALID : STD_LOGIC;
    signal gmem0_RREADY : STD_LOGIC;
    signal gmem0_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal gmem0_RFIFONUM : STD_LOGIC_VECTOR (9 downto 0);
    signal gmem0_BVALID : STD_LOGIC;
    signal gmem0_BREADY : STD_LOGIC;
    signal test_reg_1030 : STD_LOGIC_VECTOR (31 downto 0);
    signal u_014_reg_1042 : STD_LOGIC_VECTOR (10 downto 0);
    signal ng_reg_1053 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_reg_1065 : STD_LOGIC_VECTOR (25 downto 0);
    signal u_reg_1077 : STD_LOGIC_VECTOR (10 downto 0);
    signal ng_2_reg_1088 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_2_reg_1100 : STD_LOGIC_VECTOR (25 downto 0);
    signal u_138_reg_1112 : STD_LOGIC_VECTOR (10 downto 0);
    signal u_140_reg_1123 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal u_142_reg_1134 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal u_144_reg_1145 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_block_state35_on_subcall_done : BOOLEAN;
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal u_146_reg_1156 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal u_148_reg_1167 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal u_150_reg_1178 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal u_152_reg_1189 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal u_154_reg_1200 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal u_156_reg_1211 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal bnorm4_1_reg_1222 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_block_state64_on_subcall_done : BOOLEAN;
    signal bnorm3_1_reg_1234 : STD_LOGIC_VECTOR (63 downto 0);
    signal bnorm2_1_reg_1246 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_bnorm1_1_phi_fu_1262_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal bnorm1_1_reg_1258 : STD_LOGIC_VECTOR (63 downto 0);
    signal u_116_reg_1270 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_poly_small_mkgauss_fu_1282_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_fpr_of_fu_1317_ap_start_reg : STD_LOGIC := '0';
    signal grp_FFT_fu_1324_ap_start_reg : STD_LOGIC := '0';
    signal grp_FFT_fu_1331_ap_start_reg : STD_LOGIC := '0';
    signal grp_iFFT_fu_1338_ap_start_reg : STD_LOGIC := '0';
    signal grp_iFFT_fu_1345_ap_start_reg : STD_LOGIC := '0';
    signal grp_compute_public_1_fu_1352_ap_start_reg : STD_LOGIC := '0';
    signal grp_solve_NTRU_fu_1364_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal zext_ln5884_fu_2491_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2760_fu_2587_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2760_1_fu_2617_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln228_fu_2787_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln546_fu_2793_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln546_1_fu_2825_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln562_fu_2857_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln562_1_fu_2874_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln580_fu_2891_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln583_fu_2915_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln580_1_fu_2920_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln583_4_fu_2944_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index12_cast12_fu_3204_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index9_cast15_fu_3301_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index6_cast_fu_3414_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index3_cast18_fu_3447_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index_cast21_fu_3544_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln809_fu_2131_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast4_cast_fu_3245_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast6_cast_fu_3342_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln6002_fu_3366_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast8_cast_fu_3488_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast10_cast_fu_3585_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_310 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal p_load_load_fu_1828_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal rng_st_0_fu_314 : STD_LOGIC_VECTOR (63 downto 0);
    signal rng_st_51_0_fu_318 : STD_LOGIC_VECTOR (63 downto 0);
    signal rng_st_52_0_fu_322 : STD_LOGIC_VECTOR (63 downto 0);
    signal rng_st_53_0_fu_326 : STD_LOGIC_VECTOR (63 downto 0);
    signal rng_st_54_0_fu_330 : STD_LOGIC_VECTOR (63 downto 0);
    signal rng_st_55_0_fu_334 : STD_LOGIC_VECTOR (63 downto 0);
    signal rng_st_56_0_fu_406 : STD_LOGIC_VECTOR (63 downto 0);
    signal rng_st_66_0_fu_410 : STD_LOGIC_VECTOR (63 downto 0);
    signal u_0_fu_450 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal rng_st_3_0_fu_454 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln809_1_fu_2348_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal rng_st_51_3_0_fu_458 : STD_LOGIC_VECTOR (63 downto 0);
    signal rng_st_52_3_0_fu_462 : STD_LOGIC_VECTOR (63 downto 0);
    signal rng_st_53_3_0_fu_466 : STD_LOGIC_VECTOR (63 downto 0);
    signal rng_st_54_3_0_fu_470 : STD_LOGIC_VECTOR (63 downto 0);
    signal rng_st_55_3_0_fu_474 : STD_LOGIC_VECTOR (63 downto 0);
    signal rng_st_1_fu_478 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_predicate_op850_call_state76 : BOOLEAN;
    signal ap_block_state76_on_subcall_done : BOOLEAN;
    signal rng_st_7_fu_482 : STD_LOGIC_VECTOR (63 downto 0);
    signal rng_st_54_fu_486 : STD_LOGIC_VECTOR (63 downto 0);
    signal rng_st_55_fu_490 : STD_LOGIC_VECTOR (63 downto 0);
    signal rng_st_56_fu_494 : STD_LOGIC_VECTOR (63 downto 0);
    signal rng_st_57_fu_498 : STD_LOGIC_VECTOR (63 downto 0);
    signal rng_st_58_fu_502 : STD_LOGIC_VECTOR (63 downto 0);
    signal rng_st_fu_2175_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal rng_st_59_fu_506 : STD_LOGIC_VECTOR (63 downto 0);
    signal rng_st_60_fu_510 : STD_LOGIC_VECTOR (63 downto 0);
    signal rng_st_61_fu_514 : STD_LOGIC_VECTOR (63 downto 0);
    signal rng_st_62_fu_518 : STD_LOGIC_VECTOR (63 downto 0);
    signal rng_st_63_fu_522 : STD_LOGIC_VECTOR (63 downto 0);
    signal rng_st_64_fu_526 : STD_LOGIC_VECTOR (63 downto 0);
    signal rng_st_65_fu_530 : STD_LOGIC_VECTOR (63 downto 0);
    signal rng_st_66_fu_534 : STD_LOGIC_VECTOR (63 downto 0);
    signal rng_st_67_fu_538 : STD_LOGIC_VECTOR (63 downto 0);
    signal rng_st_68_fu_542 : STD_LOGIC_VECTOR (63 downto 0);
    signal rng_st_77_fu_2181_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal rng_st_69_fu_546 : STD_LOGIC_VECTOR (63 downto 0);
    signal rng_st_70_fu_550 : STD_LOGIC_VECTOR (63 downto 0);
    signal rng_st_71_fu_554 : STD_LOGIC_VECTOR (63 downto 0);
    signal rng_st_72_fu_558 : STD_LOGIC_VECTOR (63 downto 0);
    signal rng_st_73_fu_562 : STD_LOGIC_VECTOR (63 downto 0);
    signal rng_st_74_fu_566 : STD_LOGIC_VECTOR (63 downto 0);
    signal rng_st_75_fu_570 : STD_LOGIC_VECTOR (63 downto 0);
    signal rng_st_76_fu_574 : STD_LOGIC_VECTOR (63 downto 0);
    signal rng_dptr_2_fu_578 : STD_LOGIC_VECTOR (63 downto 0);
    signal slove_NTRU_break_0_1_fu_582 : STD_LOGIC_VECTOR (31 downto 0);
    signal loop_index12_fu_586 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_360_fu_3215_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal loop_index9_fu_590 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_369_fu_3312_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal loop_index6_fu_594 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_378_fu_3425_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal loop_index3_fu_598 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_381_fu_3458_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal loop_index_fu_602 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_390_fu_3555_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal bitcast_ln147_1_fu_2820_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln147_3_fu_2852_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1393_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1393_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1397_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1397_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1422_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1422_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1429_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1429_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1436_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1436_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1443_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1443_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal zext_ln805_fu_2100_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln809_fu_2116_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln809_1_fu_2121_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_s_fu_2151_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln809_fu_2300_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln809_fu_2303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln_fu_2308_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln809_fu_2316_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln809_fu_2320_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln809_2_fu_2325_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln809_1_fu_2333_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln809_1_fu_2329_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln809_2_fu_2338_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln809_fu_2342_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_206_fu_2517_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_207_fu_2539_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln5890_fu_2527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln5890_1_fu_2533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln5891_1_fu_2555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln5891_fu_2549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln5891_1_fu_2567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln5891_fu_2561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln5891_2_fu_2573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln2765_fu_2608_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_208_fu_2634_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal normf_fu_2642_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_209_fu_2654_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal normg_fu_2662_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln5861_1_fu_2670_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal sext_ln5861_fu_2650_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal or_ln5911_fu_2680_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln5911_fu_2674_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_210_fu_2686_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln5913_fu_2694_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln2765_1_fu_2710_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln228_fu_2781_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal bitcast_ln147_fu_2810_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln147_fu_2814_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln147_2_fu_2842_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln147_3_fu_2846_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln583_fu_2909_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln583_1_fu_2938_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln5948_cast_fu_2977_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln5950_fu_2990_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal bitcast_ln188_fu_2998_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_92_fu_3002_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln188_fu_3012_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln188_1_fu_3022_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln188_fu_3016_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln188_fu_3028_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_93_fu_1479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_362_fu_3221_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_363_fu_3225_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast4_fu_3235_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_cast13_fu_3272_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_170_fu_3281_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal f_load_7_cast_fu_3268_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_cast14_fu_3288_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_370_fu_3318_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_371_fu_3322_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast6_fu_3332_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln_fu_3357_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_cast16_fu_3385_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_171_fu_3394_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal g_load_7_cast_fu_3381_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_cast17_fu_3401_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_383_fu_3464_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_384_fu_3468_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast8_fu_3478_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_cast19_fu_3515_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_172_fu_3524_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal F_upper_load_cast_fu_3511_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_cast20_fu_3531_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_391_fu_3561_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_392_fu_3565_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_fu_3575_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_cast22_fu_3604_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_173_fu_3613_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal G_upper_load_cast_fu_3600_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_cast23_fu_3620_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_3630_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_3630_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_fu_3639_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_3639_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (116 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal ap_ST_fsm_state67_blk : STD_LOGIC;
    signal ap_ST_fsm_state68_blk : STD_LOGIC;
    signal ap_ST_fsm_state69_blk : STD_LOGIC;
    signal ap_ST_fsm_state70_blk : STD_LOGIC;
    signal ap_ST_fsm_state71_blk : STD_LOGIC;
    signal ap_ST_fsm_state72_blk : STD_LOGIC;
    signal ap_ST_fsm_state73_blk : STD_LOGIC;
    signal ap_ST_fsm_state74_blk : STD_LOGIC;
    signal ap_ST_fsm_state75_blk : STD_LOGIC;
    signal ap_ST_fsm_state76_blk : STD_LOGIC;
    signal ap_ST_fsm_state77_blk : STD_LOGIC;
    signal ap_ST_fsm_state78_blk : STD_LOGIC;
    signal ap_ST_fsm_state79_blk : STD_LOGIC;
    signal ap_ST_fsm_state80_blk : STD_LOGIC;
    signal ap_ST_fsm_state81_blk : STD_LOGIC;
    signal ap_ST_fsm_state82_blk : STD_LOGIC;
    signal ap_ST_fsm_state83_blk : STD_LOGIC;
    signal ap_ST_fsm_state84_blk : STD_LOGIC;
    signal ap_ST_fsm_state85_blk : STD_LOGIC;
    signal ap_ST_fsm_state86_blk : STD_LOGIC;
    signal ap_ST_fsm_state87_blk : STD_LOGIC;
    signal ap_ST_fsm_state88_blk : STD_LOGIC;
    signal ap_ST_fsm_state89_blk : STD_LOGIC;
    signal ap_ST_fsm_state90_blk : STD_LOGIC;
    signal ap_ST_fsm_state91_blk : STD_LOGIC;
    signal ap_ST_fsm_state92_blk : STD_LOGIC;
    signal ap_ST_fsm_state93_blk : STD_LOGIC;
    signal ap_ST_fsm_state94_blk : STD_LOGIC;
    signal ap_ST_fsm_state95_blk : STD_LOGIC;
    signal ap_ST_fsm_state96_blk : STD_LOGIC;
    signal ap_ST_fsm_state97_blk : STD_LOGIC;
    signal ap_ST_fsm_state98_blk : STD_LOGIC;
    signal ap_ST_fsm_state99_blk : STD_LOGIC;
    signal ap_ST_fsm_state100_blk : STD_LOGIC;
    signal ap_ST_fsm_state101_blk : STD_LOGIC;
    signal ap_ST_fsm_state102_blk : STD_LOGIC;
    signal ap_ST_fsm_state103_blk : STD_LOGIC;
    signal ap_ST_fsm_state104_blk : STD_LOGIC;
    signal ap_ST_fsm_state105_blk : STD_LOGIC;
    signal ap_ST_fsm_state106_blk : STD_LOGIC;
    signal ap_ST_fsm_state107_blk : STD_LOGIC;
    signal ap_ST_fsm_state108_blk : STD_LOGIC;
    signal ap_ST_fsm_state109_blk : STD_LOGIC;
    signal ap_ST_fsm_state110_blk : STD_LOGIC;
    signal ap_ST_fsm_state111_blk : STD_LOGIC;
    signal ap_ST_fsm_state112_blk : STD_LOGIC;
    signal ap_ST_fsm_state113_blk : STD_LOGIC;
    signal ap_ST_fsm_state114_blk : STD_LOGIC;
    signal ap_ST_fsm_state115_blk : STD_LOGIC;
    signal ap_ST_fsm_state116_blk : STD_LOGIC;
    signal ap_ST_fsm_state117_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component keygen_poly_small_mkgauss IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (63 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (63 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (63 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (63 downto 0);
        p_read4 : IN STD_LOGIC_VECTOR (63 downto 0);
        p_read5 : IN STD_LOGIC_VECTOR (63 downto 0);
        p_read6 : IN STD_LOGIC_VECTOR (63 downto 0);
        p_read7 : IN STD_LOGIC_VECTOR (63 downto 0);
        p_read8 : IN STD_LOGIC_VECTOR (63 downto 0);
        p_read9 : IN STD_LOGIC_VECTOR (63 downto 0);
        p_read10 : IN STD_LOGIC_VECTOR (63 downto 0);
        p_read11 : IN STD_LOGIC_VECTOR (63 downto 0);
        p_read12 : IN STD_LOGIC_VECTOR (63 downto 0);
        p_read13 : IN STD_LOGIC_VECTOR (63 downto 0);
        p_read14 : IN STD_LOGIC_VECTOR (63 downto 0);
        p_read15 : IN STD_LOGIC_VECTOR (63 downto 0);
        p_read16 : IN STD_LOGIC_VECTOR (63 downto 0);
        p_read17 : IN STD_LOGIC_VECTOR (63 downto 0);
        p_read18 : IN STD_LOGIC_VECTOR (63 downto 0);
        p_read19 : IN STD_LOGIC_VECTOR (63 downto 0);
        p_read20 : IN STD_LOGIC_VECTOR (63 downto 0);
        p_read21 : IN STD_LOGIC_VECTOR (63 downto 0);
        p_read22 : IN STD_LOGIC_VECTOR (63 downto 0);
        p_read23 : IN STD_LOGIC_VECTOR (63 downto 0);
        p_read24 : IN STD_LOGIC_VECTOR (63 downto 0);
        p_read25 : IN STD_LOGIC_VECTOR (63 downto 0);
        f_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        f_ce0 : OUT STD_LOGIC;
        f_we0 : OUT STD_LOGIC;
        f_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_16 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_17 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_18 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_19 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_20 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_21 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_22 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_23 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_24 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_25 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component keygen_fpr_of IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        i : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component keygen_FFT IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        f_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        f_ce0 : OUT STD_LOGIC;
        f_we0 : OUT STD_LOGIC;
        f_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        f_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        f_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        f_ce1 : OUT STD_LOGIC;
        f_we1 : OUT STD_LOGIC;
        f_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        f_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component keygen_iFFT IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        f_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        f_ce0 : OUT STD_LOGIC;
        f_we0 : OUT STD_LOGIC;
        f_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        f_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        f_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        f_ce1 : OUT STD_LOGIC;
        f_we1 : OUT STD_LOGIC;
        f_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        f_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component keygen_compute_public_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        h_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        h_ce0 : OUT STD_LOGIC;
        h_we0 : OUT STD_LOGIC;
        h_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        h_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        h_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        h_ce1 : OUT STD_LOGIC;
        h_we1 : OUT STD_LOGIC;
        h_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        h_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        f_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        f_ce0 : OUT STD_LOGIC;
        f_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        g_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        g_ce0 : OUT STD_LOGIC;
        g_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        tmp2108_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        tmp2108_ce0 : OUT STD_LOGIC;
        tmp2108_we0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        tmp2108_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        tmp2108_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component keygen_solve_NTRU IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        F_upper_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        F_upper_ce0 : OUT STD_LOGIC;
        F_upper_we0 : OUT STD_LOGIC;
        F_upper_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        F_upper_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        G_upper_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        G_upper_ce0 : OUT STD_LOGIC;
        G_upper_we0 : OUT STD_LOGIC;
        G_upper_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        G_upper_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        f_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        f_ce0 : OUT STD_LOGIC;
        f_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        g_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        g_ce0 : OUT STD_LOGIC;
        g_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component keygen_dadd_64ns_64ns_64_2_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component keygen_dmul_64ns_64ns_64_2_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component keygen_ddiv_64ns_64ns_64_6_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component keygen_dcmp_64ns_64ns_1_1_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component keygen_mux_63_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (63 downto 0);
        din3 : IN STD_LOGIC_VECTOR (63 downto 0);
        din4 : IN STD_LOGIC_VECTOR (63 downto 0);
        din5 : IN STD_LOGIC_VECTOR (63 downto 0);
        din6 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component keygen_mac_muladd_8s_8s_26s_26_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (25 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component keygen_tmp2108_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC_VECTOR (1 downto 0);
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component keygen_f_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component keygen_h_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component keygen_rt1_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component keygen_rt3_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component keygen_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        f_out : OUT STD_LOGIC_VECTOR (63 downto 0);
        g_out : OUT STD_LOGIC_VECTOR (63 downto 0);
        F_upper_out : OUT STD_LOGIC_VECTOR (63 downto 0);
        G_upper_out : OUT STD_LOGIC_VECTOR (63 downto 0);
        h_out : OUT STD_LOGIC_VECTOR (63 downto 0);
        seed : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component keygen_gmem0_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (9 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;



begin
    tmp2108_U : component keygen_tmp2108_RAM_AUTO_1R1W
    generic map (
        DataWidth => 16,
        AddressRange => 2048,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_compute_public_1_fu_1352_tmp2108_address0,
        ce0 => grp_compute_public_1_fu_1352_tmp2108_ce0,
        we0 => grp_compute_public_1_fu_1352_tmp2108_we0,
        d0 => grp_compute_public_1_fu_1352_tmp2108_d0,
        q0 => tmp2108_q0);

    f_U : component keygen_f_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => f_address0,
        ce0 => f_ce0,
        we0 => f_we0,
        d0 => grp_poly_small_mkgauss_fu_1282_f_d0,
        q0 => f_q0);

    g_U : component keygen_f_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => g_address0,
        ce0 => g_ce0,
        we0 => g_we0,
        d0 => grp_poly_small_mkgauss_fu_1282_f_d0,
        q0 => g_q0);

    F_upper_U : component keygen_f_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => F_upper_address0,
        ce0 => F_upper_ce0,
        we0 => F_upper_we0,
        d0 => grp_solve_NTRU_fu_1364_F_upper_d0,
        q0 => F_upper_q0);

    G_upper_U : component keygen_f_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => G_upper_address0,
        ce0 => G_upper_ce0,
        we0 => G_upper_we0,
        d0 => grp_solve_NTRU_fu_1364_G_upper_d0,
        q0 => G_upper_q0);

    h_U : component keygen_h_RAM_AUTO_1R1W
    generic map (
        DataWidth => 16,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => h_address0,
        ce0 => h_ce0,
        we0 => h_we0,
        d0 => grp_compute_public_1_fu_1352_h_d0,
        q0 => h_q0,
        address1 => grp_compute_public_1_fu_1352_h_address1,
        ce1 => h_ce1,
        we1 => h_we1,
        d1 => grp_compute_public_1_fu_1352_h_d1,
        q1 => h_q1);

    rt1_U : component keygen_rt1_RAM_AUTO_1R1W
    generic map (
        DataWidth => 64,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => rt1_address0,
        ce0 => rt1_ce0,
        we0 => rt1_we0,
        d0 => rt1_d0,
        q0 => rt1_q0,
        address1 => rt1_address1,
        ce1 => rt1_ce1,
        we1 => rt1_we1,
        d1 => rt1_d1,
        q1 => rt1_q1);

    rt2_U : component keygen_rt1_RAM_AUTO_1R1W
    generic map (
        DataWidth => 64,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => rt2_address0,
        ce0 => rt2_ce0,
        we0 => rt2_we0,
        d0 => rt2_d0,
        q0 => rt2_q0,
        address1 => rt2_address1,
        ce1 => rt2_ce1,
        we1 => rt2_we1,
        d1 => rt2_d1,
        q1 => rt2_q1);

    rt3_U : component keygen_rt3_RAM_AUTO_1R1W
    generic map (
        DataWidth => 64,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => rt3_address0,
        ce0 => rt3_ce0,
        we0 => rt3_we0,
        d0 => div_i_i_reg_4455,
        q0 => rt3_q0);

    grp_poly_small_mkgauss_fu_1282 : component keygen_poly_small_mkgauss
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_poly_small_mkgauss_fu_1282_ap_start,
        ap_done => grp_poly_small_mkgauss_fu_1282_ap_done,
        ap_idle => grp_poly_small_mkgauss_fu_1282_ap_idle,
        ap_ready => grp_poly_small_mkgauss_fu_1282_ap_ready,
        p_read => grp_poly_small_mkgauss_fu_1282_p_read,
        p_read1 => grp_poly_small_mkgauss_fu_1282_p_read1,
        p_read2 => grp_poly_small_mkgauss_fu_1282_p_read2,
        p_read3 => grp_poly_small_mkgauss_fu_1282_p_read3,
        p_read4 => grp_poly_small_mkgauss_fu_1282_p_read4,
        p_read5 => grp_poly_small_mkgauss_fu_1282_p_read5,
        p_read6 => grp_poly_small_mkgauss_fu_1282_p_read6,
        p_read7 => grp_poly_small_mkgauss_fu_1282_p_read7,
        p_read8 => grp_poly_small_mkgauss_fu_1282_p_read8,
        p_read9 => grp_poly_small_mkgauss_fu_1282_p_read9,
        p_read10 => grp_poly_small_mkgauss_fu_1282_p_read10,
        p_read11 => grp_poly_small_mkgauss_fu_1282_p_read11,
        p_read12 => grp_poly_small_mkgauss_fu_1282_p_read12,
        p_read13 => grp_poly_small_mkgauss_fu_1282_p_read13,
        p_read14 => grp_poly_small_mkgauss_fu_1282_p_read14,
        p_read15 => grp_poly_small_mkgauss_fu_1282_p_read15,
        p_read16 => grp_poly_small_mkgauss_fu_1282_p_read16,
        p_read17 => grp_poly_small_mkgauss_fu_1282_p_read17,
        p_read18 => grp_poly_small_mkgauss_fu_1282_p_read18,
        p_read19 => grp_poly_small_mkgauss_fu_1282_p_read19,
        p_read20 => grp_poly_small_mkgauss_fu_1282_p_read20,
        p_read21 => grp_poly_small_mkgauss_fu_1282_p_read21,
        p_read22 => grp_poly_small_mkgauss_fu_1282_p_read22,
        p_read23 => grp_poly_small_mkgauss_fu_1282_p_read23,
        p_read24 => grp_poly_small_mkgauss_fu_1282_p_read24,
        p_read25 => grp_poly_small_mkgauss_fu_1282_p_read25,
        f_address0 => grp_poly_small_mkgauss_fu_1282_f_address0,
        f_ce0 => grp_poly_small_mkgauss_fu_1282_f_ce0,
        f_we0 => grp_poly_small_mkgauss_fu_1282_f_we0,
        f_d0 => grp_poly_small_mkgauss_fu_1282_f_d0,
        ap_return_0 => grp_poly_small_mkgauss_fu_1282_ap_return_0,
        ap_return_1 => grp_poly_small_mkgauss_fu_1282_ap_return_1,
        ap_return_2 => grp_poly_small_mkgauss_fu_1282_ap_return_2,
        ap_return_3 => grp_poly_small_mkgauss_fu_1282_ap_return_3,
        ap_return_4 => grp_poly_small_mkgauss_fu_1282_ap_return_4,
        ap_return_5 => grp_poly_small_mkgauss_fu_1282_ap_return_5,
        ap_return_6 => grp_poly_small_mkgauss_fu_1282_ap_return_6,
        ap_return_7 => grp_poly_small_mkgauss_fu_1282_ap_return_7,
        ap_return_8 => grp_poly_small_mkgauss_fu_1282_ap_return_8,
        ap_return_9 => grp_poly_small_mkgauss_fu_1282_ap_return_9,
        ap_return_10 => grp_poly_small_mkgauss_fu_1282_ap_return_10,
        ap_return_11 => grp_poly_small_mkgauss_fu_1282_ap_return_11,
        ap_return_12 => grp_poly_small_mkgauss_fu_1282_ap_return_12,
        ap_return_13 => grp_poly_small_mkgauss_fu_1282_ap_return_13,
        ap_return_14 => grp_poly_small_mkgauss_fu_1282_ap_return_14,
        ap_return_15 => grp_poly_small_mkgauss_fu_1282_ap_return_15,
        ap_return_16 => grp_poly_small_mkgauss_fu_1282_ap_return_16,
        ap_return_17 => grp_poly_small_mkgauss_fu_1282_ap_return_17,
        ap_return_18 => grp_poly_small_mkgauss_fu_1282_ap_return_18,
        ap_return_19 => grp_poly_small_mkgauss_fu_1282_ap_return_19,
        ap_return_20 => grp_poly_small_mkgauss_fu_1282_ap_return_20,
        ap_return_21 => grp_poly_small_mkgauss_fu_1282_ap_return_21,
        ap_return_22 => grp_poly_small_mkgauss_fu_1282_ap_return_22,
        ap_return_23 => grp_poly_small_mkgauss_fu_1282_ap_return_23,
        ap_return_24 => grp_poly_small_mkgauss_fu_1282_ap_return_24,
        ap_return_25 => grp_poly_small_mkgauss_fu_1282_ap_return_25);

    grp_fpr_of_fu_1317 : component keygen_fpr_of
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_fpr_of_fu_1317_ap_start,
        ap_done => grp_fpr_of_fu_1317_ap_done,
        ap_idle => grp_fpr_of_fu_1317_ap_idle,
        ap_ready => grp_fpr_of_fu_1317_ap_ready,
        i => grp_fpr_of_fu_1317_i,
        ap_return => grp_fpr_of_fu_1317_ap_return);

    grp_FFT_fu_1324 : component keygen_FFT
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_FFT_fu_1324_ap_start,
        ap_done => grp_FFT_fu_1324_ap_done,
        ap_idle => grp_FFT_fu_1324_ap_idle,
        ap_ready => grp_FFT_fu_1324_ap_ready,
        f_address0 => grp_FFT_fu_1324_f_address0,
        f_ce0 => grp_FFT_fu_1324_f_ce0,
        f_we0 => grp_FFT_fu_1324_f_we0,
        f_d0 => grp_FFT_fu_1324_f_d0,
        f_q0 => rt1_q0,
        f_address1 => grp_FFT_fu_1324_f_address1,
        f_ce1 => grp_FFT_fu_1324_f_ce1,
        f_we1 => grp_FFT_fu_1324_f_we1,
        f_d1 => grp_FFT_fu_1324_f_d1,
        f_q1 => rt1_q1);

    grp_FFT_fu_1331 : component keygen_FFT
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_FFT_fu_1331_ap_start,
        ap_done => grp_FFT_fu_1331_ap_done,
        ap_idle => grp_FFT_fu_1331_ap_idle,
        ap_ready => grp_FFT_fu_1331_ap_ready,
        f_address0 => grp_FFT_fu_1331_f_address0,
        f_ce0 => grp_FFT_fu_1331_f_ce0,
        f_we0 => grp_FFT_fu_1331_f_we0,
        f_d0 => grp_FFT_fu_1331_f_d0,
        f_q0 => rt2_q0,
        f_address1 => grp_FFT_fu_1331_f_address1,
        f_ce1 => grp_FFT_fu_1331_f_ce1,
        f_we1 => grp_FFT_fu_1331_f_we1,
        f_d1 => grp_FFT_fu_1331_f_d1,
        f_q1 => rt2_q1);

    grp_iFFT_fu_1338 : component keygen_iFFT
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_iFFT_fu_1338_ap_start,
        ap_done => grp_iFFT_fu_1338_ap_done,
        ap_idle => grp_iFFT_fu_1338_ap_idle,
        ap_ready => grp_iFFT_fu_1338_ap_ready,
        f_address0 => grp_iFFT_fu_1338_f_address0,
        f_ce0 => grp_iFFT_fu_1338_f_ce0,
        f_we0 => grp_iFFT_fu_1338_f_we0,
        f_d0 => grp_iFFT_fu_1338_f_d0,
        f_q0 => rt1_q0,
        f_address1 => grp_iFFT_fu_1338_f_address1,
        f_ce1 => grp_iFFT_fu_1338_f_ce1,
        f_we1 => grp_iFFT_fu_1338_f_we1,
        f_d1 => grp_iFFT_fu_1338_f_d1,
        f_q1 => rt1_q1);

    grp_iFFT_fu_1345 : component keygen_iFFT
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_iFFT_fu_1345_ap_start,
        ap_done => grp_iFFT_fu_1345_ap_done,
        ap_idle => grp_iFFT_fu_1345_ap_idle,
        ap_ready => grp_iFFT_fu_1345_ap_ready,
        f_address0 => grp_iFFT_fu_1345_f_address0,
        f_ce0 => grp_iFFT_fu_1345_f_ce0,
        f_we0 => grp_iFFT_fu_1345_f_we0,
        f_d0 => grp_iFFT_fu_1345_f_d0,
        f_q0 => rt2_q0,
        f_address1 => grp_iFFT_fu_1345_f_address1,
        f_ce1 => grp_iFFT_fu_1345_f_ce1,
        f_we1 => grp_iFFT_fu_1345_f_we1,
        f_d1 => grp_iFFT_fu_1345_f_d1,
        f_q1 => rt2_q1);

    grp_compute_public_1_fu_1352 : component keygen_compute_public_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_compute_public_1_fu_1352_ap_start,
        ap_done => grp_compute_public_1_fu_1352_ap_done,
        ap_idle => grp_compute_public_1_fu_1352_ap_idle,
        ap_ready => grp_compute_public_1_fu_1352_ap_ready,
        h_address0 => grp_compute_public_1_fu_1352_h_address0,
        h_ce0 => grp_compute_public_1_fu_1352_h_ce0,
        h_we0 => grp_compute_public_1_fu_1352_h_we0,
        h_d0 => grp_compute_public_1_fu_1352_h_d0,
        h_q0 => h_q0,
        h_address1 => grp_compute_public_1_fu_1352_h_address1,
        h_ce1 => grp_compute_public_1_fu_1352_h_ce1,
        h_we1 => grp_compute_public_1_fu_1352_h_we1,
        h_d1 => grp_compute_public_1_fu_1352_h_d1,
        h_q1 => h_q1,
        f_address0 => grp_compute_public_1_fu_1352_f_address0,
        f_ce0 => grp_compute_public_1_fu_1352_f_ce0,
        f_q0 => f_q0,
        g_address0 => grp_compute_public_1_fu_1352_g_address0,
        g_ce0 => grp_compute_public_1_fu_1352_g_ce0,
        g_q0 => g_q0,
        tmp2108_address0 => grp_compute_public_1_fu_1352_tmp2108_address0,
        tmp2108_ce0 => grp_compute_public_1_fu_1352_tmp2108_ce0,
        tmp2108_we0 => grp_compute_public_1_fu_1352_tmp2108_we0,
        tmp2108_d0 => grp_compute_public_1_fu_1352_tmp2108_d0,
        tmp2108_q0 => tmp2108_q0,
        ap_return => grp_compute_public_1_fu_1352_ap_return);

    grp_solve_NTRU_fu_1364 : component keygen_solve_NTRU
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_solve_NTRU_fu_1364_ap_start,
        ap_done => grp_solve_NTRU_fu_1364_ap_done,
        ap_idle => grp_solve_NTRU_fu_1364_ap_idle,
        ap_ready => grp_solve_NTRU_fu_1364_ap_ready,
        F_upper_address0 => grp_solve_NTRU_fu_1364_F_upper_address0,
        F_upper_ce0 => grp_solve_NTRU_fu_1364_F_upper_ce0,
        F_upper_we0 => grp_solve_NTRU_fu_1364_F_upper_we0,
        F_upper_d0 => grp_solve_NTRU_fu_1364_F_upper_d0,
        F_upper_q0 => F_upper_q0,
        G_upper_address0 => grp_solve_NTRU_fu_1364_G_upper_address0,
        G_upper_ce0 => grp_solve_NTRU_fu_1364_G_upper_ce0,
        G_upper_we0 => grp_solve_NTRU_fu_1364_G_upper_we0,
        G_upper_d0 => grp_solve_NTRU_fu_1364_G_upper_d0,
        G_upper_q0 => G_upper_q0,
        f_address0 => grp_solve_NTRU_fu_1364_f_address0,
        f_ce0 => grp_solve_NTRU_fu_1364_f_ce0,
        f_q0 => f_q0,
        g_address0 => grp_solve_NTRU_fu_1364_g_address0,
        g_ce0 => grp_solve_NTRU_fu_1364_g_ce0,
        g_q0 => g_q0,
        p_read => slove_NTRU_break_0_1_fu_582,
        ap_return_0 => grp_solve_NTRU_fu_1364_ap_return_0,
        ap_return_1 => grp_solve_NTRU_fu_1364_ap_return_1);

    control_s_axi_U : component keygen_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        f_out => f_out,
        g_out => g_out,
        F_upper_out => F_upper_out,
        G_upper_out => G_upper_out,
        h_out => h_out,
        seed => seed,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    gmem0_m_axi_U : component keygen_gmem0_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        USER_RFIFONUM_WIDTH => 10,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM0_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM0_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM0_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM0_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM0_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM0_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM0_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM0_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM0_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM0_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM0_CACHE_VALUE,
        USER_DW => 16,
        USER_AW => 64)
    port map (
        AWVALID => m_axi_gmem0_AWVALID,
        AWREADY => m_axi_gmem0_AWREADY,
        AWADDR => m_axi_gmem0_AWADDR,
        AWID => m_axi_gmem0_AWID,
        AWLEN => m_axi_gmem0_AWLEN,
        AWSIZE => m_axi_gmem0_AWSIZE,
        AWBURST => m_axi_gmem0_AWBURST,
        AWLOCK => m_axi_gmem0_AWLOCK,
        AWCACHE => m_axi_gmem0_AWCACHE,
        AWPROT => m_axi_gmem0_AWPROT,
        AWQOS => m_axi_gmem0_AWQOS,
        AWREGION => m_axi_gmem0_AWREGION,
        AWUSER => m_axi_gmem0_AWUSER,
        WVALID => m_axi_gmem0_WVALID,
        WREADY => m_axi_gmem0_WREADY,
        WDATA => m_axi_gmem0_WDATA,
        WSTRB => m_axi_gmem0_WSTRB,
        WLAST => m_axi_gmem0_WLAST,
        WID => m_axi_gmem0_WID,
        WUSER => m_axi_gmem0_WUSER,
        ARVALID => m_axi_gmem0_ARVALID,
        ARREADY => m_axi_gmem0_ARREADY,
        ARADDR => m_axi_gmem0_ARADDR,
        ARID => m_axi_gmem0_ARID,
        ARLEN => m_axi_gmem0_ARLEN,
        ARSIZE => m_axi_gmem0_ARSIZE,
        ARBURST => m_axi_gmem0_ARBURST,
        ARLOCK => m_axi_gmem0_ARLOCK,
        ARCACHE => m_axi_gmem0_ARCACHE,
        ARPROT => m_axi_gmem0_ARPROT,
        ARQOS => m_axi_gmem0_ARQOS,
        ARREGION => m_axi_gmem0_ARREGION,
        ARUSER => m_axi_gmem0_ARUSER,
        RVALID => m_axi_gmem0_RVALID,
        RREADY => m_axi_gmem0_RREADY,
        RDATA => m_axi_gmem0_RDATA,
        RLAST => m_axi_gmem0_RLAST,
        RID => m_axi_gmem0_RID,
        RUSER => m_axi_gmem0_RUSER,
        RRESP => m_axi_gmem0_RRESP,
        BVALID => m_axi_gmem0_BVALID,
        BREADY => m_axi_gmem0_BREADY,
        BRESP => m_axi_gmem0_BRESP,
        BID => m_axi_gmem0_BID,
        BUSER => m_axi_gmem0_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem0_ARVALID,
        I_ARREADY => gmem0_ARREADY,
        I_ARADDR => gmem0_addr_reg_4001,
        I_ARLEN => ap_const_lv32_1,
        I_RVALID => gmem0_RVALID,
        I_RREADY => gmem0_RREADY,
        I_RDATA => gmem0_RDATA,
        I_RFIFONUM => gmem0_RFIFONUM,
        I_AWVALID => gmem0_AWVALID,
        I_AWREADY => gmem0_AWREADY,
        I_AWADDR => gmem0_AWADDR,
        I_AWLEN => gmem0_AWLEN,
        I_WVALID => gmem0_WVALID,
        I_WREADY => gmem0_WREADY,
        I_WDATA => gmem0_WDATA,
        I_WSTRB => gmem0_WSTRB,
        I_BVALID => gmem0_BVALID,
        I_BREADY => gmem0_BREADY);

    dadd_64ns_64ns_64_2_full_dsp_1_U471 : component keygen_dadd_64ns_64ns_64_2_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1393_p0,
        din1 => grp_fu_1393_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1393_p2);

    dadd_64ns_64ns_64_2_full_dsp_1_U472 : component keygen_dadd_64ns_64ns_64_2_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1397_p0,
        din1 => grp_fu_1397_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1397_p2);

    dadd_64ns_64ns_64_2_full_dsp_1_U473 : component keygen_dadd_64ns_64ns_64_2_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => bnorm3_1_reg_1234,
        din1 => grp_fu_1436_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1408_p2);

    dadd_64ns_64ns_64_2_full_dsp_1_U474 : component keygen_dadd_64ns_64ns_64_2_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => bnorm4_1_reg_1222,
        din1 => grp_fu_1443_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1413_p2);

    dmul_64ns_64ns_64_2_max_dsp_1_U475 : component keygen_dmul_64ns_64ns_64_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1422_p0,
        din1 => grp_fu_1422_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1422_p2);

    dmul_64ns_64ns_64_2_max_dsp_1_U476 : component keygen_dmul_64ns_64ns_64_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1429_p0,
        din1 => grp_fu_1429_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1429_p2);

    dmul_64ns_64ns_64_2_max_dsp_1_U477 : component keygen_dmul_64ns_64ns_64_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1436_p0,
        din1 => grp_fu_1436_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1436_p2);

    dmul_64ns_64ns_64_2_max_dsp_1_U478 : component keygen_dmul_64ns_64ns_64_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1443_p0,
        din1 => grp_fu_1443_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1443_p2);

    ddiv_64ns_64ns_64_6_no_dsp_1_U479 : component keygen_ddiv_64ns_64ns_64_6_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv64_3FF0000000000000,
        din1 => reg_1805,
        ce => ap_const_logic_1,
        dout => grp_fu_1474_p2);

    dcmp_64ns_64ns_1_1_no_dsp_1_U480 : component keygen_dcmp_64ns_64ns_1_1_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_1393_p2,
        din1 => ap_const_lv64_40D06D9A5FD8ADAC,
        opcode => ap_const_lv5_4,
        dout => tmp_93_fu_1479_p2);

    mux_63_64_1_1_U481 : component keygen_mux_63_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 3,
        dout_WIDTH => 64)
    port map (
        din0 => rng_st_3_0_fu_454,
        din1 => rng_st_51_3_0_fu_458,
        din2 => rng_st_52_3_0_fu_462,
        din3 => rng_st_53_3_0_fu_466,
        din4 => rng_st_54_3_0_fu_470,
        din5 => rng_st_55_3_0_fu_474,
        din6 => tmp_s_fu_2151_p7,
        dout => tmp_s_fu_2151_p8);

    mac_muladd_8s_8s_26s_26_4_1_U482 : component keygen_mac_muladd_8s_8s_26s_26_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 26,
        dout_WIDTH => 26)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_3630_p0,
        din1 => grp_fu_3630_p1,
        din2 => s_reg_1065,
        ce => ap_const_logic_1,
        dout => grp_fu_3630_p3);

    mac_muladd_8s_8s_26s_26_4_1_U483 : component keygen_mac_muladd_8s_8s_26s_26_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 26,
        dout_WIDTH => 26)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_3639_p0,
        din1 => grp_fu_3639_p1,
        din2 => s_2_reg_1100,
        ce => ap_const_logic_1,
        dout => grp_fu_3639_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_FFT_fu_1324_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_FFT_fu_1324_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln2817_1_fu_2746_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
                    grp_FFT_fu_1324_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_FFT_fu_1324_ap_ready = ap_const_logic_1)) then 
                    grp_FFT_fu_1324_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_FFT_fu_1331_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_FFT_fu_1331_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln2817_1_fu_2746_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
                    grp_FFT_fu_1331_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_FFT_fu_1331_ap_ready = ap_const_logic_1)) then 
                    grp_FFT_fu_1331_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_compute_public_1_fu_1352_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_compute_public_1_fu_1352_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = and_ln188_fu_3034_p2) and (ap_const_logic_1 = ap_CS_fsm_state73))) then 
                    grp_compute_public_1_fu_1352_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_compute_public_1_fu_1352_ap_ready = ap_const_logic_1)) then 
                    grp_compute_public_1_fu_1352_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_fpr_of_fu_1317_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_fpr_of_fu_1317_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
                    grp_fpr_of_fu_1317_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_fpr_of_fu_1317_ap_ready = ap_const_logic_1)) then 
                    grp_fpr_of_fu_1317_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_iFFT_fu_1338_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_iFFT_fu_1338_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln580_2_fu_2926_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state61))) then 
                    grp_iFFT_fu_1338_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_iFFT_fu_1338_ap_ready = ap_const_logic_1)) then 
                    grp_iFFT_fu_1338_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_iFFT_fu_1345_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_iFFT_fu_1345_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln580_2_fu_2926_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state61))) then 
                    grp_iFFT_fu_1345_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_iFFT_fu_1345_ap_ready = ap_const_logic_1)) then 
                    grp_iFFT_fu_1345_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_poly_small_mkgauss_fu_1282_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_poly_small_mkgauss_fu_1282_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state14) or ((grp_poly_small_mkgauss_fu_1282_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then 
                    grp_poly_small_mkgauss_fu_1282_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_poly_small_mkgauss_fu_1282_ap_ready = ap_const_logic_1)) then 
                    grp_poly_small_mkgauss_fu_1282_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_solve_NTRU_fu_1364_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_solve_NTRU_fu_1364_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
                    grp_solve_NTRU_fu_1364_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_solve_NTRU_fu_1364_ap_ready = ap_const_logic_1)) then 
                    grp_solve_NTRU_fu_1364_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    bnorm1_1_reg_1258_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
                bnorm1_1_reg_1258 <= bnorm1_reg_4635;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state64) and (ap_const_boolean_0 = ap_block_state64_on_subcall_done))) then 
                bnorm1_1_reg_1258 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    bnorm2_1_reg_1246_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
                bnorm2_1_reg_1246 <= bnorm2_reg_4640;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state64) and (ap_const_boolean_0 = ap_block_state64_on_subcall_done))) then 
                bnorm2_1_reg_1246 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    bnorm3_1_reg_1234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
                bnorm3_1_reg_1234 <= grp_fu_1393_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state64) and (ap_const_boolean_0 = ap_block_state64_on_subcall_done))) then 
                bnorm3_1_reg_1234 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    bnorm4_1_reg_1222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
                bnorm4_1_reg_1222 <= grp_fu_1397_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state64) and (ap_const_boolean_0 = ap_block_state64_on_subcall_done))) then 
                bnorm4_1_reg_1222 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    empty_fu_310_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                empty_fu_310 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                empty_fu_310 <= empty_358_reg_3931;
            end if; 
        end if;
    end process;

    loop_index12_fu_586_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln5990_fu_3052_p2 = ap_const_lv1_0) and (tmp_reg_4669 = ap_const_lv1_1) and (or_ln5913_reg_4356 = ap_const_lv1_0) and (tmp_205_reg_4305 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln188_reg_4665) and (ap_const_logic_1 = ap_CS_fsm_state76) and (ap_const_boolean_0 = ap_block_state76_on_subcall_done))) then 
                loop_index12_fu_586 <= ap_const_lv11_0;
            elsif (((exitcond18411_fu_3209_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state77))) then 
                loop_index12_fu_586 <= empty_360_fu_3215_p2;
            end if; 
        end if;
    end process;

    loop_index3_fu_598_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
                loop_index3_fu_598 <= ap_const_lv11_0;
            elsif (((exitcond1818_fu_3452_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state102))) then 
                loop_index3_fu_598 <= empty_381_fu_3458_p2;
            end if; 
        end if;
    end process;

    loop_index6_fu_594_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond18310_fu_3306_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state85))) then 
                loop_index6_fu_594 <= ap_const_lv11_0;
            elsif (((exitcond1829_fu_3419_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state94))) then 
                loop_index6_fu_594 <= empty_378_fu_3425_p2;
            end if; 
        end if;
    end process;

    loop_index9_fu_590_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond18411_fu_3209_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state77))) then 
                loop_index9_fu_590 <= ap_const_lv11_0;
            elsif (((exitcond18310_fu_3306_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state85))) then 
                loop_index9_fu_590 <= empty_369_fu_3312_p2;
            end if; 
        end if;
    end process;

    loop_index_fu_602_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1818_fu_3452_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state102))) then 
                loop_index_fu_602 <= ap_const_lv11_0;
            elsif (((exitcond7_fu_3549_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state110))) then 
                loop_index_fu_602 <= empty_390_fu_3555_p2;
            end if; 
        end if;
    end process;

    ng_2_reg_1088_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln2760_fu_2592_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                ng_2_reg_1088 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                ng_2_reg_1088 <= ng_3_fu_2713_p2;
            end if; 
        end if;
    end process;

    ng_reg_1053_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_205_fu_2509_p3 = ap_const_lv1_0) and (icmp_ln5884_fu_2497_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                ng_reg_1053 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                ng_reg_1053 <= ng_1_fu_2611_p2;
            end if; 
        end if;
    end process;

    rng_dptr_2_fu_578_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln805_fu_2104_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                rng_dptr_2_fu_578 <= ap_const_lv64_88;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state76) and (ap_const_boolean_0 = ap_block_state76_on_subcall_done) and ((tmp_205_reg_4305 = ap_const_lv1_1) or ((or_ln5913_reg_4356 = ap_const_lv1_1) or ((ap_const_lv1_0 = and_ln188_reg_4665) or ((icmp_ln5990_fu_3052_p2 = ap_const_lv1_1) or (tmp_reg_4669 = ap_const_lv1_0))))))) then 
                rng_dptr_2_fu_578 <= reg_1615;
            end if; 
        end if;
    end process;

    rng_st_1_fu_478_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln805_fu_2104_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                rng_st_1_fu_478 <= rng_st_3_0_fu_454;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state76) and (ap_const_boolean_0 = ap_block_state76_on_subcall_done) and ((tmp_205_reg_4305 = ap_const_lv1_1) or ((or_ln5913_reg_4356 = ap_const_lv1_1) or ((ap_const_lv1_0 = and_ln188_reg_4665) or ((icmp_ln5990_fu_3052_p2 = ap_const_lv1_1) or (tmp_reg_4669 = ap_const_lv1_0))))))) then 
                rng_st_1_fu_478 <= reg_1620;
            end if; 
        end if;
    end process;

    rng_st_3_0_fu_454_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond19826_fu_1900_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                rng_st_3_0_fu_454 <= rng_st_0_fu_314;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and ((lshr_ln809_2_reg_4007 = ap_const_lv3_0) or ((lshr_ln809_2_reg_4007 = ap_const_lv3_6) or (lshr_ln809_2_reg_4007 = ap_const_lv3_7))))) then 
                rng_st_3_0_fu_454 <= xor_ln809_1_fu_2348_p2;
            end if; 
        end if;
    end process;

    rng_st_51_3_0_fu_458_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond19826_fu_1900_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                rng_st_51_3_0_fu_458 <= rng_st_51_0_fu_318;
            elsif (((lshr_ln809_2_reg_4007 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                rng_st_51_3_0_fu_458 <= xor_ln809_1_fu_2348_p2;
            end if; 
        end if;
    end process;

    rng_st_52_3_0_fu_462_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond19826_fu_1900_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                rng_st_52_3_0_fu_462 <= rng_st_52_0_fu_322;
            elsif (((lshr_ln809_2_reg_4007 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                rng_st_52_3_0_fu_462 <= xor_ln809_1_fu_2348_p2;
            end if; 
        end if;
    end process;

    rng_st_53_3_0_fu_466_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond19826_fu_1900_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                rng_st_53_3_0_fu_466 <= rng_st_53_0_fu_326;
            elsif (((lshr_ln809_2_reg_4007 = ap_const_lv3_3) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                rng_st_53_3_0_fu_466 <= xor_ln809_1_fu_2348_p2;
            end if; 
        end if;
    end process;

    rng_st_54_3_0_fu_470_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond19826_fu_1900_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                rng_st_54_3_0_fu_470 <= rng_st_54_0_fu_330;
            elsif (((lshr_ln809_2_reg_4007 = ap_const_lv3_4) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                rng_st_54_3_0_fu_470 <= xor_ln809_1_fu_2348_p2;
            end if; 
        end if;
    end process;

    rng_st_54_fu_486_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln805_fu_2104_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                rng_st_54_fu_486 <= rng_st_52_3_0_fu_462;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state76) and (ap_const_boolean_0 = ap_block_state76_on_subcall_done) and ((tmp_205_reg_4305 = ap_const_lv1_1) or ((or_ln5913_reg_4356 = ap_const_lv1_1) or ((ap_const_lv1_0 = and_ln188_reg_4665) or ((icmp_ln5990_fu_3052_p2 = ap_const_lv1_1) or (tmp_reg_4669 = ap_const_lv1_0))))))) then 
                rng_st_54_fu_486 <= reg_1630;
            end if; 
        end if;
    end process;

    rng_st_55_3_0_fu_474_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond19826_fu_1900_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                rng_st_55_3_0_fu_474 <= rng_st_55_0_fu_334;
            elsif (((lshr_ln809_2_reg_4007 = ap_const_lv3_5) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                rng_st_55_3_0_fu_474 <= xor_ln809_1_fu_2348_p2;
            end if; 
        end if;
    end process;

    rng_st_55_fu_490_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln805_fu_2104_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                rng_st_55_fu_490 <= rng_st_53_3_0_fu_466;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state76) and (ap_const_boolean_0 = ap_block_state76_on_subcall_done) and ((tmp_205_reg_4305 = ap_const_lv1_1) or ((or_ln5913_reg_4356 = ap_const_lv1_1) or ((ap_const_lv1_0 = and_ln188_reg_4665) or ((icmp_ln5990_fu_3052_p2 = ap_const_lv1_1) or (tmp_reg_4669 = ap_const_lv1_0))))))) then 
                rng_st_55_fu_490 <= reg_1635;
            end if; 
        end if;
    end process;

    rng_st_56_fu_494_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln805_fu_2104_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                rng_st_56_fu_494 <= rng_st_54_3_0_fu_470;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state76) and (ap_const_boolean_0 = ap_block_state76_on_subcall_done) and ((tmp_205_reg_4305 = ap_const_lv1_1) or ((or_ln5913_reg_4356 = ap_const_lv1_1) or ((ap_const_lv1_0 = and_ln188_reg_4665) or ((icmp_ln5990_fu_3052_p2 = ap_const_lv1_1) or (tmp_reg_4669 = ap_const_lv1_0))))))) then 
                rng_st_56_fu_494 <= reg_1640;
            end if; 
        end if;
    end process;

    rng_st_57_fu_498_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln805_fu_2104_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                rng_st_57_fu_498 <= rng_st_55_3_0_fu_474;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state76) and (ap_const_boolean_0 = ap_block_state76_on_subcall_done) and ((tmp_205_reg_4305 = ap_const_lv1_1) or ((or_ln5913_reg_4356 = ap_const_lv1_1) or ((ap_const_lv1_0 = and_ln188_reg_4665) or ((icmp_ln5990_fu_3052_p2 = ap_const_lv1_1) or (tmp_reg_4669 = ap_const_lv1_0))))))) then 
                rng_st_57_fu_498 <= reg_1645;
            end if; 
        end if;
    end process;

    rng_st_58_fu_502_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln805_fu_2104_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                rng_st_58_fu_502 <= rng_st_fu_2175_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state76) and (ap_const_boolean_0 = ap_block_state76_on_subcall_done) and ((tmp_205_reg_4305 = ap_const_lv1_1) or ((or_ln5913_reg_4356 = ap_const_lv1_1) or ((ap_const_lv1_0 = and_ln188_reg_4665) or ((icmp_ln5990_fu_3052_p2 = ap_const_lv1_1) or (tmp_reg_4669 = ap_const_lv1_0))))))) then 
                rng_st_58_fu_502 <= reg_1650;
            end if; 
        end if;
    end process;

    rng_st_59_fu_506_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln805_fu_2104_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                rng_st_59_fu_506 <= rng_st_57_0_load_reg_3843;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state76) and (ap_const_boolean_0 = ap_block_state76_on_subcall_done) and ((tmp_205_reg_4305 = ap_const_lv1_1) or ((or_ln5913_reg_4356 = ap_const_lv1_1) or ((ap_const_lv1_0 = and_ln188_reg_4665) or ((icmp_ln5990_fu_3052_p2 = ap_const_lv1_1) or (tmp_reg_4669 = ap_const_lv1_0))))))) then 
                rng_st_59_fu_506 <= reg_1655;
            end if; 
        end if;
    end process;

    rng_st_60_fu_510_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln805_fu_2104_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                rng_st_60_fu_510 <= rng_st_58_0_load_reg_3848;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state76) and (ap_const_boolean_0 = ap_block_state76_on_subcall_done) and ((tmp_205_reg_4305 = ap_const_lv1_1) or ((or_ln5913_reg_4356 = ap_const_lv1_1) or ((ap_const_lv1_0 = and_ln188_reg_4665) or ((icmp_ln5990_fu_3052_p2 = ap_const_lv1_1) or (tmp_reg_4669 = ap_const_lv1_0))))))) then 
                rng_st_60_fu_510 <= reg_1660;
            end if; 
        end if;
    end process;

    rng_st_61_fu_514_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln805_fu_2104_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                rng_st_61_fu_514 <= rng_st_59_0_load_reg_3853;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state76) and (ap_const_boolean_0 = ap_block_state76_on_subcall_done) and ((tmp_205_reg_4305 = ap_const_lv1_1) or ((or_ln5913_reg_4356 = ap_const_lv1_1) or ((ap_const_lv1_0 = and_ln188_reg_4665) or ((icmp_ln5990_fu_3052_p2 = ap_const_lv1_1) or (tmp_reg_4669 = ap_const_lv1_0))))))) then 
                rng_st_61_fu_514 <= reg_1665;
            end if; 
        end if;
    end process;

    rng_st_62_fu_518_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln805_fu_2104_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                rng_st_62_fu_518 <= rng_st_60_0_load_reg_3858;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state76) and (ap_const_boolean_0 = ap_block_state76_on_subcall_done) and ((tmp_205_reg_4305 = ap_const_lv1_1) or ((or_ln5913_reg_4356 = ap_const_lv1_1) or ((ap_const_lv1_0 = and_ln188_reg_4665) or ((icmp_ln5990_fu_3052_p2 = ap_const_lv1_1) or (tmp_reg_4669 = ap_const_lv1_0))))))) then 
                rng_st_62_fu_518 <= reg_1670;
            end if; 
        end if;
    end process;

    rng_st_63_fu_522_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln805_fu_2104_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                rng_st_63_fu_522 <= rng_st_61_0_load_reg_3863;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state76) and (ap_const_boolean_0 = ap_block_state76_on_subcall_done) and ((tmp_205_reg_4305 = ap_const_lv1_1) or ((or_ln5913_reg_4356 = ap_const_lv1_1) or ((ap_const_lv1_0 = and_ln188_reg_4665) or ((icmp_ln5990_fu_3052_p2 = ap_const_lv1_1) or (tmp_reg_4669 = ap_const_lv1_0))))))) then 
                rng_st_63_fu_522 <= reg_1675;
            end if; 
        end if;
    end process;

    rng_st_64_fu_526_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln805_fu_2104_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                rng_st_64_fu_526 <= rng_st_62_0_load_reg_3868;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state76) and (ap_const_boolean_0 = ap_block_state76_on_subcall_done) and ((tmp_205_reg_4305 = ap_const_lv1_1) or ((or_ln5913_reg_4356 = ap_const_lv1_1) or ((ap_const_lv1_0 = and_ln188_reg_4665) or ((icmp_ln5990_fu_3052_p2 = ap_const_lv1_1) or (tmp_reg_4669 = ap_const_lv1_0))))))) then 
                rng_st_64_fu_526 <= reg_1680;
            end if; 
        end if;
    end process;

    rng_st_65_fu_530_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln805_fu_2104_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                rng_st_65_fu_530 <= rng_st_63_0_load_reg_3873;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state76) and (ap_const_boolean_0 = ap_block_state76_on_subcall_done) and ((tmp_205_reg_4305 = ap_const_lv1_1) or ((or_ln5913_reg_4356 = ap_const_lv1_1) or ((ap_const_lv1_0 = and_ln188_reg_4665) or ((icmp_ln5990_fu_3052_p2 = ap_const_lv1_1) or (tmp_reg_4669 = ap_const_lv1_0))))))) then 
                rng_st_65_fu_530 <= reg_1685;
            end if; 
        end if;
    end process;

    rng_st_66_fu_534_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln805_fu_2104_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                rng_st_66_fu_534 <= rng_st_64_0_load_reg_3878;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state76) and (ap_const_boolean_0 = ap_block_state76_on_subcall_done) and ((tmp_205_reg_4305 = ap_const_lv1_1) or ((or_ln5913_reg_4356 = ap_const_lv1_1) or ((ap_const_lv1_0 = and_ln188_reg_4665) or ((icmp_ln5990_fu_3052_p2 = ap_const_lv1_1) or (tmp_reg_4669 = ap_const_lv1_0))))))) then 
                rng_st_66_fu_534 <= reg_1690;
            end if; 
        end if;
    end process;

    rng_st_67_fu_538_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln805_fu_2104_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                rng_st_67_fu_538 <= rng_st_65_0_load_reg_3883;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state76) and (ap_const_boolean_0 = ap_block_state76_on_subcall_done) and ((tmp_205_reg_4305 = ap_const_lv1_1) or ((or_ln5913_reg_4356 = ap_const_lv1_1) or ((ap_const_lv1_0 = and_ln188_reg_4665) or ((icmp_ln5990_fu_3052_p2 = ap_const_lv1_1) or (tmp_reg_4669 = ap_const_lv1_0))))))) then 
                rng_st_67_fu_538 <= reg_1695;
            end if; 
        end if;
    end process;

    rng_st_68_fu_542_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln805_fu_2104_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                rng_st_68_fu_542 <= rng_st_77_fu_2181_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state76) and (ap_const_boolean_0 = ap_block_state76_on_subcall_done) and ((tmp_205_reg_4305 = ap_const_lv1_1) or ((or_ln5913_reg_4356 = ap_const_lv1_1) or ((ap_const_lv1_0 = and_ln188_reg_4665) or ((icmp_ln5990_fu_3052_p2 = ap_const_lv1_1) or (tmp_reg_4669 = ap_const_lv1_0))))))) then 
                rng_st_68_fu_542 <= reg_1700;
            end if; 
        end if;
    end process;

    rng_st_69_fu_546_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln805_fu_2104_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                rng_st_69_fu_546 <= rng_st_67_0_load_reg_3888;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state76) and (ap_const_boolean_0 = ap_block_state76_on_subcall_done) and ((tmp_205_reg_4305 = ap_const_lv1_1) or ((or_ln5913_reg_4356 = ap_const_lv1_1) or ((ap_const_lv1_0 = and_ln188_reg_4665) or ((icmp_ln5990_fu_3052_p2 = ap_const_lv1_1) or (tmp_reg_4669 = ap_const_lv1_0))))))) then 
                rng_st_69_fu_546 <= reg_1705;
            end if; 
        end if;
    end process;

    rng_st_70_fu_550_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln805_fu_2104_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                rng_st_70_fu_550 <= rng_st_68_0_load_reg_3893;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state76) and (ap_const_boolean_0 = ap_block_state76_on_subcall_done) and ((tmp_205_reg_4305 = ap_const_lv1_1) or ((or_ln5913_reg_4356 = ap_const_lv1_1) or ((ap_const_lv1_0 = and_ln188_reg_4665) or ((icmp_ln5990_fu_3052_p2 = ap_const_lv1_1) or (tmp_reg_4669 = ap_const_lv1_0))))))) then 
                rng_st_70_fu_550 <= reg_1710;
            end if; 
        end if;
    end process;

    rng_st_71_fu_554_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln805_fu_2104_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                rng_st_71_fu_554 <= rng_st_69_0_load_reg_3898;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state76) and (ap_const_boolean_0 = ap_block_state76_on_subcall_done) and ((tmp_205_reg_4305 = ap_const_lv1_1) or ((or_ln5913_reg_4356 = ap_const_lv1_1) or ((ap_const_lv1_0 = and_ln188_reg_4665) or ((icmp_ln5990_fu_3052_p2 = ap_const_lv1_1) or (tmp_reg_4669 = ap_const_lv1_0))))))) then 
                rng_st_71_fu_554 <= reg_1715;
            end if; 
        end if;
    end process;

    rng_st_72_fu_558_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln805_fu_2104_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                rng_st_72_fu_558 <= rng_st_70_0_load_reg_3903;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state76) and (ap_const_boolean_0 = ap_block_state76_on_subcall_done) and ((tmp_205_reg_4305 = ap_const_lv1_1) or ((or_ln5913_reg_4356 = ap_const_lv1_1) or ((ap_const_lv1_0 = and_ln188_reg_4665) or ((icmp_ln5990_fu_3052_p2 = ap_const_lv1_1) or (tmp_reg_4669 = ap_const_lv1_0))))))) then 
                rng_st_72_fu_558 <= reg_1720;
            end if; 
        end if;
    end process;

    rng_st_73_fu_562_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln805_fu_2104_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                rng_st_73_fu_562 <= rng_st_71_0_load_reg_3908;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state76) and (ap_const_boolean_0 = ap_block_state76_on_subcall_done) and ((tmp_205_reg_4305 = ap_const_lv1_1) or ((or_ln5913_reg_4356 = ap_const_lv1_1) or ((ap_const_lv1_0 = and_ln188_reg_4665) or ((icmp_ln5990_fu_3052_p2 = ap_const_lv1_1) or (tmp_reg_4669 = ap_const_lv1_0))))))) then 
                rng_st_73_fu_562 <= reg_1725;
            end if; 
        end if;
    end process;

    rng_st_74_fu_566_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln805_fu_2104_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                rng_st_74_fu_566 <= rng_st_72_0_load_reg_3913;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state76) and (ap_const_boolean_0 = ap_block_state76_on_subcall_done) and ((tmp_205_reg_4305 = ap_const_lv1_1) or ((or_ln5913_reg_4356 = ap_const_lv1_1) or ((ap_const_lv1_0 = and_ln188_reg_4665) or ((icmp_ln5990_fu_3052_p2 = ap_const_lv1_1) or (tmp_reg_4669 = ap_const_lv1_0))))))) then 
                rng_st_74_fu_566 <= reg_1730;
            end if; 
        end if;
    end process;

    rng_st_75_fu_570_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln805_fu_2104_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                rng_st_75_fu_570 <= rng_st_73_0_load_reg_3918;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state76) and (ap_const_boolean_0 = ap_block_state76_on_subcall_done) and ((tmp_205_reg_4305 = ap_const_lv1_1) or ((or_ln5913_reg_4356 = ap_const_lv1_1) or ((ap_const_lv1_0 = and_ln188_reg_4665) or ((icmp_ln5990_fu_3052_p2 = ap_const_lv1_1) or (tmp_reg_4669 = ap_const_lv1_0))))))) then 
                rng_st_75_fu_570 <= reg_1735;
            end if; 
        end if;
    end process;

    rng_st_76_fu_574_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln805_fu_2104_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                rng_st_76_fu_574 <= rng_st_74_0_load_reg_3923;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state76) and (ap_const_boolean_0 = ap_block_state76_on_subcall_done) and ((tmp_205_reg_4305 = ap_const_lv1_1) or ((or_ln5913_reg_4356 = ap_const_lv1_1) or ((ap_const_lv1_0 = and_ln188_reg_4665) or ((icmp_ln5990_fu_3052_p2 = ap_const_lv1_1) or (tmp_reg_4669 = ap_const_lv1_0))))))) then 
                rng_st_76_fu_574 <= reg_1740;
            end if; 
        end if;
    end process;

    rng_st_7_fu_482_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln805_fu_2104_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                rng_st_7_fu_482 <= rng_st_51_3_0_fu_458;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state76) and (ap_const_boolean_0 = ap_block_state76_on_subcall_done) and ((tmp_205_reg_4305 = ap_const_lv1_1) or ((or_ln5913_reg_4356 = ap_const_lv1_1) or ((ap_const_lv1_0 = and_ln188_reg_4665) or ((icmp_ln5990_fu_3052_p2 = ap_const_lv1_1) or (tmp_reg_4669 = ap_const_lv1_0))))))) then 
                rng_st_7_fu_482 <= reg_1625;
            end if; 
        end if;
    end process;

    s_2_reg_1100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln2760_fu_2592_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                s_2_reg_1100 <= ap_const_lv26_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                s_2_reg_1100 <= grp_fu_3639_p3;
            end if; 
        end if;
    end process;

    s_reg_1065_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_205_fu_2509_p3 = ap_const_lv1_0) and (icmp_ln5884_fu_2497_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                s_reg_1065 <= ap_const_lv26_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                s_reg_1065 <= grp_fu_3630_p3;
            end if; 
        end if;
    end process;

    test_reg_1030_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                test_reg_1030 <= test_1_fu_2579_p3;
            elsif (((grp_poly_small_mkgauss_fu_1282_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                test_reg_1030 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    u_014_reg_1042_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                u_014_reg_1042 <= u_215_reg_4290;
            elsif (((grp_poly_small_mkgauss_fu_1282_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                u_014_reg_1042 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    u_0_fu_450_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond19826_fu_1900_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                u_0_fu_450 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                u_0_fu_450 <= add_ln805_reg_3996;
            end if; 
        end if;
    end process;

    u_116_reg_1270_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
                u_116_reg_1270 <= u_227_reg_4570;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state64) and (ap_const_boolean_0 = ap_block_state64_on_subcall_done))) then 
                u_116_reg_1270 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    u_138_reg_1112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln2760_fu_2592_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                u_138_reg_1112 <= ap_const_lv11_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                u_138_reg_1112 <= u_217_reg_4346;
            end if; 
        end if;
    end process;

    u_140_reg_1123_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln5913_fu_2700_p2 = ap_const_lv1_0) and (icmp_ln2760_1_fu_2622_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                u_140_reg_1123 <= ap_const_lv11_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state31) and (grp_fpr_of_fu_1317_ap_done = ap_const_logic_1))) then 
                u_140_reg_1123 <= u_218_reg_4384;
            end if; 
        end if;
    end process;

    u_142_reg_1134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln2817_fu_2724_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
                u_142_reg_1134 <= ap_const_lv11_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state34) and (grp_fpr_of_fu_1317_ap_done = ap_const_logic_1))) then 
                u_142_reg_1134 <= u_219_reg_4407;
            end if; 
        end if;
    end process;

    u_144_reg_1145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                u_144_reg_1145 <= u_220_reg_4430;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state35) and (ap_const_boolean_0 = ap_block_state35_on_subcall_done))) then 
                u_144_reg_1145 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    u_146_reg_1156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln225_fu_2769_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
                u_146_reg_1156 <= ap_const_lv11_200;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                u_146_reg_1156 <= u_221_reg_4469;
            end if; 
        end if;
    end process;

    u_148_reg_1167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln546_fu_2798_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
                u_148_reg_1167 <= ap_const_lv11_200;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
                u_148_reg_1167 <= u_222_reg_4483;
            end if; 
        end if;
    end process;

    u_150_reg_1178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln546_3_fu_2830_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
                u_150_reg_1178 <= ap_const_lv11_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
                u_150_reg_1178 <= u_223_reg_4491;
            end if; 
        end if;
    end process;

    u_152_reg_1189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln562_fu_2862_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
                u_152_reg_1189 <= ap_const_lv11_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
                u_152_reg_1189 <= u_224_reg_4505;
            end if; 
        end if;
    end process;

    u_154_reg_1200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln562_1_fu_2879_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state55))) then 
                u_154_reg_1200 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
                u_154_reg_1200 <= u_225_reg_4519;
            end if; 
        end if;
    end process;

    u_156_reg_1211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln580_fu_2897_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
                u_156_reg_1211 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
                u_156_reg_1211 <= u_226_reg_4542;
            end if; 
        end if;
    end process;

    u_reg_1077_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_205_fu_2509_p3 = ap_const_lv1_0) and (icmp_ln5884_fu_2497_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                u_reg_1077 <= ap_const_lv11_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                u_reg_1077 <= u_216_reg_4317;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                F_upper_out_read_reg_3822 <= F_upper_out;
                G_upper_out_read_reg_3816 <= G_upper_out;
                f_out_read_reg_3834 <= f_out;
                g_out_read_reg_3828 <= g_out;
                h_out_read_reg_3811 <= h_out;
                seed_read_reg_3805 <= seed;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln805_reg_3996 <= add_ln805_fu_2110_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state73)) then
                and_ln188_reg_4665 <= and_ln188_fu_3034_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state69)) then
                bnorm1_reg_4635 <= grp_fu_1393_p2;
                bnorm2_reg_4640 <= grp_fu_1397_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                div_i_i_reg_4455 <= grp_fu_1474_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                empty_358_reg_3931 <= empty_358_fu_1906_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln5990_fu_3052_p2 = ap_const_lv1_0) and (tmp_reg_4669 = ap_const_lv1_1) and (or_ln5913_reg_4356 = ap_const_lv1_0) and (tmp_205_reg_4305 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln188_reg_4665) and (ap_const_logic_1 = ap_CS_fsm_state76))) then
                empty_359_reg_4686 <= empty_359_fu_3063_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond18411_fu_3209_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state77))) then
                empty_361_reg_4718 <= empty_361_fu_3260_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond18411_fu_3209_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state77))) then
                empty_364_reg_4699 <= empty_364_fu_3230_p2;
                gmem0_addr_1_reg_4705 <= p_cast4_cast_fu_3245_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state78)) then
                empty_365_reg_4723 <= empty_365_fu_3275_p2;
                empty_366_reg_4728 <= empty_366_fu_3292_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond18310_fu_3306_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state85))) then
                empty_372_reg_4741 <= empty_372_fu_3327_p2;
                gmem0_addr_3_reg_4747 <= p_cast6_cast_fu_3342_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state86)) then
                empty_373_reg_4766 <= empty_373_fu_3388_p2;
                empty_374_reg_4771 <= empty_374_fu_3405_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state101)) then
                empty_380_reg_4796 <= empty_380_fu_3441_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1818_fu_3452_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state102))) then
                empty_382_reg_4828 <= empty_382_fu_3503_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1818_fu_3452_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state102))) then
                empty_385_reg_4809 <= empty_385_fu_3473_p2;
                gmem0_addr_4_reg_4815 <= p_cast8_cast_fu_3488_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state103)) then
                empty_386_reg_4833 <= empty_386_fu_3518_p2;
                empty_387_reg_4838 <= empty_387_fu_3535_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_3549_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state110))) then
                empty_393_reg_4851 <= empty_393_fu_3570_p2;
                gmem0_addr_5_reg_4857 <= p_cast10_cast_fu_3585_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state111)) then
                empty_394_reg_4863 <= empty_394_fu_3607_p2;
                empty_395_reg_4868 <= empty_395_fu_3624_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond18310_fu_3306_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state85))) then
                gmem0_addr_2_reg_4760 <= sext_ln6002_fu_3366_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                gmem0_addr_read_reg_4204 <= gmem0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln805_fu_2104_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                gmem0_addr_reg_4001 <= sext_ln809_fu_2131_p1;
                lshr_ln809_2_reg_4007 <= u_0_fu_450(5 downto 3);
                tmp_s_reg_4011 <= tmp_s_fu_2151_p8;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state95)) then
                h_load_reg_4784 <= h_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln2760_1_fu_2622_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                or_ln5913_reg_4356 <= or_ln5913_fu_2700_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((grp_poly_small_mkgauss_fu_1282_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((grp_poly_small_mkgauss_fu_1282_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then
                reg_1615 <= grp_poly_small_mkgauss_fu_1282_ap_return_0;
                reg_1620 <= grp_poly_small_mkgauss_fu_1282_ap_return_1;
                reg_1625 <= grp_poly_small_mkgauss_fu_1282_ap_return_2;
                reg_1630 <= grp_poly_small_mkgauss_fu_1282_ap_return_3;
                reg_1635 <= grp_poly_small_mkgauss_fu_1282_ap_return_4;
                reg_1640 <= grp_poly_small_mkgauss_fu_1282_ap_return_5;
                reg_1645 <= grp_poly_small_mkgauss_fu_1282_ap_return_6;
                reg_1650 <= grp_poly_small_mkgauss_fu_1282_ap_return_7;
                reg_1655 <= grp_poly_small_mkgauss_fu_1282_ap_return_8;
                reg_1660 <= grp_poly_small_mkgauss_fu_1282_ap_return_9;
                reg_1665 <= grp_poly_small_mkgauss_fu_1282_ap_return_10;
                reg_1670 <= grp_poly_small_mkgauss_fu_1282_ap_return_11;
                reg_1675 <= grp_poly_small_mkgauss_fu_1282_ap_return_12;
                reg_1680 <= grp_poly_small_mkgauss_fu_1282_ap_return_13;
                reg_1685 <= grp_poly_small_mkgauss_fu_1282_ap_return_14;
                reg_1690 <= grp_poly_small_mkgauss_fu_1282_ap_return_15;
                reg_1695 <= grp_poly_small_mkgauss_fu_1282_ap_return_16;
                reg_1700 <= grp_poly_small_mkgauss_fu_1282_ap_return_17;
                reg_1705 <= grp_poly_small_mkgauss_fu_1282_ap_return_18;
                reg_1710 <= grp_poly_small_mkgauss_fu_1282_ap_return_19;
                reg_1715 <= grp_poly_small_mkgauss_fu_1282_ap_return_20;
                reg_1720 <= grp_poly_small_mkgauss_fu_1282_ap_return_21;
                reg_1725 <= grp_poly_small_mkgauss_fu_1282_ap_return_22;
                reg_1730 <= grp_poly_small_mkgauss_fu_1282_ap_return_23;
                reg_1735 <= grp_poly_small_mkgauss_fu_1282_ap_return_24;
                reg_1740 <= grp_poly_small_mkgauss_fu_1282_ap_return_25;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state68))) then
                reg_1805 <= grp_fu_1393_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln546_fu_2798_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                rt1_addr_3_reg_4463 <= zext_ln546_fu_2793_p1(10 - 1 downto 0);
                u_221_reg_4469 <= u_221_fu_2804_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln562_fu_2862_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state52))) then
                rt1_addr_4_reg_4496 <= zext_ln562_fu_2857_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln580_fu_2897_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state58))) then
                rt1_addr_5_reg_4524 <= zext_ln580_fu_2891_p1(10 - 1 downto 0);
                rt1_addr_6_reg_4534 <= zext_ln583_fu_2915_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln546_3_fu_2830_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                rt2_addr_3_reg_4477 <= zext_ln546_1_fu_2825_p1(10 - 1 downto 0);
                u_222_reg_4483 <= u_222_fu_2836_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln562_1_fu_2879_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state55))) then
                rt2_addr_4_reg_4510 <= zext_ln562_1_fu_2874_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln580_2_fu_2926_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state61))) then
                rt2_addr_5_reg_4547 <= zext_ln580_1_fu_2920_p1(10 - 1 downto 0);
                rt2_addr_6_reg_4557 <= zext_ln583_4_fu_2944_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                sext_ln2819_1_reg_4417 <= sext_ln2819_1_fu_2758_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                sext_ln2819_reg_4394 <= sext_ln2819_fu_2736_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln5990_fu_3052_p2 = ap_const_lv1_1) and (tmp_reg_4669 = ap_const_lv1_1) and (or_ln5913_reg_4356 = ap_const_lv1_0) and (tmp_205_reg_4305 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln188_reg_4665) and (ap_const_logic_1 = ap_CS_fsm_state76) and (ap_const_boolean_0 = ap_block_state76_on_subcall_done))) then
                slove_NTRU_break_0_1_fu_582 <= grp_solve_NTRU_fu_1364_ap_return_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln5884_fu_2497_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                tmp_205_reg_4305 <= test_reg_1030(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state74)) then
                tmp_reg_4669 <= grp_compute_public_1_fu_1352_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond19826_fu_1900_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                trunc_ln805_reg_3985 <= trunc_ln805_fu_2037_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                u_215_reg_4290 <= u_215_fu_2503_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                u_216_reg_4317 <= u_216_fu_2598_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                u_217_reg_4346 <= u_217_fu_2628_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                u_218_reg_4384 <= u_218_fu_2730_p2;
                    zext_ln2817_reg_4376(10 downto 0) <= zext_ln2817_fu_2719_p1(10 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                u_219_reg_4407 <= u_219_fu_2752_p2;
                    zext_ln2817_1_reg_4399(10 downto 0) <= zext_ln2817_1_fu_2741_p1(10 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                u_220_reg_4430 <= u_220_fu_2775_p2;
                    zext_ln225_reg_4422(9 downto 0) <= zext_ln225_fu_2763_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then
                u_223_reg_4491 <= u_223_fu_2868_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state55)) then
                u_224_reg_4505 <= u_224_fu_2885_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state58)) then
                u_225_reg_4519 <= u_225_fu_2903_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state61)) then
                u_226_reg_4542 <= u_226_fu_2932_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state65)) then
                u_227_reg_4570 <= u_227_fu_2960_p2;
                    zext_ln5942_reg_4562(8 downto 0) <= zext_ln5942_fu_2949_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln5942_fu_2954_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state65))) then
                xor_ln5946_reg_4580 <= xor_ln5946_fu_2966_p2;
                    zext_ln5946_reg_4585(8 downto 0) <= zext_ln5946_fu_2972_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state66)) then
                    zext_ln5948_reg_4605(8 downto 0) <= zext_ln5948_fu_2985_p1(8 downto 0);
                    zext_ln5950_reg_4615(9 downto 0) <= zext_ln5950_fu_2993_p1(9 downto 0);
            end if;
        end if;
    end process;
    zext_ln2817_reg_4376(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln2817_1_reg_4399(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln225_reg_4422(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln5942_reg_4562(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    zext_ln5946_reg_4585(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    zext_ln5948_reg_4605(63 downto 9) <= "0000000000000000000000000000000000000000000000000000001";
    zext_ln5950_reg_4615(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state84, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state103, ap_CS_fsm_state104, ap_CS_fsm_state109, ap_CS_fsm_state111, ap_CS_fsm_state112, ap_CS_fsm_state117, ap_CS_fsm_state15, grp_poly_small_mkgauss_fu_1282_ap_done, ap_CS_fsm_state16, ap_CS_fsm_state2, exitcond19826_fu_1900_p2, ap_CS_fsm_state4, icmp_ln805_fu_2104_p2, ap_CS_fsm_state17, icmp_ln5884_fu_2497_p2, tmp_205_fu_2509_p3, tmp_205_reg_4305, ap_CS_fsm_state19, icmp_ln2760_fu_2592_p2, ap_CS_fsm_state24, icmp_ln2760_1_fu_2622_p2, or_ln5913_fu_2700_p2, or_ln5913_reg_4356, ap_CS_fsm_state29, icmp_ln2817_fu_2724_p2, ap_CS_fsm_state32, icmp_ln2817_1_fu_2746_p2, ap_CS_fsm_state36, icmp_ln225_fu_2769_p2, ap_CS_fsm_state48, icmp_ln546_fu_2798_p2, ap_CS_fsm_state50, icmp_ln546_3_fu_2830_p2, ap_CS_fsm_state52, icmp_ln562_fu_2862_p2, ap_CS_fsm_state55, icmp_ln562_1_fu_2879_p2, ap_CS_fsm_state58, icmp_ln580_fu_2897_p2, ap_CS_fsm_state61, icmp_ln580_2_fu_2926_p2, ap_CS_fsm_state65, icmp_ln5942_fu_2954_p2, and_ln188_fu_3034_p2, and_ln188_reg_4665, ap_CS_fsm_state73, grp_compute_public_1_fu_1352_ap_return, tmp_reg_4669, ap_CS_fsm_state74, ap_CS_fsm_state76, icmp_ln5990_fu_3052_p2, ap_CS_fsm_state77, exitcond18411_fu_3209_p2, ap_CS_fsm_state85, exitcond18310_fu_3306_p2, ap_CS_fsm_state94, exitcond1829_fu_3419_p2, ap_CS_fsm_state102, exitcond1818_fu_3452_p2, ap_CS_fsm_state110, exitcond7_fu_3549_p2, grp_fpr_of_fu_1317_ap_done, grp_compute_public_1_fu_1352_ap_done, gmem0_AWREADY, gmem0_WREADY, gmem0_ARREADY, gmem0_RVALID, gmem0_BVALID, ap_CS_fsm_state31, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_block_state35_on_subcall_done, ap_CS_fsm_state64, ap_block_state64_on_subcall_done, ap_block_state76_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond19826_fu_1900_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln805_fu_2104_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (gmem0_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (gmem0_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((grp_poly_small_mkgauss_fu_1282_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((grp_poly_small_mkgauss_fu_1282_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if (((tmp_205_fu_2509_p3 = ap_const_lv1_0) and (icmp_ln5884_fu_2497_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                elsif (((tmp_205_fu_2509_p3 = ap_const_lv1_1) and (icmp_ln5884_fu_2497_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state76;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state19 => 
                if (((icmp_ln2760_fu_2592_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state24 => 
                if (((or_ln5913_fu_2700_p2 = ap_const_lv1_0) and (icmp_ln2760_1_fu_2622_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                elsif (((or_ln5913_fu_2700_p2 = ap_const_lv1_1) and (icmp_ln2760_1_fu_2622_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state76;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state29 => 
                if (((icmp_ln2817_fu_2724_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state31) and (grp_fpr_of_fu_1317_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state32 => 
                if (((icmp_ln2817_1_fu_2746_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state34) and (grp_fpr_of_fu_1317_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state35 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state35) and (ap_const_boolean_0 = ap_block_state35_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state36 => 
                if (((icmp_ln225_fu_2769_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state48 => 
                if (((icmp_ln546_fu_2798_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state50 => 
                if (((icmp_ln546_3_fu_2830_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state52 => 
                if (((icmp_ln562_fu_2862_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then
                    ap_NS_fsm <= ap_ST_fsm_state55;
                else
                    ap_NS_fsm <= ap_ST_fsm_state53;
                end if;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state55 => 
                if (((icmp_ln562_1_fu_2879_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state55))) then
                    ap_NS_fsm <= ap_ST_fsm_state58;
                else
                    ap_NS_fsm <= ap_ST_fsm_state56;
                end if;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state58 => 
                if (((icmp_ln580_fu_2897_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state58))) then
                    ap_NS_fsm <= ap_ST_fsm_state61;
                else
                    ap_NS_fsm <= ap_ST_fsm_state59;
                end if;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state61 => 
                if (((icmp_ln580_2_fu_2926_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state61))) then
                    ap_NS_fsm <= ap_ST_fsm_state64;
                else
                    ap_NS_fsm <= ap_ST_fsm_state62;
                end if;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state64 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state64) and (ap_const_boolean_0 = ap_block_state64_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state65;
                else
                    ap_NS_fsm <= ap_ST_fsm_state64;
                end if;
            when ap_ST_fsm_state65 => 
                if (((icmp_ln5942_fu_2954_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state65))) then
                    ap_NS_fsm <= ap_ST_fsm_state71;
                else
                    ap_NS_fsm <= ap_ST_fsm_state66;
                end if;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                if (((ap_const_lv1_0 = and_ln188_fu_3034_p2) and (ap_const_logic_1 = ap_CS_fsm_state73))) then
                    ap_NS_fsm <= ap_ST_fsm_state76;
                else
                    ap_NS_fsm <= ap_ST_fsm_state74;
                end if;
            when ap_ST_fsm_state74 => 
                if (((grp_compute_public_1_fu_1352_ap_return = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state74) and (grp_compute_public_1_fu_1352_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state76;
                elsif (((grp_compute_public_1_fu_1352_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state74) and (grp_compute_public_1_fu_1352_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state75;
                else
                    ap_NS_fsm <= ap_ST_fsm_state74;
                end if;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state76) and (ap_const_boolean_0 = ap_block_state76_on_subcall_done) and ((tmp_205_reg_4305 = ap_const_lv1_1) or ((or_ln5913_reg_4356 = ap_const_lv1_1) or ((ap_const_lv1_0 = and_ln188_reg_4665) or ((icmp_ln5990_fu_3052_p2 = ap_const_lv1_1) or (tmp_reg_4669 = ap_const_lv1_0))))))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                elsif (((icmp_ln5990_fu_3052_p2 = ap_const_lv1_0) and (tmp_reg_4669 = ap_const_lv1_1) and (or_ln5913_reg_4356 = ap_const_lv1_0) and (tmp_205_reg_4305 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln188_reg_4665) and (ap_const_logic_1 = ap_CS_fsm_state76) and (ap_const_boolean_0 = ap_block_state76_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state77;
                else
                    ap_NS_fsm <= ap_ST_fsm_state76;
                end if;
            when ap_ST_fsm_state77 => 
                if (((exitcond18411_fu_3209_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state77))) then
                    ap_NS_fsm <= ap_ST_fsm_state85;
                else
                    ap_NS_fsm <= ap_ST_fsm_state78;
                end if;
            when ap_ST_fsm_state78 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state78) and (gmem0_AWREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state79;
                else
                    ap_NS_fsm <= ap_ST_fsm_state78;
                end if;
            when ap_ST_fsm_state79 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state79) and (gmem0_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state80;
                else
                    ap_NS_fsm <= ap_ST_fsm_state79;
                end if;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state84) and (gmem0_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state77;
                else
                    ap_NS_fsm <= ap_ST_fsm_state84;
                end if;
            when ap_ST_fsm_state85 => 
                if (((exitcond18310_fu_3306_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state85))) then
                    ap_NS_fsm <= ap_ST_fsm_state93;
                else
                    ap_NS_fsm <= ap_ST_fsm_state86;
                end if;
            when ap_ST_fsm_state86 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state86) and (gmem0_AWREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state87;
                else
                    ap_NS_fsm <= ap_ST_fsm_state86;
                end if;
            when ap_ST_fsm_state87 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state87) and (gmem0_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state88;
                else
                    ap_NS_fsm <= ap_ST_fsm_state87;
                end if;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state92) and (gmem0_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state85;
                else
                    ap_NS_fsm <= ap_ST_fsm_state92;
                end if;
            when ap_ST_fsm_state93 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state93) and (gmem0_AWREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state94;
                else
                    ap_NS_fsm <= ap_ST_fsm_state93;
                end if;
            when ap_ST_fsm_state94 => 
                if (((exitcond1829_fu_3419_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state94))) then
                    ap_NS_fsm <= ap_ST_fsm_state97;
                else
                    ap_NS_fsm <= ap_ST_fsm_state95;
                end if;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state96) and (gmem0_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state94;
                else
                    ap_NS_fsm <= ap_ST_fsm_state96;
                end if;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state101) and (gmem0_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state102;
                else
                    ap_NS_fsm <= ap_ST_fsm_state101;
                end if;
            when ap_ST_fsm_state102 => 
                if (((exitcond1818_fu_3452_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state102))) then
                    ap_NS_fsm <= ap_ST_fsm_state110;
                else
                    ap_NS_fsm <= ap_ST_fsm_state103;
                end if;
            when ap_ST_fsm_state103 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state103) and (gmem0_AWREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state104;
                else
                    ap_NS_fsm <= ap_ST_fsm_state103;
                end if;
            when ap_ST_fsm_state104 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state104) and (gmem0_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state105;
                else
                    ap_NS_fsm <= ap_ST_fsm_state104;
                end if;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state109) and (gmem0_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state102;
                else
                    ap_NS_fsm <= ap_ST_fsm_state109;
                end if;
            when ap_ST_fsm_state110 => 
                if (((exitcond7_fu_3549_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state110))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state111;
                end if;
            when ap_ST_fsm_state111 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state111) and (gmem0_AWREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state112;
                else
                    ap_NS_fsm <= ap_ST_fsm_state111;
                end if;
            when ap_ST_fsm_state112 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state112) and (gmem0_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state113;
                else
                    ap_NS_fsm <= ap_ST_fsm_state112;
                end if;
            when ap_ST_fsm_state113 => 
                ap_NS_fsm <= ap_ST_fsm_state114;
            when ap_ST_fsm_state114 => 
                ap_NS_fsm <= ap_ST_fsm_state115;
            when ap_ST_fsm_state115 => 
                ap_NS_fsm <= ap_ST_fsm_state116;
            when ap_ST_fsm_state116 => 
                ap_NS_fsm <= ap_ST_fsm_state117;
            when ap_ST_fsm_state117 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state117) and (gmem0_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state110;
                else
                    ap_NS_fsm <= ap_ST_fsm_state117;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    F_upper_address0_assign_proc : process(tmp_205_reg_4305, or_ln5913_reg_4356, and_ln188_reg_4665, tmp_reg_4669, ap_CS_fsm_state76, ap_CS_fsm_state102, grp_solve_NTRU_fu_1364_F_upper_address0, loop_index3_cast18_fu_3447_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            F_upper_address0 <= loop_index3_cast18_fu_3447_p1(10 - 1 downto 0);
        elsif (((tmp_reg_4669 = ap_const_lv1_1) and (or_ln5913_reg_4356 = ap_const_lv1_0) and (tmp_205_reg_4305 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln188_reg_4665) and (ap_const_logic_1 = ap_CS_fsm_state76))) then 
            F_upper_address0 <= grp_solve_NTRU_fu_1364_F_upper_address0;
        else 
            F_upper_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    F_upper_ce0_assign_proc : process(tmp_205_reg_4305, or_ln5913_reg_4356, and_ln188_reg_4665, tmp_reg_4669, ap_CS_fsm_state76, ap_CS_fsm_state102, grp_solve_NTRU_fu_1364_F_upper_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            F_upper_ce0 <= ap_const_logic_1;
        elsif (((tmp_reg_4669 = ap_const_lv1_1) and (or_ln5913_reg_4356 = ap_const_lv1_0) and (tmp_205_reg_4305 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln188_reg_4665) and (ap_const_logic_1 = ap_CS_fsm_state76))) then 
            F_upper_ce0 <= grp_solve_NTRU_fu_1364_F_upper_ce0;
        else 
            F_upper_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    F_upper_load_cast_fu_3511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(F_upper_q0),16));

    F_upper_we0_assign_proc : process(tmp_205_reg_4305, or_ln5913_reg_4356, and_ln188_reg_4665, tmp_reg_4669, ap_CS_fsm_state76, grp_solve_NTRU_fu_1364_F_upper_we0)
    begin
        if (((tmp_reg_4669 = ap_const_lv1_1) and (or_ln5913_reg_4356 = ap_const_lv1_0) and (tmp_205_reg_4305 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln188_reg_4665) and (ap_const_logic_1 = ap_CS_fsm_state76))) then 
            F_upper_we0 <= grp_solve_NTRU_fu_1364_F_upper_we0;
        else 
            F_upper_we0 <= ap_const_logic_0;
        end if; 
    end process;


    G_upper_address0_assign_proc : process(tmp_205_reg_4305, or_ln5913_reg_4356, and_ln188_reg_4665, tmp_reg_4669, ap_CS_fsm_state76, ap_CS_fsm_state110, grp_solve_NTRU_fu_1364_G_upper_address0, loop_index_cast21_fu_3544_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state110)) then 
            G_upper_address0 <= loop_index_cast21_fu_3544_p1(10 - 1 downto 0);
        elsif (((tmp_reg_4669 = ap_const_lv1_1) and (or_ln5913_reg_4356 = ap_const_lv1_0) and (tmp_205_reg_4305 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln188_reg_4665) and (ap_const_logic_1 = ap_CS_fsm_state76))) then 
            G_upper_address0 <= grp_solve_NTRU_fu_1364_G_upper_address0;
        else 
            G_upper_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    G_upper_ce0_assign_proc : process(tmp_205_reg_4305, or_ln5913_reg_4356, and_ln188_reg_4665, tmp_reg_4669, ap_CS_fsm_state76, ap_CS_fsm_state110, grp_solve_NTRU_fu_1364_G_upper_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state110)) then 
            G_upper_ce0 <= ap_const_logic_1;
        elsif (((tmp_reg_4669 = ap_const_lv1_1) and (or_ln5913_reg_4356 = ap_const_lv1_0) and (tmp_205_reg_4305 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln188_reg_4665) and (ap_const_logic_1 = ap_CS_fsm_state76))) then 
            G_upper_ce0 <= grp_solve_NTRU_fu_1364_G_upper_ce0;
        else 
            G_upper_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    G_upper_load_cast_fu_3600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(G_upper_q0),16));

    G_upper_we0_assign_proc : process(tmp_205_reg_4305, or_ln5913_reg_4356, and_ln188_reg_4665, tmp_reg_4669, ap_CS_fsm_state76, grp_solve_NTRU_fu_1364_G_upper_we0)
    begin
        if (((tmp_reg_4669 = ap_const_lv1_1) and (or_ln5913_reg_4356 = ap_const_lv1_0) and (tmp_205_reg_4305 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln188_reg_4665) and (ap_const_logic_1 = ap_CS_fsm_state76))) then 
            G_upper_we0 <= grp_solve_NTRU_fu_1364_G_upper_we0;
        else 
            G_upper_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln5911_fu_2674_p2 <= std_logic_vector(signed(sext_ln5861_1_fu_2670_p1) + signed(sext_ln5861_fu_2650_p1));
    add_ln805_fu_2110_p2 <= std_logic_vector(unsigned(u_0_fu_450) + unsigned(ap_const_lv6_1));
    add_ln809_fu_2116_p2 <= std_logic_vector(unsigned(zext_ln805_fu_2100_p1) + unsigned(seed_read_reg_3805));
    and_ln188_fu_3034_p2 <= (tmp_93_fu_1479_p2 and or_ln188_fu_3028_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state101 <= ap_CS_fsm(100);
    ap_CS_fsm_state102 <= ap_CS_fsm(101);
    ap_CS_fsm_state103 <= ap_CS_fsm(102);
    ap_CS_fsm_state104 <= ap_CS_fsm(103);
    ap_CS_fsm_state109 <= ap_CS_fsm(108);
    ap_CS_fsm_state110 <= ap_CS_fsm(109);
    ap_CS_fsm_state111 <= ap_CS_fsm(110);
    ap_CS_fsm_state112 <= ap_CS_fsm(111);
    ap_CS_fsm_state117 <= ap_CS_fsm(116);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state85 <= ap_CS_fsm(84);
    ap_CS_fsm_state86 <= ap_CS_fsm(85);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state92 <= ap_CS_fsm(91);
    ap_CS_fsm_state93 <= ap_CS_fsm(92);
    ap_CS_fsm_state94 <= ap_CS_fsm(93);
    ap_CS_fsm_state95 <= ap_CS_fsm(94);
    ap_CS_fsm_state96 <= ap_CS_fsm(95);
    ap_CS_fsm_state97 <= ap_CS_fsm(96);
    ap_ST_fsm_state100_blk <= ap_const_logic_0;

    ap_ST_fsm_state101_blk_assign_proc : process(gmem0_BVALID)
    begin
        if ((gmem0_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state101_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state101_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state102_blk <= ap_const_logic_0;

    ap_ST_fsm_state103_blk_assign_proc : process(gmem0_AWREADY)
    begin
        if ((gmem0_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state103_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state103_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state104_blk_assign_proc : process(gmem0_WREADY)
    begin
        if ((gmem0_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state104_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state104_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state105_blk <= ap_const_logic_0;
    ap_ST_fsm_state106_blk <= ap_const_logic_0;
    ap_ST_fsm_state107_blk <= ap_const_logic_0;
    ap_ST_fsm_state108_blk <= ap_const_logic_0;

    ap_ST_fsm_state109_blk_assign_proc : process(gmem0_BVALID)
    begin
        if ((gmem0_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state109_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state109_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state110_blk <= ap_const_logic_0;

    ap_ST_fsm_state111_blk_assign_proc : process(gmem0_AWREADY)
    begin
        if ((gmem0_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state111_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state111_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state112_blk_assign_proc : process(gmem0_WREADY)
    begin
        if ((gmem0_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state112_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state112_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state113_blk <= ap_const_logic_0;
    ap_ST_fsm_state114_blk <= ap_const_logic_0;
    ap_ST_fsm_state115_blk <= ap_const_logic_0;
    ap_ST_fsm_state116_blk <= ap_const_logic_0;

    ap_ST_fsm_state117_blk_assign_proc : process(gmem0_BVALID)
    begin
        if ((gmem0_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state117_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state117_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state11_blk <= ap_const_logic_0;

    ap_ST_fsm_state12_blk_assign_proc : process(gmem0_RVALID)
    begin
        if ((gmem0_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state12_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state12_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;

    ap_ST_fsm_state15_blk_assign_proc : process(grp_poly_small_mkgauss_fu_1282_ap_done)
    begin
        if ((grp_poly_small_mkgauss_fu_1282_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state15_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state15_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state16_blk_assign_proc : process(grp_poly_small_mkgauss_fu_1282_ap_done)
    begin
        if ((grp_poly_small_mkgauss_fu_1282_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state16_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state16_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;

    ap_ST_fsm_state31_blk_assign_proc : process(grp_fpr_of_fu_1317_ap_done)
    begin
        if ((grp_fpr_of_fu_1317_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state31_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state31_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;

    ap_ST_fsm_state34_blk_assign_proc : process(grp_fpr_of_fu_1317_ap_done)
    begin
        if ((grp_fpr_of_fu_1317_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state34_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state34_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state35_blk_assign_proc : process(ap_block_state35_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state35_on_subcall_done)) then 
            ap_ST_fsm_state35_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state35_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;

    ap_ST_fsm_state5_blk_assign_proc : process(gmem0_ARREADY)
    begin
        if ((gmem0_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state62_blk <= ap_const_logic_0;
    ap_ST_fsm_state63_blk <= ap_const_logic_0;

    ap_ST_fsm_state64_blk_assign_proc : process(ap_block_state64_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state64_on_subcall_done)) then 
            ap_ST_fsm_state64_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state64_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state65_blk <= ap_const_logic_0;
    ap_ST_fsm_state66_blk <= ap_const_logic_0;
    ap_ST_fsm_state67_blk <= ap_const_logic_0;
    ap_ST_fsm_state68_blk <= ap_const_logic_0;
    ap_ST_fsm_state69_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state70_blk <= ap_const_logic_0;
    ap_ST_fsm_state71_blk <= ap_const_logic_0;
    ap_ST_fsm_state72_blk <= ap_const_logic_0;
    ap_ST_fsm_state73_blk <= ap_const_logic_0;

    ap_ST_fsm_state74_blk_assign_proc : process(grp_compute_public_1_fu_1352_ap_done)
    begin
        if ((grp_compute_public_1_fu_1352_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state74_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state74_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state75_blk <= ap_const_logic_0;

    ap_ST_fsm_state76_blk_assign_proc : process(ap_block_state76_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state76_on_subcall_done)) then 
            ap_ST_fsm_state76_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state76_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state77_blk <= ap_const_logic_0;

    ap_ST_fsm_state78_blk_assign_proc : process(gmem0_AWREADY)
    begin
        if ((gmem0_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state78_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state78_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state79_blk_assign_proc : process(gmem0_WREADY)
    begin
        if ((gmem0_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state79_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state79_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state80_blk <= ap_const_logic_0;
    ap_ST_fsm_state81_blk <= ap_const_logic_0;
    ap_ST_fsm_state82_blk <= ap_const_logic_0;
    ap_ST_fsm_state83_blk <= ap_const_logic_0;

    ap_ST_fsm_state84_blk_assign_proc : process(gmem0_BVALID)
    begin
        if ((gmem0_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state84_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state84_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state85_blk <= ap_const_logic_0;

    ap_ST_fsm_state86_blk_assign_proc : process(gmem0_AWREADY)
    begin
        if ((gmem0_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state86_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state86_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state87_blk_assign_proc : process(gmem0_WREADY)
    begin
        if ((gmem0_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state87_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state87_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state88_blk <= ap_const_logic_0;
    ap_ST_fsm_state89_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state90_blk <= ap_const_logic_0;
    ap_ST_fsm_state91_blk <= ap_const_logic_0;

    ap_ST_fsm_state92_blk_assign_proc : process(gmem0_BVALID)
    begin
        if ((gmem0_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state92_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state92_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state93_blk_assign_proc : process(gmem0_AWREADY)
    begin
        if ((gmem0_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state93_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state93_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state94_blk <= ap_const_logic_0;
    ap_ST_fsm_state95_blk <= ap_const_logic_0;

    ap_ST_fsm_state96_blk_assign_proc : process(gmem0_WREADY)
    begin
        if ((gmem0_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state96_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state96_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state97_blk <= ap_const_logic_0;
    ap_ST_fsm_state98_blk <= ap_const_logic_0;
    ap_ST_fsm_state99_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state35_on_subcall_done_assign_proc : process(grp_FFT_fu_1324_ap_done, grp_FFT_fu_1331_ap_done)
    begin
                ap_block_state35_on_subcall_done <= ((grp_FFT_fu_1331_ap_done = ap_const_logic_0) or (grp_FFT_fu_1324_ap_done = ap_const_logic_0));
    end process;


    ap_block_state64_on_subcall_done_assign_proc : process(grp_iFFT_fu_1338_ap_done, grp_iFFT_fu_1345_ap_done)
    begin
                ap_block_state64_on_subcall_done <= ((grp_iFFT_fu_1345_ap_done = ap_const_logic_0) or (grp_iFFT_fu_1338_ap_done = ap_const_logic_0));
    end process;


    ap_block_state76_on_subcall_done_assign_proc : process(grp_solve_NTRU_fu_1364_ap_done, ap_predicate_op850_call_state76)
    begin
                ap_block_state76_on_subcall_done <= ((ap_predicate_op850_call_state76 = ap_const_boolean_1) and (grp_solve_NTRU_fu_1364_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state110, exitcond7_fu_3549_p2)
    begin
        if (((exitcond7_fu_3549_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state110))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_bnorm1_1_phi_fu_1262_p4 <= bnorm1_1_reg_1258;

    ap_predicate_op850_call_state76_assign_proc : process(tmp_205_reg_4305, or_ln5913_reg_4356, and_ln188_reg_4665, tmp_reg_4669)
    begin
                ap_predicate_op850_call_state76 <= ((tmp_reg_4669 = ap_const_lv1_1) and (or_ln5913_reg_4356 = ap_const_lv1_0) and (tmp_205_reg_4305 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln188_reg_4665));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state110, exitcond7_fu_3549_p2)
    begin
        if (((exitcond7_fu_3549_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state110))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bitcast_ln147_1_fu_2820_p1 <= xor_ln147_fu_2814_p2;
    bitcast_ln147_2_fu_2842_p1 <= rt2_q1;
    bitcast_ln147_3_fu_2852_p1 <= xor_ln147_3_fu_2846_p2;
    bitcast_ln147_fu_2810_p1 <= rt1_q1;
    bitcast_ln188_fu_2998_p1 <= grp_fu_1393_p2;
    empty_358_fu_1906_p2 <= std_logic_vector(unsigned(empty_fu_310) + unsigned(ap_const_lv5_1));
    empty_359_fu_3063_p1 <= f_out_read_reg_3834(1 - 1 downto 0);
    empty_360_fu_3215_p2 <= std_logic_vector(unsigned(loop_index12_fu_586) + unsigned(ap_const_lv11_1));
    empty_361_fu_3260_p1 <= g_out_read_reg_3828(1 - 1 downto 0);
    empty_362_fu_3221_p1 <= loop_index12_fu_586(1 - 1 downto 0);
    empty_363_fu_3225_p2 <= std_logic_vector(unsigned(loop_index12_cast12_fu_3204_p1) + unsigned(f_out_read_reg_3834));
    empty_364_fu_3230_p2 <= (empty_362_fu_3221_p1 xor empty_359_reg_4686);
    empty_365_fu_3275_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv2_1),to_integer(unsigned('0' & p_cast13_fu_3272_p1(2-1 downto 0)))));
    empty_366_fu_3292_p2 <= std_logic_vector(shift_left(unsigned(f_load_7_cast_fu_3268_p1),to_integer(unsigned('0' & p_cast14_fu_3288_p1(16-1 downto 0)))));
    empty_369_fu_3312_p2 <= std_logic_vector(unsigned(loop_index9_fu_590) + unsigned(ap_const_lv11_1));
    empty_370_fu_3318_p1 <= loop_index9_fu_590(1 - 1 downto 0);
    empty_371_fu_3322_p2 <= std_logic_vector(unsigned(loop_index9_cast15_fu_3301_p1) + unsigned(g_out_read_reg_3828));
    empty_372_fu_3327_p2 <= (empty_370_fu_3318_p1 xor empty_361_reg_4718);
    empty_373_fu_3388_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv2_1),to_integer(unsigned('0' & p_cast16_fu_3385_p1(2-1 downto 0)))));
    empty_374_fu_3405_p2 <= std_logic_vector(shift_left(unsigned(g_load_7_cast_fu_3381_p1),to_integer(unsigned('0' & p_cast17_fu_3401_p1(16-1 downto 0)))));
    empty_378_fu_3425_p2 <= std_logic_vector(unsigned(loop_index6_fu_594) + unsigned(ap_const_lv11_1));
    empty_380_fu_3441_p1 <= F_upper_out_read_reg_3822(1 - 1 downto 0);
    empty_381_fu_3458_p2 <= std_logic_vector(unsigned(loop_index3_fu_598) + unsigned(ap_const_lv11_1));
    empty_382_fu_3503_p1 <= G_upper_out_read_reg_3816(1 - 1 downto 0);
    empty_383_fu_3464_p1 <= loop_index3_fu_598(1 - 1 downto 0);
    empty_384_fu_3468_p2 <= std_logic_vector(unsigned(loop_index3_cast18_fu_3447_p1) + unsigned(F_upper_out_read_reg_3822));
    empty_385_fu_3473_p2 <= (empty_383_fu_3464_p1 xor empty_380_reg_4796);
    empty_386_fu_3518_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv2_1),to_integer(unsigned('0' & p_cast19_fu_3515_p1(2-1 downto 0)))));
    empty_387_fu_3535_p2 <= std_logic_vector(shift_left(unsigned(F_upper_load_cast_fu_3511_p1),to_integer(unsigned('0' & p_cast20_fu_3531_p1(16-1 downto 0)))));
    empty_390_fu_3555_p2 <= std_logic_vector(unsigned(loop_index_fu_602) + unsigned(ap_const_lv11_1));
    empty_391_fu_3561_p1 <= loop_index_fu_602(1 - 1 downto 0);
    empty_392_fu_3565_p2 <= std_logic_vector(unsigned(loop_index_cast21_fu_3544_p1) + unsigned(G_upper_out_read_reg_3816));
    empty_393_fu_3570_p2 <= (empty_391_fu_3561_p1 xor empty_382_reg_4828);
    empty_394_fu_3607_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv2_1),to_integer(unsigned('0' & p_cast22_fu_3604_p1(2-1 downto 0)))));
    empty_395_fu_3624_p2 <= std_logic_vector(shift_left(unsigned(G_upper_load_cast_fu_3600_p1),to_integer(unsigned('0' & p_cast23_fu_3620_p1(16-1 downto 0)))));
    exitcond1818_fu_3452_p2 <= "1" when (loop_index3_fu_598 = ap_const_lv11_400) else "0";
    exitcond1829_fu_3419_p2 <= "1" when (loop_index6_fu_594 = ap_const_lv11_400) else "0";
    exitcond18310_fu_3306_p2 <= "1" when (loop_index9_fu_590 = ap_const_lv11_400) else "0";
    exitcond18411_fu_3209_p2 <= "1" when (loop_index12_fu_586 = ap_const_lv11_400) else "0";
    exitcond19826_fu_1900_p2 <= "1" when (empty_fu_310 = ap_const_lv5_19) else "0";
    exitcond7_fu_3549_p2 <= "1" when (loop_index_fu_602 = ap_const_lv11_400) else "0";

    f_address0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state17, tmp_205_reg_4305, ap_CS_fsm_state19, or_ln5913_reg_4356, zext_ln2817_fu_2719_p1, ap_CS_fsm_state29, and_ln188_reg_4665, tmp_reg_4669, ap_CS_fsm_state74, ap_CS_fsm_state76, ap_CS_fsm_state77, grp_poly_small_mkgauss_fu_1282_f_address0, grp_compute_public_1_fu_1352_f_address0, grp_solve_NTRU_fu_1364_f_address0, zext_ln5884_fu_2491_p1, zext_ln2760_fu_2587_p1, loop_index12_cast12_fu_3204_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            f_address0 <= loop_index12_cast12_fu_3204_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            f_address0 <= zext_ln2817_fu_2719_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            f_address0 <= zext_ln2760_fu_2587_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            f_address0 <= zext_ln5884_fu_2491_p1(10 - 1 downto 0);
        elsif (((tmp_reg_4669 = ap_const_lv1_1) and (or_ln5913_reg_4356 = ap_const_lv1_0) and (tmp_205_reg_4305 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln188_reg_4665) and (ap_const_logic_1 = ap_CS_fsm_state76))) then 
            f_address0 <= grp_solve_NTRU_fu_1364_f_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            f_address0 <= grp_compute_public_1_fu_1352_f_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            f_address0 <= grp_poly_small_mkgauss_fu_1282_f_address0;
        else 
            f_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    f_ce0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state17, tmp_205_reg_4305, ap_CS_fsm_state19, or_ln5913_reg_4356, ap_CS_fsm_state29, and_ln188_reg_4665, tmp_reg_4669, ap_CS_fsm_state74, ap_CS_fsm_state76, ap_CS_fsm_state77, grp_poly_small_mkgauss_fu_1282_f_ce0, grp_compute_public_1_fu_1352_f_ce0, grp_solve_NTRU_fu_1364_f_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            f_ce0 <= ap_const_logic_1;
        elsif (((tmp_reg_4669 = ap_const_lv1_1) and (or_ln5913_reg_4356 = ap_const_lv1_0) and (tmp_205_reg_4305 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln188_reg_4665) and (ap_const_logic_1 = ap_CS_fsm_state76))) then 
            f_ce0 <= grp_solve_NTRU_fu_1364_f_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            f_ce0 <= grp_compute_public_1_fu_1352_f_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            f_ce0 <= grp_poly_small_mkgauss_fu_1282_f_ce0;
        else 
            f_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_load_7_cast_fu_3268_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_q0),16));

    f_we0_assign_proc : process(ap_CS_fsm_state15, grp_poly_small_mkgauss_fu_1282_f_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            f_we0 <= grp_poly_small_mkgauss_fu_1282_f_we0;
        else 
            f_we0 <= ap_const_logic_0;
        end if; 
    end process;


    g_address0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state17, tmp_205_reg_4305, ap_CS_fsm_state24, or_ln5913_reg_4356, zext_ln2817_1_fu_2741_p1, ap_CS_fsm_state32, and_ln188_reg_4665, tmp_reg_4669, ap_CS_fsm_state74, ap_CS_fsm_state76, ap_CS_fsm_state85, grp_poly_small_mkgauss_fu_1282_f_address0, grp_compute_public_1_fu_1352_g_address0, grp_solve_NTRU_fu_1364_g_address0, zext_ln5884_fu_2491_p1, zext_ln2760_1_fu_2617_p1, loop_index9_cast15_fu_3301_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            g_address0 <= loop_index9_cast15_fu_3301_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            g_address0 <= zext_ln2817_1_fu_2741_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            g_address0 <= zext_ln2760_1_fu_2617_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            g_address0 <= zext_ln5884_fu_2491_p1(10 - 1 downto 0);
        elsif (((tmp_reg_4669 = ap_const_lv1_1) and (or_ln5913_reg_4356 = ap_const_lv1_0) and (tmp_205_reg_4305 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln188_reg_4665) and (ap_const_logic_1 = ap_CS_fsm_state76))) then 
            g_address0 <= grp_solve_NTRU_fu_1364_g_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            g_address0 <= grp_compute_public_1_fu_1352_g_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            g_address0 <= grp_poly_small_mkgauss_fu_1282_f_address0;
        else 
            g_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    g_ce0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state17, tmp_205_reg_4305, ap_CS_fsm_state24, or_ln5913_reg_4356, ap_CS_fsm_state32, and_ln188_reg_4665, tmp_reg_4669, ap_CS_fsm_state74, ap_CS_fsm_state76, ap_CS_fsm_state85, grp_poly_small_mkgauss_fu_1282_f_ce0, grp_compute_public_1_fu_1352_g_ce0, grp_solve_NTRU_fu_1364_g_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            g_ce0 <= ap_const_logic_1;
        elsif (((tmp_reg_4669 = ap_const_lv1_1) and (or_ln5913_reg_4356 = ap_const_lv1_0) and (tmp_205_reg_4305 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln188_reg_4665) and (ap_const_logic_1 = ap_CS_fsm_state76))) then 
            g_ce0 <= grp_solve_NTRU_fu_1364_g_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            g_ce0 <= grp_compute_public_1_fu_1352_g_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            g_ce0 <= grp_poly_small_mkgauss_fu_1282_f_ce0;
        else 
            g_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    g_load_7_cast_fu_3381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(g_q0),16));

    g_we0_assign_proc : process(ap_CS_fsm_state16, grp_poly_small_mkgauss_fu_1282_f_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            g_we0 <= grp_poly_small_mkgauss_fu_1282_f_we0;
        else 
            g_we0 <= ap_const_logic_0;
        end if; 
    end process;


    gmem0_ARVALID_assign_proc : process(ap_CS_fsm_state5, gmem0_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (gmem0_ARREADY = ap_const_logic_1))) then 
            gmem0_ARVALID <= ap_const_logic_1;
        else 
            gmem0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem0_AWADDR_assign_proc : process(ap_CS_fsm_state78, ap_CS_fsm_state86, ap_CS_fsm_state93, ap_CS_fsm_state103, ap_CS_fsm_state111, gmem0_addr_1_reg_4705, gmem0_addr_3_reg_4747, gmem0_addr_2_reg_4760, gmem0_addr_4_reg_4815, gmem0_addr_5_reg_4857, gmem0_AWREADY)
    begin
        if ((gmem0_AWREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
                gmem0_AWADDR <= gmem0_addr_5_reg_4857;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
                gmem0_AWADDR <= gmem0_addr_4_reg_4815;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
                gmem0_AWADDR <= gmem0_addr_2_reg_4760;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
                gmem0_AWADDR <= gmem0_addr_3_reg_4747;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
                gmem0_AWADDR <= gmem0_addr_1_reg_4705;
            else 
                gmem0_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem0_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem0_AWLEN_assign_proc : process(ap_CS_fsm_state78, ap_CS_fsm_state86, ap_CS_fsm_state93, ap_CS_fsm_state103, ap_CS_fsm_state111, gmem0_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state93) and (gmem0_AWREADY = ap_const_logic_1))) then 
            gmem0_AWLEN <= ap_const_lv32_400;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state111) and (gmem0_AWREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state103) and (gmem0_AWREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state86) and (gmem0_AWREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state78) and (gmem0_AWREADY = ap_const_logic_1)))) then 
            gmem0_AWLEN <= ap_const_lv32_1;
        else 
            gmem0_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem0_AWVALID_assign_proc : process(ap_CS_fsm_state78, ap_CS_fsm_state86, ap_CS_fsm_state93, ap_CS_fsm_state103, ap_CS_fsm_state111, gmem0_AWREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state111) and (gmem0_AWREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state103) and (gmem0_AWREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state93) and (gmem0_AWREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state86) and (gmem0_AWREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state78) and (gmem0_AWREADY = ap_const_logic_1)))) then 
            gmem0_AWVALID <= ap_const_logic_1;
        else 
            gmem0_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem0_BREADY_assign_proc : process(ap_CS_fsm_state84, ap_CS_fsm_state92, ap_CS_fsm_state101, ap_CS_fsm_state109, ap_CS_fsm_state117, gmem0_BVALID)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state117) and (gmem0_BVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state109) and (gmem0_BVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state101) and (gmem0_BVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state92) and (gmem0_BVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state84) and (gmem0_BVALID = ap_const_logic_1)))) then 
            gmem0_BREADY <= ap_const_logic_1;
        else 
            gmem0_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem0_RREADY_assign_proc : process(ap_CS_fsm_state12, gmem0_RVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (gmem0_RVALID = ap_const_logic_1))) then 
            gmem0_RREADY <= ap_const_logic_1;
        else 
            gmem0_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem0_WDATA_assign_proc : process(ap_CS_fsm_state79, ap_CS_fsm_state87, ap_CS_fsm_state96, ap_CS_fsm_state104, ap_CS_fsm_state112, empty_366_reg_4728, empty_374_reg_4771, h_load_reg_4784, empty_387_reg_4838, empty_395_reg_4868)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
            gmem0_WDATA <= empty_395_reg_4868;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
            gmem0_WDATA <= empty_387_reg_4838;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            gmem0_WDATA <= h_load_reg_4784;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            gmem0_WDATA <= empty_374_reg_4771;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            gmem0_WDATA <= empty_366_reg_4728;
        else 
            gmem0_WDATA <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem0_WSTRB_assign_proc : process(ap_CS_fsm_state79, ap_CS_fsm_state87, ap_CS_fsm_state96, ap_CS_fsm_state104, ap_CS_fsm_state112, empty_365_reg_4723, empty_373_reg_4766, empty_386_reg_4833, empty_394_reg_4863)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
            gmem0_WSTRB <= empty_394_reg_4863;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
            gmem0_WSTRB <= empty_386_reg_4833;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            gmem0_WSTRB <= ap_const_lv2_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            gmem0_WSTRB <= empty_373_reg_4766;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            gmem0_WSTRB <= empty_365_reg_4723;
        else 
            gmem0_WSTRB <= "XX";
        end if; 
    end process;


    gmem0_WVALID_assign_proc : process(ap_CS_fsm_state79, ap_CS_fsm_state87, ap_CS_fsm_state96, ap_CS_fsm_state104, ap_CS_fsm_state112, gmem0_WREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state112) and (gmem0_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state104) and (gmem0_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state96) and (gmem0_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state87) and (gmem0_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state79) and (gmem0_WREADY = ap_const_logic_1)))) then 
            gmem0_WVALID <= ap_const_logic_1;
        else 
            gmem0_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem0_blk_n_AR_assign_proc : process(m_axi_gmem0_ARREADY, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            gmem0_blk_n_AR <= m_axi_gmem0_ARREADY;
        else 
            gmem0_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem0_blk_n_AW_assign_proc : process(m_axi_gmem0_AWREADY, ap_CS_fsm_state78, ap_CS_fsm_state86, ap_CS_fsm_state93, ap_CS_fsm_state103, ap_CS_fsm_state111)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state103) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state78))) then 
            gmem0_blk_n_AW <= m_axi_gmem0_AWREADY;
        else 
            gmem0_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem0_blk_n_B_assign_proc : process(m_axi_gmem0_BVALID, ap_CS_fsm_state84, ap_CS_fsm_state92, ap_CS_fsm_state101, ap_CS_fsm_state109, ap_CS_fsm_state117)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state117) or (ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state84))) then 
            gmem0_blk_n_B <= m_axi_gmem0_BVALID;
        else 
            gmem0_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem0_blk_n_R_assign_proc : process(m_axi_gmem0_RVALID, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            gmem0_blk_n_R <= m_axi_gmem0_RVALID;
        else 
            gmem0_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem0_blk_n_W_assign_proc : process(m_axi_gmem0_WREADY, ap_CS_fsm_state79, ap_CS_fsm_state87, ap_CS_fsm_state96, ap_CS_fsm_state104, ap_CS_fsm_state112)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state112) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state79))) then 
            gmem0_blk_n_W <= m_axi_gmem0_WREADY;
        else 
            gmem0_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grp_FFT_fu_1324_ap_start <= grp_FFT_fu_1324_ap_start_reg;
    grp_FFT_fu_1331_ap_start <= grp_FFT_fu_1331_ap_start_reg;
    grp_compute_public_1_fu_1352_ap_start <= grp_compute_public_1_fu_1352_ap_start_reg;
    grp_fpr_of_fu_1317_ap_start <= grp_fpr_of_fu_1317_ap_start_reg;

    grp_fpr_of_fu_1317_i_assign_proc : process(sext_ln2819_reg_4394, sext_ln2819_1_reg_4417, ap_CS_fsm_state31, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fpr_of_fu_1317_i <= sext_ln2819_1_reg_4417;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fpr_of_fu_1317_i <= sext_ln2819_reg_4394;
        else 
            grp_fpr_of_fu_1317_i <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1393_p0_assign_proc : process(ap_CS_fsm_state67, ap_CS_fsm_state68, grp_fu_1422_p2, ap_CS_fsm_state38, ap_CS_fsm_state69, grp_fu_1393_p2, ap_CS_fsm_state39, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state65, grp_fu_1408_p2, ap_phi_mux_bnorm1_1_phi_fu_1262_p4, bnorm1_1_reg_1258)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_fu_1393_p0 <= grp_fu_1408_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            grp_fu_1393_p0 <= bnorm1_1_reg_1258;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            grp_fu_1393_p0 <= ap_phi_mux_bnorm1_1_phi_fu_1262_p4;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state68))) then 
            grp_fu_1393_p0 <= grp_fu_1393_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_1393_p0 <= grp_fu_1422_p2;
        else 
            grp_fu_1393_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1393_p1_assign_proc : process(ap_CS_fsm_state67, ap_CS_fsm_state68, grp_fu_1422_p2, ap_CS_fsm_state38, ap_CS_fsm_state69, grp_fu_1429_p2, ap_CS_fsm_state39, ap_CS_fsm_state71, ap_CS_fsm_state72, grp_fu_1397_p2, ap_CS_fsm_state65, bnorm4_1_reg_1222, bnorm3_1_reg_1234, bnorm2_1_reg_1246)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            grp_fu_1393_p1 <= bnorm4_1_reg_1222;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            grp_fu_1393_p1 <= bnorm3_1_reg_1234;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67))) then 
            grp_fu_1393_p1 <= grp_fu_1422_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            grp_fu_1393_p1 <= bnorm2_1_reg_1246;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_fu_1393_p1 <= grp_fu_1397_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_1393_p1 <= grp_fu_1429_p2;
        else 
            grp_fu_1393_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1397_p0_assign_proc : process(ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state38, ap_CS_fsm_state69, grp_fu_1436_p2, grp_fu_1397_p2, grp_fu_1413_p2, bnorm2_1_reg_1246)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_fu_1397_p0 <= grp_fu_1413_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            grp_fu_1397_p0 <= grp_fu_1397_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            grp_fu_1397_p0 <= bnorm2_1_reg_1246;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_1397_p0 <= grp_fu_1436_p2;
        else 
            grp_fu_1397_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1397_p1_assign_proc : process(ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state38, ap_CS_fsm_state69, grp_fu_1429_p2, grp_fu_1443_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67))) then 
            grp_fu_1397_p1 <= grp_fu_1429_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_1397_p1 <= grp_fu_1443_p2;
        else 
            grp_fu_1397_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1422_p0_assign_proc : process(rt1_q1, ap_CS_fsm_state37, ap_CS_fsm_state53, rt1_q0, ap_CS_fsm_state59, ap_CS_fsm_state66, ap_CS_fsm_state67, rt2_q1, ap_CS_fsm_state56, rt2_q0, ap_CS_fsm_state62, ap_CS_fsm_state68)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state67))) then 
            grp_fu_1422_p0 <= rt2_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            grp_fu_1422_p0 <= rt1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            grp_fu_1422_p0 <= rt2_q1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            grp_fu_1422_p0 <= rt1_q1;
        else 
            grp_fu_1422_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1422_p1_assign_proc : process(rt1_q1, ap_CS_fsm_state37, ap_CS_fsm_state53, rt1_q0, ap_CS_fsm_state59, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state56, rt2_q0, ap_CS_fsm_state62, ap_CS_fsm_state68, rt3_q0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67))) then 
            grp_fu_1422_p1 <= rt2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            grp_fu_1422_p1 <= rt1_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            grp_fu_1422_p1 <= rt3_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            grp_fu_1422_p1 <= ap_const_lv64_40C8008000000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_1422_p1 <= rt1_q1;
        else 
            grp_fu_1422_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1429_p0_assign_proc : process(rt1_q1, ap_CS_fsm_state37, rt1_q0, ap_CS_fsm_state59, ap_CS_fsm_state66, ap_CS_fsm_state67, rt2_q1, ap_CS_fsm_state62, ap_CS_fsm_state68)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state67))) then 
            grp_fu_1429_p0 <= rt2_q1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            grp_fu_1429_p0 <= rt1_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_1429_p0 <= rt1_q0;
        else 
            grp_fu_1429_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1429_p1_assign_proc : process(rt1_q1, ap_CS_fsm_state37, rt1_q0, ap_CS_fsm_state59, ap_CS_fsm_state66, ap_CS_fsm_state67, rt2_q1, ap_CS_fsm_state62, ap_CS_fsm_state68, rt3_q0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67))) then 
            grp_fu_1429_p1 <= rt2_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            grp_fu_1429_p1 <= rt1_q1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            grp_fu_1429_p1 <= rt3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_1429_p1 <= rt1_q0;
        else 
            grp_fu_1429_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1436_p0_assign_proc : process(ap_CS_fsm_state37, rt1_q0, ap_CS_fsm_state67, rt2_q1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            grp_fu_1436_p0 <= rt1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_1436_p0 <= rt2_q1;
        else 
            grp_fu_1436_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1436_p1_assign_proc : process(ap_CS_fsm_state37, rt1_q0, ap_CS_fsm_state67, rt2_q1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            grp_fu_1436_p1 <= rt1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_1436_p1 <= rt2_q1;
        else 
            grp_fu_1436_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1443_p0_assign_proc : process(rt1_q1, ap_CS_fsm_state37, ap_CS_fsm_state67, rt2_q0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            grp_fu_1443_p0 <= rt1_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_1443_p0 <= rt2_q0;
        else 
            grp_fu_1443_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1443_p1_assign_proc : process(rt1_q1, ap_CS_fsm_state37, ap_CS_fsm_state67, rt2_q0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            grp_fu_1443_p1 <= rt1_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_1443_p1 <= rt2_q0;
        else 
            grp_fu_1443_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_3630_p0 <= sext_ln2761_fu_2604_p1(8 - 1 downto 0);
    grp_fu_3630_p1 <= sext_ln2761_fu_2604_p1(8 - 1 downto 0);
    grp_fu_3639_p0 <= sext_ln2761_1_fu_2706_p1(8 - 1 downto 0);
    grp_fu_3639_p1 <= sext_ln2761_1_fu_2706_p1(8 - 1 downto 0);
    grp_iFFT_fu_1338_ap_start <= grp_iFFT_fu_1338_ap_start_reg;
    grp_iFFT_fu_1345_ap_start <= grp_iFFT_fu_1345_ap_start_reg;
    grp_poly_small_mkgauss_fu_1282_ap_start <= grp_poly_small_mkgauss_fu_1282_ap_start_reg;

    grp_poly_small_mkgauss_fu_1282_p_read_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, reg_1620, rng_st_1_fu_478)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_poly_small_mkgauss_fu_1282_p_read <= reg_1620;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_poly_small_mkgauss_fu_1282_p_read <= rng_st_1_fu_478;
        else 
            grp_poly_small_mkgauss_fu_1282_p_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_poly_small_mkgauss_fu_1282_p_read1_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, reg_1625, rng_st_7_fu_482)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_poly_small_mkgauss_fu_1282_p_read1 <= reg_1625;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_poly_small_mkgauss_fu_1282_p_read1 <= rng_st_7_fu_482;
        else 
            grp_poly_small_mkgauss_fu_1282_p_read1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_poly_small_mkgauss_fu_1282_p_read10_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, reg_1670, rng_st_62_fu_518)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_poly_small_mkgauss_fu_1282_p_read10 <= reg_1670;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_poly_small_mkgauss_fu_1282_p_read10 <= rng_st_62_fu_518;
        else 
            grp_poly_small_mkgauss_fu_1282_p_read10 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_poly_small_mkgauss_fu_1282_p_read11_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, reg_1675, rng_st_63_fu_522)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_poly_small_mkgauss_fu_1282_p_read11 <= reg_1675;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_poly_small_mkgauss_fu_1282_p_read11 <= rng_st_63_fu_522;
        else 
            grp_poly_small_mkgauss_fu_1282_p_read11 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_poly_small_mkgauss_fu_1282_p_read12_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, reg_1680, rng_st_64_fu_526)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_poly_small_mkgauss_fu_1282_p_read12 <= reg_1680;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_poly_small_mkgauss_fu_1282_p_read12 <= rng_st_64_fu_526;
        else 
            grp_poly_small_mkgauss_fu_1282_p_read12 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_poly_small_mkgauss_fu_1282_p_read13_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, reg_1685, rng_st_65_fu_530)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_poly_small_mkgauss_fu_1282_p_read13 <= reg_1685;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_poly_small_mkgauss_fu_1282_p_read13 <= rng_st_65_fu_530;
        else 
            grp_poly_small_mkgauss_fu_1282_p_read13 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_poly_small_mkgauss_fu_1282_p_read14_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, reg_1690, rng_st_66_fu_534)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_poly_small_mkgauss_fu_1282_p_read14 <= reg_1690;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_poly_small_mkgauss_fu_1282_p_read14 <= rng_st_66_fu_534;
        else 
            grp_poly_small_mkgauss_fu_1282_p_read14 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_poly_small_mkgauss_fu_1282_p_read15_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, reg_1695, rng_st_67_fu_538)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_poly_small_mkgauss_fu_1282_p_read15 <= reg_1695;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_poly_small_mkgauss_fu_1282_p_read15 <= rng_st_67_fu_538;
        else 
            grp_poly_small_mkgauss_fu_1282_p_read15 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_poly_small_mkgauss_fu_1282_p_read16_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, reg_1700, rng_st_68_fu_542)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_poly_small_mkgauss_fu_1282_p_read16 <= reg_1700;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_poly_small_mkgauss_fu_1282_p_read16 <= rng_st_68_fu_542;
        else 
            grp_poly_small_mkgauss_fu_1282_p_read16 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_poly_small_mkgauss_fu_1282_p_read17_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, reg_1705, rng_st_69_fu_546)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_poly_small_mkgauss_fu_1282_p_read17 <= reg_1705;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_poly_small_mkgauss_fu_1282_p_read17 <= rng_st_69_fu_546;
        else 
            grp_poly_small_mkgauss_fu_1282_p_read17 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_poly_small_mkgauss_fu_1282_p_read18_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, reg_1710, rng_st_70_fu_550)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_poly_small_mkgauss_fu_1282_p_read18 <= reg_1710;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_poly_small_mkgauss_fu_1282_p_read18 <= rng_st_70_fu_550;
        else 
            grp_poly_small_mkgauss_fu_1282_p_read18 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_poly_small_mkgauss_fu_1282_p_read19_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, reg_1715, rng_st_71_fu_554)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_poly_small_mkgauss_fu_1282_p_read19 <= reg_1715;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_poly_small_mkgauss_fu_1282_p_read19 <= rng_st_71_fu_554;
        else 
            grp_poly_small_mkgauss_fu_1282_p_read19 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_poly_small_mkgauss_fu_1282_p_read2_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, reg_1630, rng_st_54_fu_486)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_poly_small_mkgauss_fu_1282_p_read2 <= reg_1630;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_poly_small_mkgauss_fu_1282_p_read2 <= rng_st_54_fu_486;
        else 
            grp_poly_small_mkgauss_fu_1282_p_read2 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_poly_small_mkgauss_fu_1282_p_read20_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, reg_1720, rng_st_72_fu_558)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_poly_small_mkgauss_fu_1282_p_read20 <= reg_1720;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_poly_small_mkgauss_fu_1282_p_read20 <= rng_st_72_fu_558;
        else 
            grp_poly_small_mkgauss_fu_1282_p_read20 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_poly_small_mkgauss_fu_1282_p_read21_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, reg_1725, rng_st_73_fu_562)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_poly_small_mkgauss_fu_1282_p_read21 <= reg_1725;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_poly_small_mkgauss_fu_1282_p_read21 <= rng_st_73_fu_562;
        else 
            grp_poly_small_mkgauss_fu_1282_p_read21 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_poly_small_mkgauss_fu_1282_p_read22_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, reg_1730, rng_st_74_fu_566)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_poly_small_mkgauss_fu_1282_p_read22 <= reg_1730;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_poly_small_mkgauss_fu_1282_p_read22 <= rng_st_74_fu_566;
        else 
            grp_poly_small_mkgauss_fu_1282_p_read22 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_poly_small_mkgauss_fu_1282_p_read23_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, reg_1735, rng_st_75_fu_570)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_poly_small_mkgauss_fu_1282_p_read23 <= reg_1735;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_poly_small_mkgauss_fu_1282_p_read23 <= rng_st_75_fu_570;
        else 
            grp_poly_small_mkgauss_fu_1282_p_read23 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_poly_small_mkgauss_fu_1282_p_read24_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, reg_1740, rng_st_76_fu_574)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_poly_small_mkgauss_fu_1282_p_read24 <= reg_1740;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_poly_small_mkgauss_fu_1282_p_read24 <= rng_st_76_fu_574;
        else 
            grp_poly_small_mkgauss_fu_1282_p_read24 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_poly_small_mkgauss_fu_1282_p_read25_assign_proc : process(reg_1615, ap_CS_fsm_state15, ap_CS_fsm_state16, rng_dptr_2_fu_578)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_poly_small_mkgauss_fu_1282_p_read25 <= reg_1615;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_poly_small_mkgauss_fu_1282_p_read25 <= rng_dptr_2_fu_578;
        else 
            grp_poly_small_mkgauss_fu_1282_p_read25 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_poly_small_mkgauss_fu_1282_p_read3_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, reg_1635, rng_st_55_fu_490)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_poly_small_mkgauss_fu_1282_p_read3 <= reg_1635;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_poly_small_mkgauss_fu_1282_p_read3 <= rng_st_55_fu_490;
        else 
            grp_poly_small_mkgauss_fu_1282_p_read3 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_poly_small_mkgauss_fu_1282_p_read4_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, reg_1640, rng_st_56_fu_494)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_poly_small_mkgauss_fu_1282_p_read4 <= reg_1640;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_poly_small_mkgauss_fu_1282_p_read4 <= rng_st_56_fu_494;
        else 
            grp_poly_small_mkgauss_fu_1282_p_read4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_poly_small_mkgauss_fu_1282_p_read5_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, reg_1645, rng_st_57_fu_498)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_poly_small_mkgauss_fu_1282_p_read5 <= reg_1645;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_poly_small_mkgauss_fu_1282_p_read5 <= rng_st_57_fu_498;
        else 
            grp_poly_small_mkgauss_fu_1282_p_read5 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_poly_small_mkgauss_fu_1282_p_read6_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, reg_1650, rng_st_58_fu_502)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_poly_small_mkgauss_fu_1282_p_read6 <= reg_1650;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_poly_small_mkgauss_fu_1282_p_read6 <= rng_st_58_fu_502;
        else 
            grp_poly_small_mkgauss_fu_1282_p_read6 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_poly_small_mkgauss_fu_1282_p_read7_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, reg_1655, rng_st_59_fu_506)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_poly_small_mkgauss_fu_1282_p_read7 <= reg_1655;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_poly_small_mkgauss_fu_1282_p_read7 <= rng_st_59_fu_506;
        else 
            grp_poly_small_mkgauss_fu_1282_p_read7 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_poly_small_mkgauss_fu_1282_p_read8_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, reg_1660, rng_st_60_fu_510)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_poly_small_mkgauss_fu_1282_p_read8 <= reg_1660;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_poly_small_mkgauss_fu_1282_p_read8 <= rng_st_60_fu_510;
        else 
            grp_poly_small_mkgauss_fu_1282_p_read8 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_poly_small_mkgauss_fu_1282_p_read9_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, reg_1665, rng_st_61_fu_514)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_poly_small_mkgauss_fu_1282_p_read9 <= reg_1665;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_poly_small_mkgauss_fu_1282_p_read9 <= rng_st_61_fu_514;
        else 
            grp_poly_small_mkgauss_fu_1282_p_read9 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_solve_NTRU_fu_1364_ap_start <= grp_solve_NTRU_fu_1364_ap_start_reg;

    h_address0_assign_proc : process(ap_CS_fsm_state74, ap_CS_fsm_state94, grp_compute_public_1_fu_1352_h_address0, loop_index6_cast_fu_3414_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            h_address0 <= loop_index6_cast_fu_3414_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            h_address0 <= grp_compute_public_1_fu_1352_h_address0;
        else 
            h_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    h_ce0_assign_proc : process(ap_CS_fsm_state74, ap_CS_fsm_state94, grp_compute_public_1_fu_1352_h_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            h_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            h_ce0 <= grp_compute_public_1_fu_1352_h_ce0;
        else 
            h_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    h_ce1_assign_proc : process(ap_CS_fsm_state74, grp_compute_public_1_fu_1352_h_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            h_ce1 <= grp_compute_public_1_fu_1352_h_ce1;
        else 
            h_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    h_we0_assign_proc : process(ap_CS_fsm_state74, grp_compute_public_1_fu_1352_h_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            h_we0 <= grp_compute_public_1_fu_1352_h_we0;
        else 
            h_we0 <= ap_const_logic_0;
        end if; 
    end process;


    h_we1_assign_proc : process(ap_CS_fsm_state74, grp_compute_public_1_fu_1352_h_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            h_we1 <= grp_compute_public_1_fu_1352_h_we1;
        else 
            h_we1 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln188_1_fu_3022_p2 <= "1" when (trunc_ln188_fu_3012_p1 = ap_const_lv52_0) else "0";
    icmp_ln188_fu_3016_p2 <= "0" when (tmp_92_fu_3002_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln225_fu_2769_p2 <= "1" when (u_144_reg_1145 = ap_const_lv10_200) else "0";
    icmp_ln2760_1_fu_2622_p2 <= "1" when (u_138_reg_1112 = ap_const_lv11_400) else "0";
    icmp_ln2760_fu_2592_p2 <= "1" when (u_reg_1077 = ap_const_lv11_400) else "0";
    icmp_ln2817_1_fu_2746_p2 <= "1" when (u_142_reg_1134 = ap_const_lv11_400) else "0";
    icmp_ln2817_fu_2724_p2 <= "1" when (u_140_reg_1123 = ap_const_lv11_400) else "0";
    icmp_ln546_3_fu_2830_p2 <= "1" when (u_148_reg_1167 = ap_const_lv11_400) else "0";
    icmp_ln546_fu_2798_p2 <= "1" when (u_146_reg_1156 = ap_const_lv11_400) else "0";
    icmp_ln562_1_fu_2879_p2 <= "1" when (u_152_reg_1189 = ap_const_lv11_400) else "0";
    icmp_ln562_fu_2862_p2 <= "1" when (u_150_reg_1178 = ap_const_lv11_400) else "0";
    icmp_ln580_2_fu_2926_p2 <= "1" when (u_156_reg_1211 = ap_const_lv10_200) else "0";
    icmp_ln580_fu_2897_p2 <= "1" when (u_154_reg_1200 = ap_const_lv10_200) else "0";
    icmp_ln5884_fu_2497_p2 <= "1" when (u_014_reg_1042 = ap_const_lv11_400) else "0";
    icmp_ln5890_1_fu_2533_p2 <= "1" when (signed(f_q0) < signed(ap_const_lv8_F1)) else "0";
    icmp_ln5890_fu_2527_p2 <= "1" when (signed(tmp_206_fu_2517_p4) > signed(ap_const_lv4_0)) else "0";
    icmp_ln5891_1_fu_2555_p2 <= "1" when (signed(g_q0) < signed(ap_const_lv8_F1)) else "0";
    icmp_ln5891_fu_2549_p2 <= "1" when (signed(tmp_207_fu_2539_p4) > signed(ap_const_lv4_0)) else "0";
    icmp_ln5913_fu_2694_p2 <= "1" when (unsigned(add_ln5911_fu_2674_p2) > unsigned(ap_const_lv27_41B6)) else "0";
    icmp_ln5942_fu_2954_p2 <= "1" when (u_116_reg_1270 = ap_const_lv9_100) else "0";
    icmp_ln5990_fu_3052_p2 <= "1" when (grp_solve_NTRU_fu_1364_ap_return_0 = ap_const_lv32_0) else "0";
    icmp_ln805_fu_2104_p2 <= "1" when (u_0_fu_450 = ap_const_lv6_30) else "0";
    loop_index12_cast12_fu_3204_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index12_fu_586),64));
    loop_index3_cast18_fu_3447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index3_fu_598),64));
    loop_index6_cast_fu_3414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index6_fu_594),64));
    loop_index9_cast15_fu_3301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index9_fu_590),64));
    loop_index_cast21_fu_3544_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index_fu_602),64));
    lshr_ln809_fu_2320_p2 <= std_logic_vector(shift_right(unsigned(gmem0_addr_read_reg_4204),to_integer(unsigned('0' & zext_ln809_fu_2316_p1(16-1 downto 0)))));
    ng_1_fu_2611_p2 <= (sext_ln2765_fu_2608_p1 or ng_reg_1053);
    ng_3_fu_2713_p2 <= (sext_ln2765_1_fu_2710_p1 or ng_2_reg_1088);
    normf_fu_2642_p3 <= 
        ap_const_lv26_3FFFFFF when (tmp_208_fu_2634_p3(0) = '1') else 
        s_reg_1065;
    normg_fu_2662_p3 <= 
        ap_const_lv26_3FFFFFF when (tmp_209_fu_2654_p3(0) = '1') else 
        s_2_reg_1100;
    or_ln188_fu_3028_p2 <= (icmp_ln188_fu_3016_p2 or icmp_ln188_1_fu_3022_p2);
    or_ln5891_1_fu_2567_p2 <= (icmp_ln5891_fu_2549_p2 or icmp_ln5891_1_fu_2555_p2);
    or_ln5891_2_fu_2573_p2 <= (or_ln5891_fu_2561_p2 or or_ln5891_1_fu_2567_p2);
    or_ln5891_fu_2561_p2 <= (icmp_ln5890_fu_2527_p2 or icmp_ln5890_1_fu_2533_p2);
    or_ln5911_fu_2680_p2 <= (normg_fu_2662_p3 or normf_fu_2642_p3);
    or_ln5913_fu_2700_p2 <= (tmp_210_fu_2686_p3 or icmp_ln5913_fu_2694_p2);
        p_cast10_cast_fu_3585_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast_fu_3575_p4),64));

    p_cast13_fu_3272_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_364_reg_4699),2));
    p_cast14_fu_3288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_170_fu_3281_p3),16));
    p_cast16_fu_3385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_372_reg_4741),2));
    p_cast17_fu_3401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_171_fu_3394_p3),16));
    p_cast19_fu_3515_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_385_reg_4809),2));
    p_cast20_fu_3531_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_172_fu_3524_p3),16));
    p_cast22_fu_3604_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_393_reg_4851),2));
    p_cast23_fu_3620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_173_fu_3613_p3),16));
        p_cast4_cast_fu_3245_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast4_fu_3235_p4),64));

    p_cast4_fu_3235_p4 <= empty_363_fu_3225_p2(63 downto 1);
        p_cast6_cast_fu_3342_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast6_fu_3332_p4),64));

    p_cast6_fu_3332_p4 <= empty_371_fu_3322_p2(63 downto 1);
        p_cast8_cast_fu_3488_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast8_fu_3478_p4),64));

    p_cast8_fu_3478_p4 <= empty_384_fu_3468_p2(63 downto 1);
    p_cast_fu_3575_p4 <= empty_392_fu_3565_p2(63 downto 1);
    p_load_load_fu_1828_p1 <= empty_fu_310;
    rng_st_0_fu_314 <= ap_const_lv64_0;
    rng_st_51_0_fu_318 <= ap_const_lv64_0;
    rng_st_52_0_fu_322 <= ap_const_lv64_0;
    rng_st_53_0_fu_326 <= ap_const_lv64_0;
    rng_st_54_0_fu_330 <= ap_const_lv64_0;
    rng_st_55_0_fu_334 <= ap_const_lv64_0;
    rng_st_56_0_fu_406 <= ap_const_lv64_0;
    rng_st_57_0_load_reg_3843 <= ap_const_lv64_0;
    rng_st_58_0_load_reg_3848 <= ap_const_lv64_0;
    rng_st_59_0_load_reg_3853 <= ap_const_lv64_0;
    rng_st_60_0_load_reg_3858 <= ap_const_lv64_0;
    rng_st_61_0_load_reg_3863 <= ap_const_lv64_0;
    rng_st_62_0_load_reg_3868 <= ap_const_lv64_0;
    rng_st_63_0_load_reg_3873 <= ap_const_lv64_0;
    rng_st_64_0_load_reg_3878 <= ap_const_lv64_0;
    rng_st_65_0_load_reg_3883 <= ap_const_lv64_0;
    rng_st_66_0_fu_410 <= ap_const_lv64_0;
    rng_st_67_0_load_reg_3888 <= ap_const_lv64_0;
    rng_st_68_0_load_reg_3893 <= ap_const_lv64_0;
    rng_st_69_0_load_reg_3898 <= ap_const_lv64_0;
    rng_st_70_0_load_reg_3903 <= ap_const_lv64_0;
    rng_st_71_0_load_reg_3908 <= ap_const_lv64_0;
    rng_st_72_0_load_reg_3913 <= ap_const_lv64_0;
    rng_st_73_0_load_reg_3918 <= ap_const_lv64_0;
    rng_st_74_0_load_reg_3923 <= ap_const_lv64_0;
    rng_st_77_fu_2181_p2 <= (rng_st_66_0_fu_410 xor ap_const_lv64_8000000000000000);
    rng_st_fu_2175_p2 <= (rng_st_56_0_fu_406 xor ap_const_lv64_1F);

    rt1_address0_assign_proc : process(ap_CS_fsm_state66, zext_ln2817_reg_4376, ap_CS_fsm_state36, rt1_addr_3_reg_4463, rt1_addr_4_reg_4496, ap_CS_fsm_state58, rt1_addr_5_reg_4524, zext_ln5942_fu_2949_p1, ap_CS_fsm_state65, zext_ln5948_fu_2985_p1, grp_FFT_fu_1324_f_address0, grp_iFFT_fu_1338_f_address0, ap_CS_fsm_state31, ap_CS_fsm_state35, ap_CS_fsm_state49, ap_CS_fsm_state54, ap_CS_fsm_state60, ap_CS_fsm_state64, zext_ln228_fu_2787_p1, zext_ln580_fu_2891_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            rt1_address0 <= zext_ln5948_fu_2985_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            rt1_address0 <= zext_ln5942_fu_2949_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            rt1_address0 <= rt1_addr_5_reg_4524;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            rt1_address0 <= zext_ln580_fu_2891_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            rt1_address0 <= rt1_addr_4_reg_4496;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            rt1_address0 <= rt1_addr_3_reg_4463;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            rt1_address0 <= zext_ln228_fu_2787_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            rt1_address0 <= zext_ln2817_reg_4376(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            rt1_address0 <= grp_iFFT_fu_1338_f_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            rt1_address0 <= grp_FFT_fu_1324_f_address0;
        else 
            rt1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    rt1_address1_assign_proc : process(ap_CS_fsm_state66, zext_ln225_fu_2763_p1, ap_CS_fsm_state36, ap_CS_fsm_state48, ap_CS_fsm_state52, ap_CS_fsm_state58, rt1_addr_6_reg_4534, ap_CS_fsm_state65, zext_ln5946_fu_2972_p1, zext_ln5950_fu_2993_p1, grp_FFT_fu_1324_f_address1, grp_iFFT_fu_1338_f_address1, ap_CS_fsm_state35, ap_CS_fsm_state60, ap_CS_fsm_state64, zext_ln546_fu_2793_p1, zext_ln562_fu_2857_p1, zext_ln583_fu_2915_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            rt1_address1 <= zext_ln5950_fu_2993_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            rt1_address1 <= zext_ln5946_fu_2972_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            rt1_address1 <= rt1_addr_6_reg_4534;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            rt1_address1 <= zext_ln583_fu_2915_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            rt1_address1 <= zext_ln562_fu_2857_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            rt1_address1 <= zext_ln546_fu_2793_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            rt1_address1 <= zext_ln225_fu_2763_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            rt1_address1 <= grp_iFFT_fu_1338_f_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            rt1_address1 <= grp_FFT_fu_1324_f_address1;
        else 
            rt1_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    rt1_ce0_assign_proc : process(ap_CS_fsm_state66, ap_CS_fsm_state36, ap_CS_fsm_state58, ap_CS_fsm_state65, grp_fpr_of_fu_1317_ap_done, grp_FFT_fu_1324_f_ce0, grp_iFFT_fu_1338_f_ce0, ap_CS_fsm_state31, ap_CS_fsm_state35, ap_CS_fsm_state49, ap_CS_fsm_state54, ap_CS_fsm_state60, ap_CS_fsm_state64)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state49) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (grp_fpr_of_fu_1317_ap_done = ap_const_logic_1)))) then 
            rt1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            rt1_ce0 <= grp_iFFT_fu_1338_f_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            rt1_ce0 <= grp_FFT_fu_1324_f_ce0;
        else 
            rt1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rt1_ce1_assign_proc : process(ap_CS_fsm_state66, ap_CS_fsm_state36, ap_CS_fsm_state48, ap_CS_fsm_state52, ap_CS_fsm_state58, ap_CS_fsm_state65, grp_FFT_fu_1324_f_ce1, grp_iFFT_fu_1338_f_ce1, ap_CS_fsm_state35, ap_CS_fsm_state60, ap_CS_fsm_state64)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state60))) then 
            rt1_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            rt1_ce1 <= grp_iFFT_fu_1338_f_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            rt1_ce1 <= grp_FFT_fu_1324_f_ce1;
        else 
            rt1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    rt1_d0_assign_proc : process(grp_fu_1422_p2, grp_fpr_of_fu_1317_ap_return, grp_FFT_fu_1324_f_d0, grp_iFFT_fu_1338_f_d0, ap_CS_fsm_state31, ap_CS_fsm_state35, ap_CS_fsm_state49, ap_CS_fsm_state54, ap_CS_fsm_state60, ap_CS_fsm_state64, bitcast_ln147_1_fu_2820_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state54))) then 
            rt1_d0 <= grp_fu_1422_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            rt1_d0 <= bitcast_ln147_1_fu_2820_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            rt1_d0 <= grp_fpr_of_fu_1317_ap_return;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            rt1_d0 <= grp_iFFT_fu_1338_f_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            rt1_d0 <= grp_FFT_fu_1324_f_d0;
        else 
            rt1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    rt1_d1_assign_proc : process(grp_fu_1429_p2, grp_FFT_fu_1324_f_d1, grp_iFFT_fu_1338_f_d1, ap_CS_fsm_state35, ap_CS_fsm_state60, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            rt1_d1 <= grp_fu_1429_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            rt1_d1 <= grp_iFFT_fu_1338_f_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            rt1_d1 <= grp_FFT_fu_1324_f_d1;
        else 
            rt1_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    rt1_we0_assign_proc : process(grp_fpr_of_fu_1317_ap_done, grp_FFT_fu_1324_f_we0, grp_iFFT_fu_1338_f_we0, ap_CS_fsm_state31, ap_CS_fsm_state35, ap_CS_fsm_state49, ap_CS_fsm_state54, ap_CS_fsm_state60, ap_CS_fsm_state64)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state49) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (grp_fpr_of_fu_1317_ap_done = ap_const_logic_1)))) then 
            rt1_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            rt1_we0 <= grp_iFFT_fu_1338_f_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            rt1_we0 <= grp_FFT_fu_1324_f_we0;
        else 
            rt1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    rt1_we1_assign_proc : process(grp_FFT_fu_1324_f_we1, grp_iFFT_fu_1338_f_we1, ap_CS_fsm_state35, ap_CS_fsm_state60, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            rt1_we1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            rt1_we1 <= grp_iFFT_fu_1338_f_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            rt1_we1 <= grp_FFT_fu_1324_f_we1;
        else 
            rt1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    rt2_address0_assign_proc : process(ap_CS_fsm_state66, ap_CS_fsm_state67, zext_ln2817_1_reg_4399, ap_CS_fsm_state36, rt2_addr_3_reg_4477, rt2_addr_4_reg_4510, ap_CS_fsm_state61, rt2_addr_5_reg_4547, icmp_ln580_2_fu_2926_p2, zext_ln5942_reg_4562, zext_ln5948_reg_4605, grp_FFT_fu_1331_f_address0, grp_iFFT_fu_1345_f_address0, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state51, ap_CS_fsm_state57, ap_CS_fsm_state63, ap_CS_fsm_state64, zext_ln228_fu_2787_p1, zext_ln580_1_fu_2920_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            rt2_address0 <= zext_ln5948_reg_4605(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            rt2_address0 <= zext_ln5942_reg_4562(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            rt2_address0 <= rt2_addr_5_reg_4547;
        elsif (((icmp_ln580_2_fu_2926_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state61))) then 
            rt2_address0 <= zext_ln580_1_fu_2920_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            rt2_address0 <= rt2_addr_4_reg_4510;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            rt2_address0 <= rt2_addr_3_reg_4477;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            rt2_address0 <= zext_ln228_fu_2787_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            rt2_address0 <= zext_ln2817_1_reg_4399(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            rt2_address0 <= grp_iFFT_fu_1345_f_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            rt2_address0 <= grp_FFT_fu_1331_f_address0;
        else 
            rt2_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    rt2_address1_assign_proc : process(ap_CS_fsm_state66, ap_CS_fsm_state67, zext_ln225_fu_2763_p1, ap_CS_fsm_state36, ap_CS_fsm_state50, ap_CS_fsm_state55, ap_CS_fsm_state61, icmp_ln580_2_fu_2926_p2, rt2_addr_6_reg_4557, zext_ln5946_reg_4585, zext_ln5950_reg_4615, grp_FFT_fu_1331_f_address1, grp_iFFT_fu_1345_f_address1, ap_CS_fsm_state35, ap_CS_fsm_state63, ap_CS_fsm_state64, zext_ln546_1_fu_2825_p1, zext_ln562_1_fu_2874_p1, zext_ln583_4_fu_2944_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            rt2_address1 <= zext_ln5950_reg_4615(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            rt2_address1 <= zext_ln5946_reg_4585(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            rt2_address1 <= rt2_addr_6_reg_4557;
        elsif (((icmp_ln580_2_fu_2926_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state61))) then 
            rt2_address1 <= zext_ln583_4_fu_2944_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            rt2_address1 <= zext_ln562_1_fu_2874_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            rt2_address1 <= zext_ln546_1_fu_2825_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            rt2_address1 <= zext_ln225_fu_2763_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            rt2_address1 <= grp_iFFT_fu_1345_f_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            rt2_address1 <= grp_FFT_fu_1331_f_address1;
        else 
            rt2_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    rt2_ce0_assign_proc : process(ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state36, ap_CS_fsm_state61, icmp_ln580_2_fu_2926_p2, grp_fpr_of_fu_1317_ap_done, grp_FFT_fu_1331_f_ce0, grp_iFFT_fu_1345_f_ce0, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state51, ap_CS_fsm_state57, ap_CS_fsm_state63, ap_CS_fsm_state64)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state51) or ((icmp_ln580_2_fu_2926_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state61)) or ((ap_const_logic_1 = ap_CS_fsm_state34) and (grp_fpr_of_fu_1317_ap_done = ap_const_logic_1)))) then 
            rt2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            rt2_ce0 <= grp_iFFT_fu_1345_f_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            rt2_ce0 <= grp_FFT_fu_1331_f_ce0;
        else 
            rt2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rt2_ce1_assign_proc : process(ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state36, ap_CS_fsm_state50, ap_CS_fsm_state55, ap_CS_fsm_state61, icmp_ln580_2_fu_2926_p2, grp_FFT_fu_1331_f_ce1, grp_iFFT_fu_1345_f_ce1, ap_CS_fsm_state35, ap_CS_fsm_state63, ap_CS_fsm_state64)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state63) or ((icmp_ln580_2_fu_2926_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state61)))) then 
            rt2_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            rt2_ce1 <= grp_iFFT_fu_1345_f_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            rt2_ce1 <= grp_FFT_fu_1331_f_ce1;
        else 
            rt2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    rt2_d0_assign_proc : process(grp_fu_1422_p2, grp_fpr_of_fu_1317_ap_return, grp_FFT_fu_1331_f_d0, grp_iFFT_fu_1345_f_d0, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state51, ap_CS_fsm_state57, ap_CS_fsm_state63, ap_CS_fsm_state64, bitcast_ln147_3_fu_2852_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            rt2_d0 <= grp_fu_1422_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            rt2_d0 <= bitcast_ln147_3_fu_2852_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            rt2_d0 <= grp_fpr_of_fu_1317_ap_return;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            rt2_d0 <= grp_iFFT_fu_1345_f_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            rt2_d0 <= grp_FFT_fu_1331_f_d0;
        else 
            rt2_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    rt2_d1_assign_proc : process(grp_fu_1429_p2, grp_FFT_fu_1331_f_d1, grp_iFFT_fu_1345_f_d1, ap_CS_fsm_state35, ap_CS_fsm_state63, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            rt2_d1 <= grp_fu_1429_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            rt2_d1 <= grp_iFFT_fu_1345_f_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            rt2_d1 <= grp_FFT_fu_1331_f_d1;
        else 
            rt2_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    rt2_we0_assign_proc : process(grp_fpr_of_fu_1317_ap_done, grp_FFT_fu_1331_f_we0, grp_iFFT_fu_1345_f_we0, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state51, ap_CS_fsm_state57, ap_CS_fsm_state63, ap_CS_fsm_state64)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state51) or ((ap_const_logic_1 = ap_CS_fsm_state34) and (grp_fpr_of_fu_1317_ap_done = ap_const_logic_1)))) then 
            rt2_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            rt2_we0 <= grp_iFFT_fu_1345_f_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            rt2_we0 <= grp_FFT_fu_1331_f_we0;
        else 
            rt2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    rt2_we1_assign_proc : process(grp_FFT_fu_1331_f_we1, grp_iFFT_fu_1345_f_we1, ap_CS_fsm_state35, ap_CS_fsm_state63, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            rt2_we1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            rt2_we1 <= grp_iFFT_fu_1345_f_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            rt2_we1 <= grp_FFT_fu_1331_f_we1;
        else 
            rt2_we1 <= ap_const_logic_0;
        end if; 
    end process;


    rt3_address0_assign_proc : process(zext_ln225_reg_4422, ap_CS_fsm_state58, ap_CS_fsm_state61, ap_CS_fsm_state47, zext_ln580_fu_2891_p1, zext_ln580_1_fu_2920_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            rt3_address0 <= zext_ln580_1_fu_2920_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            rt3_address0 <= zext_ln580_fu_2891_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            rt3_address0 <= zext_ln225_reg_4422(10 - 1 downto 0);
        else 
            rt3_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    rt3_ce0_assign_proc : process(ap_CS_fsm_state58, ap_CS_fsm_state61, ap_CS_fsm_state47)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state47))) then 
            rt3_ce0 <= ap_const_logic_1;
        else 
            rt3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rt3_we0_assign_proc : process(ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            rt3_we0 <= ap_const_logic_1;
        else 
            rt3_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln2761_1_fu_2706_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(g_q0),16));

        sext_ln2761_fu_2604_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(f_q0),16));

        sext_ln2765_1_fu_2710_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_3639_p3),32));

        sext_ln2765_fu_2608_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_3630_p3),32));

        sext_ln2819_1_fu_2758_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(g_q0),64));

        sext_ln2819_fu_2736_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(f_q0),64));

        sext_ln5861_1_fu_2670_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(normg_fu_2662_p3),27));

        sext_ln5861_fu_2650_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(normf_fu_2642_p3),27));

        sext_ln5950_fu_2990_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln5946_reg_4580),10));

        sext_ln6002_fu_3366_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_3357_p4),64));

        sext_ln809_fu_2131_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln809_1_fu_2121_p4),64));

    shl_ln809_1_fu_2333_p2 <= std_logic_vector(shift_left(unsigned(u_0_fu_450),to_integer(unsigned('0' & ap_const_lv6_3(6-1 downto 0)))));
    shl_ln809_fu_2342_p2 <= std_logic_vector(shift_left(unsigned(zext_ln809_1_fu_2329_p1),to_integer(unsigned('0' & zext_ln809_2_fu_2338_p1(31-1 downto 0)))));
    shl_ln_fu_2308_p3 <= (xor_ln809_fu_2303_p2 & ap_const_lv3_0);
    test_1_fu_2579_p3 <= 
        ap_const_lv32_FFFFFFFF when (or_ln5891_2_fu_2573_p2(0) = '1') else 
        test_reg_1030;
    tmp_170_fu_3281_p3 <= (empty_364_reg_4699 & ap_const_lv3_0);
    tmp_171_fu_3394_p3 <= (empty_372_reg_4741 & ap_const_lv3_0);
    tmp_172_fu_3524_p3 <= (empty_385_reg_4809 & ap_const_lv3_0);
    tmp_173_fu_3613_p3 <= (empty_393_reg_4851 & ap_const_lv3_0);
    tmp_205_fu_2509_p3 <= test_reg_1030(31 downto 31);
    tmp_206_fu_2517_p4 <= f_q0(7 downto 4);
    tmp_207_fu_2539_p4 <= g_q0(7 downto 4);
    tmp_208_fu_2634_p3 <= ng_reg_1053(31 downto 31);
    tmp_209_fu_2654_p3 <= ng_2_reg_1088(31 downto 31);
    tmp_210_fu_2686_p3 <= or_ln5911_fu_2680_p2(25 downto 25);
    tmp_92_fu_3002_p4 <= bitcast_ln188_fu_2998_p1(62 downto 52);
    tmp_s_fu_2151_p7 <= u_0_fu_450(5 downto 3);
    trunc_ln188_fu_3012_p1 <= bitcast_ln188_fu_2998_p1(52 - 1 downto 0);
    trunc_ln805_fu_2037_p1 <= seed_read_reg_3805(1 - 1 downto 0);
    trunc_ln809_1_fu_2121_p4 <= add_ln809_fu_2116_p2(63 downto 1);
    trunc_ln809_2_fu_2325_p1 <= lshr_ln809_fu_2320_p2(8 - 1 downto 0);
    trunc_ln809_fu_2300_p1 <= u_0_fu_450(1 - 1 downto 0);
    trunc_ln_fu_3357_p4 <= h_out_read_reg_3811(63 downto 1);
    u_215_fu_2503_p2 <= std_logic_vector(unsigned(u_014_reg_1042) + unsigned(ap_const_lv11_1));
    u_216_fu_2598_p2 <= std_logic_vector(unsigned(u_reg_1077) + unsigned(ap_const_lv11_1));
    u_217_fu_2628_p2 <= std_logic_vector(unsigned(u_138_reg_1112) + unsigned(ap_const_lv11_1));
    u_218_fu_2730_p2 <= std_logic_vector(unsigned(u_140_reg_1123) + unsigned(ap_const_lv11_1));
    u_219_fu_2752_p2 <= std_logic_vector(unsigned(u_142_reg_1134) + unsigned(ap_const_lv11_1));
    u_220_fu_2775_p2 <= std_logic_vector(unsigned(u_144_reg_1145) + unsigned(ap_const_lv10_1));
    u_221_fu_2804_p2 <= std_logic_vector(unsigned(u_146_reg_1156) + unsigned(ap_const_lv11_1));
    u_222_fu_2836_p2 <= std_logic_vector(unsigned(u_148_reg_1167) + unsigned(ap_const_lv11_1));
    u_223_fu_2868_p2 <= std_logic_vector(unsigned(u_150_reg_1178) + unsigned(ap_const_lv11_1));
    u_224_fu_2885_p2 <= std_logic_vector(unsigned(u_152_reg_1189) + unsigned(ap_const_lv11_1));
    u_225_fu_2903_p2 <= std_logic_vector(unsigned(u_154_reg_1200) + unsigned(ap_const_lv10_1));
    u_226_fu_2932_p2 <= std_logic_vector(unsigned(u_156_reg_1211) + unsigned(ap_const_lv10_1));
    u_227_fu_2960_p2 <= std_logic_vector(unsigned(u_116_reg_1270) + unsigned(ap_const_lv9_1));
    xor_ln147_3_fu_2846_p2 <= (bitcast_ln147_2_fu_2842_p1 xor ap_const_lv64_8000000000000000);
    xor_ln147_fu_2814_p2 <= (bitcast_ln147_fu_2810_p1 xor ap_const_lv64_8000000000000000);
    xor_ln228_fu_2781_p2 <= (u_144_reg_1145 xor ap_const_lv10_200);
    xor_ln583_1_fu_2938_p2 <= (u_156_reg_1211 xor ap_const_lv10_200);
    xor_ln583_fu_2909_p2 <= (u_154_reg_1200 xor ap_const_lv10_200);
    xor_ln5946_fu_2966_p2 <= (u_116_reg_1270 xor ap_const_lv9_100);
    xor_ln809_1_fu_2348_p2 <= (tmp_s_reg_4011 xor shl_ln809_fu_2342_p2);
    xor_ln809_fu_2303_p2 <= (trunc_ln809_fu_2300_p1 xor trunc_ln805_reg_3985);
    zext_ln225_fu_2763_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_144_reg_1145),64));
    zext_ln228_fu_2787_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln228_fu_2781_p2),64));
    zext_ln2760_1_fu_2617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_138_reg_1112),64));
    zext_ln2760_fu_2587_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_reg_1077),64));
    zext_ln2817_1_fu_2741_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_142_reg_1134),64));
    zext_ln2817_fu_2719_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_140_reg_1123),64));
    zext_ln546_1_fu_2825_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_148_reg_1167),64));
    zext_ln546_fu_2793_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_146_reg_1156),64));
    zext_ln562_1_fu_2874_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_152_reg_1189),64));
    zext_ln562_fu_2857_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_150_reg_1178),64));
    zext_ln580_1_fu_2920_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_156_reg_1211),64));
    zext_ln580_fu_2891_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_154_reg_1200),64));
    zext_ln583_4_fu_2944_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln583_1_fu_2938_p2),64));
    zext_ln583_fu_2915_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln583_fu_2909_p2),64));
    zext_ln5884_fu_2491_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_014_reg_1042),64));
    zext_ln5942_fu_2949_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_116_reg_1270),64));
    zext_ln5946_fu_2972_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln5946_fu_2966_p2),64));
    zext_ln5948_cast_fu_2977_p3 <= (ap_const_lv1_1 & u_116_reg_1270);
    zext_ln5948_fu_2985_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln5948_cast_fu_2977_p3),64));
    zext_ln5950_fu_2993_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln5950_fu_2990_p1),64));
    zext_ln805_fu_2100_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_0_fu_450),64));
    zext_ln809_1_fu_2329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln809_2_fu_2325_p1),64));
    zext_ln809_2_fu_2338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln809_1_fu_2333_p2),64));
    zext_ln809_fu_2316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_2308_p3),16));
end behav;
