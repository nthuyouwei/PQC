-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity keygen_modp_NTT2_ext_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    vla18_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    vla18_ce0 : OUT STD_LOGIC;
    vla18_we0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    vla18_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    vla18_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    vla18_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    vla18_ce1 : OUT STD_LOGIC;
    vla18_we1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    vla18_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    vla18_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    a : IN STD_LOGIC_VECTOR (14 downto 0);
    stride : IN STD_LOGIC_VECTOR (7 downto 0);
    gm : IN STD_LOGIC_VECTOR (14 downto 0);
    logn : IN STD_LOGIC_VECTOR (31 downto 0);
    p : IN STD_LOGIC_VECTOR (24 downto 0);
    p0i : IN STD_LOGIC_VECTOR (30 downto 0) );
end;


architecture behav of keygen_modp_NTT2_ext_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv63_1 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv25_1FFFFFF : STD_LOGIC_VECTOR (24 downto 0) := "1111111111111111111111111";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal stride_cast2_fu_212_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal stride_cast2_reg_571 : STD_LOGIC_VECTOR (63 downto 0);
    signal p0i_cast_fu_216_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p0i_cast_reg_576 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast_cast_cast_cast_fu_224_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast_cast_cast_cast_reg_581 : STD_LOGIC_VECTOR (31 downto 0);
    signal stride_cast_fu_228_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal stride_cast_reg_587 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln1226_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1226_reg_593 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_fu_242_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal n_reg_611 : STD_LOGIC_VECTOR (63 downto 0);
    signal ht_fu_266_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal ht_reg_622 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln1231_fu_261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln1235_fu_276_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1235_reg_627 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1233_1_reg_632 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln1241_fu_290_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln1241_reg_637 : STD_LOGIC_VECTOR (12 downto 0);
    signal u_fu_299_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal u_reg_645 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal lshr_ln_reg_650 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln1236_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1236_fu_337_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal s_reg_670 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_544_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln1242_reg_675 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_549_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln1243_reg_680 : STD_LOGIC_VECTOR (12 downto 0);
    signal v_fu_369_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal v_reg_688 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal vla18_addr_318_reg_693 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln1244_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal vla18_addr_319_reg_699 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln1244_1_fu_445_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln1244_1_reg_704 : STD_LOGIC_VECTOR (63 downto 0);
    signal v1_3_fu_450_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln697_fu_538_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln697_reg_714 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal y_modp_montymul_fu_200_ap_ready : STD_LOGIC;
    signal y_modp_montymul_fu_200_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal v1_reg_155 : STD_LOGIC_VECTOR (63 downto 0);
    signal u_07_reg_167 : STD_LOGIC_VECTOR (63 downto 0);
    signal v_03_reg_178 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal idx_reg_189 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1241_fu_360_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1247_fu_425_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1248_fu_440_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_fu_78 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_fu_82 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_12_fu_346_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_cast_cast_fu_220_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_cast_cast_cast_fu_220_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln1229_fu_238_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1241_1_fu_305_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln1241_fu_309_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln_fu_314_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln1241_1_fu_322_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln1244_fu_375_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln1238_fu_379_p2 : STD_LOGIC_VECTOR (12 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln1238_fu_379_p2 : signal is "no";
    signal shl_ln68_fu_384_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln1238_2_fu_397_p2 : STD_LOGIC_VECTOR (12 downto 0);
    attribute use_dsp48 of add_ln1238_2_fu_397_p2 : signal is "no";
    signal shl_ln1238_1_fu_402_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal r1_fu_392_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal lshr_ln66_fu_415_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal r2_fu_410_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal lshr_ln67_fu_430_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln685_fu_456_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln685_fu_461_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_467_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln685_fu_475_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal and_ln685_fu_483_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal and_ln685_fu_483_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln685_fu_488_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln685_fu_492_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln697_fu_503_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_194_fu_509_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln697_fu_517_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal and_ln697_fu_525_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal and_ln697_fu_525_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln697_fu_530_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln697_fu_534_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_544_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_549_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_549_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component keygen_modp_montymul IS
    port (
        ap_ready : OUT STD_LOGIC;
        a : IN STD_LOGIC_VECTOR (31 downto 0);
        b : IN STD_LOGIC_VECTOR (31 downto 0);
        p : IN STD_LOGIC_VECTOR (31 downto 0);
        p0i : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component keygen_mul_mul_13s_8ns_13_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;



begin
    y_modp_montymul_fu_200 : component keygen_modp_montymul
    port map (
        ap_ready => y_modp_montymul_fu_200_ap_ready,
        a => vla18_q0,
        b => s_reg_670,
        p => p_cast_cast_cast_cast_reg_581,
        p0i => p0i_cast_reg_576,
        ap_return => y_modp_montymul_fu_200_ap_return);

    mul_mul_13s_8ns_13_4_1_U187 : component keygen_mul_mul_13s_8ns_13_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 13,
        din1_WIDTH => 8,
        dout_WIDTH => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => trunc_ln1236_fu_337_p1,
        din1 => grp_fu_544_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_544_p2);

    mul_mul_13s_8ns_13_4_1_U188 : component keygen_mul_mul_13s_8ns_13_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 13,
        din1_WIDTH => 8,
        dout_WIDTH => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_549_p0,
        din1 => grp_fu_549_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_549_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    idx_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                idx_reg_189 <= add_ln1244_1_reg_704;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                idx_reg_189 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    m_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1226_fu_232_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                m_fu_82 <= ap_const_lv64_1;
            elsif (((icmp_ln1236_fu_294_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                m_fu_82 <= m_12_fu_346_p2;
            end if; 
        end if;
    end process;

    t_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1226_fu_232_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                t_fu_78 <= n_fu_242_p2;
            elsif (((icmp_ln1236_fu_294_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                t_fu_78 <= zext_ln1235_reg_627;
            end if; 
        end if;
    end process;

    u_07_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln1244_fu_364_p2 = ap_const_lv1_1))) then 
                u_07_reg_167 <= u_reg_645;
            elsif (((icmp_ln1231_fu_261_p2 = ap_const_lv1_1) and (icmp_ln1226_reg_593 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                u_07_reg_167 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    v1_reg_155_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln1244_fu_364_p2 = ap_const_lv1_1))) then 
                v1_reg_155 <= v1_3_fu_450_p2;
            elsif (((icmp_ln1231_fu_261_p2 = ap_const_lv1_1) and (icmp_ln1226_reg_593 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                v1_reg_155 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    v_03_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                v_03_reg_178 <= v_reg_688;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                v_03_reg_178 <= ap_const_lv63_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln1244_fu_364_p2 = ap_const_lv1_0))) then
                add_ln1244_1_reg_704 <= add_ln1244_1_fu_445_p2;
                vla18_addr_318_reg_693 <= zext_ln1247_fu_425_p1(13 - 1 downto 0);
                vla18_addr_319_reg_699 <= zext_ln1248_fu_440_p1(13 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln697_reg_714 <= add_ln697_fu_538_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1231_fu_261_p2 = ap_const_lv1_1) and (icmp_ln1226_reg_593 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                ht_reg_622 <= t_fu_78(63 downto 1);
                trunc_ln1233_1_reg_632 <= t_fu_78(13 downto 1);
                trunc_ln1241_reg_637 <= trunc_ln1241_fu_290_p1;
                    zext_ln1235_reg_627(62 downto 0) <= zext_ln1235_fu_276_p1(62 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                icmp_ln1226_reg_593 <= icmp_ln1226_fu_232_p2;
                    p0i_cast_reg_576(30 downto 0) <= p0i_cast_fu_216_p1(30 downto 0);
                    p_cast_cast_cast_cast_reg_581(30 downto 0) <= p_cast_cast_cast_cast_fu_224_p1(30 downto 0);
                    stride_cast2_reg_571(7 downto 0) <= stride_cast2_fu_212_p1(7 downto 0);
                    stride_cast_reg_587(7 downto 0) <= stride_cast_fu_228_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1236_fu_294_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                lshr_ln_reg_650 <= add_ln1241_1_fu_322_p2(14 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                mul_ln1242_reg_675 <= grp_fu_544_p2;
                mul_ln1243_reg_680 <= grp_fu_549_p2;
                s_reg_670 <= vla18_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1226_fu_232_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                n_reg_611 <= n_fu_242_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                u_reg_645 <= u_fu_299_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                v_reg_688 <= v_fu_369_p2;
            end if;
        end if;
    end process;
    stride_cast2_reg_571(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    p0i_cast_reg_576(31) <= '0';
    p_cast_cast_cast_cast_reg_581(31) <= '0';
    stride_cast_reg_587(12 downto 8) <= "00000";
    zext_ln1235_reg_627(63) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln1226_reg_593, ap_CS_fsm_state2, icmp_ln1231_fu_261_p2, ap_CS_fsm_state3, icmp_ln1236_fu_294_p2, ap_CS_fsm_state7, icmp_ln1244_fu_364_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and ((icmp_ln1231_fu_261_p2 = ap_const_lv1_0) or (icmp_ln1226_reg_593 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln1236_fu_294_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln1244_fu_364_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    add_ln1238_2_fu_397_p2 <= std_logic_vector(unsigned(trunc_ln1244_fu_375_p1) + unsigned(mul_ln1243_reg_680));
    add_ln1238_fu_379_p2 <= std_logic_vector(unsigned(trunc_ln1244_fu_375_p1) + unsigned(mul_ln1242_reg_675));
    add_ln1241_1_fu_322_p2 <= std_logic_vector(unsigned(shl_ln_fu_314_p3) + unsigned(gm));
    add_ln1241_fu_309_p2 <= std_logic_vector(unsigned(trunc_ln1241_1_fu_305_p1) + unsigned(trunc_ln1241_reg_637));
    add_ln1244_1_fu_445_p2 <= std_logic_vector(unsigned(idx_reg_189) + unsigned(stride_cast2_reg_571));
    add_ln685_fu_461_p2 <= std_logic_vector(unsigned(y_modp_montymul_fu_200_ap_return) + unsigned(sub_ln685_fu_456_p2));
    add_ln697_fu_538_p2 <= std_logic_vector(unsigned(zext_ln697_fu_534_p1) + unsigned(sub_ln697_fu_503_p2));
    and_ln685_fu_483_p1 <= p;
    and_ln685_fu_483_p2 <= (select_ln685_fu_475_p3 and and_ln685_fu_483_p1);
    and_ln697_fu_525_p1 <= p;
    and_ln697_fu_525_p2 <= (select_ln697_fu_517_p3 and and_ln697_fu_525_p1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln1226_reg_593, ap_CS_fsm_state2, icmp_ln1231_fu_261_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and ((icmp_ln1231_fu_261_p2 = ap_const_lv1_0) or (icmp_ln1226_reg_593 = ap_const_lv1_1))) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln1226_reg_593, ap_CS_fsm_state2, icmp_ln1231_fu_261_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and ((icmp_ln1231_fu_261_p2 = ap_const_lv1_0) or (icmp_ln1226_reg_593 = ap_const_lv1_1)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_544_p1 <= stride_cast_reg_587(8 - 1 downto 0);
    grp_fu_549_p0 <= std_logic_vector(signed(trunc_ln1236_fu_337_p1) + signed(trunc_ln1233_1_reg_632));
    grp_fu_549_p1 <= stride_cast_reg_587(8 - 1 downto 0);
    ht_fu_266_p4 <= t_fu_78(63 downto 1);
    icmp_ln1226_fu_232_p2 <= "1" when (logn = ap_const_lv32_0) else "0";
    icmp_ln1231_fu_261_p2 <= "1" when (unsigned(m_fu_82) < unsigned(n_reg_611)) else "0";
    icmp_ln1236_fu_294_p2 <= "1" when (u_07_reg_167 = m_fu_82) else "0";
    icmp_ln1244_fu_364_p2 <= "1" when (v_03_reg_178 = ht_reg_622) else "0";
    lshr_ln66_fu_415_p4 <= r1_fu_392_p2(14 downto 2);
    lshr_ln67_fu_430_p4 <= r2_fu_410_p2(14 downto 2);
    m_12_fu_346_p2 <= std_logic_vector(shift_left(unsigned(m_fu_82),to_integer(unsigned('0' & ap_const_lv64_1(31-1 downto 0)))));
    n_fu_242_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_1),to_integer(unsigned('0' & zext_ln1229_fu_238_p1(31-1 downto 0)))));
    p0i_cast_fu_216_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p0i),32));
    p_cast_cast_cast_cast_fu_224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_cast_cast_cast_fu_220_p1),32));
    p_cast_cast_cast_fu_220_p0 <= p;
        p_cast_cast_cast_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast_cast_cast_fu_220_p0),31));

    r1_fu_392_p2 <= std_logic_vector(unsigned(shl_ln68_fu_384_p3) + unsigned(a));
    r2_fu_410_p2 <= std_logic_vector(unsigned(shl_ln1238_1_fu_402_p3) + unsigned(a));
    select_ln685_fu_475_p3 <= 
        ap_const_lv25_1FFFFFF when (tmp_fu_467_p3(0) = '1') else 
        ap_const_lv25_0;
    select_ln697_fu_517_p3 <= 
        ap_const_lv25_1FFFFFF when (tmp_194_fu_509_p3(0) = '1') else 
        ap_const_lv25_0;
        sext_ln685_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(and_ln685_fu_483_p2),31));

        sext_ln697_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(and_ln697_fu_525_p2),31));

    shl_ln1238_1_fu_402_p3 <= (add_ln1238_2_fu_397_p2 & ap_const_lv2_0);
    shl_ln68_fu_384_p3 <= (add_ln1238_fu_379_p2 & ap_const_lv2_0);
    shl_ln_fu_314_p3 <= (add_ln1241_fu_309_p2 & ap_const_lv2_0);
    stride_cast2_fu_212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(stride),64));
    stride_cast_fu_228_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(stride),13));
    sub_ln685_fu_456_p2 <= std_logic_vector(unsigned(vla18_q1) - unsigned(p_cast_cast_cast_cast_reg_581));
    sub_ln697_fu_503_p2 <= std_logic_vector(unsigned(vla18_q1) - unsigned(y_modp_montymul_fu_200_ap_return));
    tmp_194_fu_509_p3 <= sub_ln697_fu_503_p2(31 downto 31);
    tmp_fu_467_p3 <= add_ln685_fu_461_p2(31 downto 31);
    trunc_ln1236_fu_337_p1 <= v1_reg_155(13 - 1 downto 0);
    trunc_ln1241_1_fu_305_p1 <= u_07_reg_167(13 - 1 downto 0);
    trunc_ln1241_fu_290_p1 <= m_fu_82(13 - 1 downto 0);
    trunc_ln1244_fu_375_p1 <= idx_reg_189(13 - 1 downto 0);
    u_fu_299_p2 <= std_logic_vector(unsigned(u_07_reg_167) + unsigned(ap_const_lv64_1));
    v1_3_fu_450_p2 <= std_logic_vector(unsigned(t_fu_78) + unsigned(v1_reg_155));
    v_fu_369_p2 <= std_logic_vector(unsigned(v_03_reg_178) + unsigned(ap_const_lv63_1));

    vla18_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, vla18_addr_319_reg_699, ap_CS_fsm_state9, zext_ln1241_fu_360_p1, zext_ln1248_fu_440_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            vla18_address0 <= vla18_addr_319_reg_699;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            vla18_address0 <= zext_ln1248_fu_440_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            vla18_address0 <= zext_ln1241_fu_360_p1(13 - 1 downto 0);
        else 
            vla18_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    vla18_address1_assign_proc : process(ap_CS_fsm_state7, vla18_addr_318_reg_693, ap_CS_fsm_state8, zext_ln1247_fu_425_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            vla18_address1 <= vla18_addr_318_reg_693;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            vla18_address1 <= zext_ln1247_fu_425_p1(13 - 1 downto 0);
        else 
            vla18_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    vla18_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            vla18_ce0 <= ap_const_logic_1;
        else 
            vla18_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    vla18_ce1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            vla18_ce1 <= ap_const_logic_1;
        else 
            vla18_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    vla18_d0 <= add_ln697_reg_714;
    vla18_d1 <= std_logic_vector(unsigned(zext_ln685_fu_492_p1) + unsigned(add_ln685_fu_461_p2));

    vla18_we0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            vla18_we0 <= ap_const_lv4_F;
        else 
            vla18_we0 <= ap_const_lv4_0;
        end if; 
    end process;


    vla18_we1_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            vla18_we1 <= ap_const_lv4_F;
        else 
            vla18_we1 <= ap_const_lv4_0;
        end if; 
    end process;

    zext_ln1229_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(logn),64));
    zext_ln1235_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ht_fu_266_p4),64));
    zext_ln1241_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_reg_650),64));
    zext_ln1247_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln66_fu_415_p4),64));
    zext_ln1248_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln67_fu_430_p4),64));
    zext_ln685_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln685_fu_488_p1),32));
    zext_ln697_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln697_fu_530_p1),32));
end behav;
