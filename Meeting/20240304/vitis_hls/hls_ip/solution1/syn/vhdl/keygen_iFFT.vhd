-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity keygen_iFFT is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    f_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    f_ce0 : OUT STD_LOGIC;
    f_we0 : OUT STD_LOGIC;
    f_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    f_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    f_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    f_ce1 : OUT STD_LOGIC;
    f_we1 : OUT STD_LOGIC;
    f_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    f_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of keygen_iFFT is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv64_3F60000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111101100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv55_0 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv64_8000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal fpr_gm_tab_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal fpr_gm_tab_ce0 : STD_LOGIC;
    signal fpr_gm_tab_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal fpr_gm_tab_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal fpr_gm_tab_ce1 : STD_LOGIC;
    signal fpr_gm_tab_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_250 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal t_reg_527 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal dt_fu_295_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal dt_reg_535 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln1453_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1455_fu_306_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln1455_reg_549 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i1_2_fu_326_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal i1_2_reg_557 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln1459_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_re_reg_572 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal s_im_fu_409_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_im_reg_578 : STD_LOGIC_VECTOR (63 downto 0);
    signal f_addr_7_reg_587 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln1468_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_addr_8_reg_592 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1474_fu_442_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1474_reg_597 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_11_fu_448_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_11_reg_603 : STD_LOGIC_VECTOR (10 downto 0);
    signal j1_fu_454_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln1459_fu_459_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_im_reg_618 : STD_LOGIC_VECTOR (63 downto 0);
    signal f_addr_9_reg_624 : STD_LOGIC_VECTOR (9 downto 0);
    signal f_addr_10_reg_629 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_210_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_215_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_220_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_226_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_232_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_238_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal f_addr_reg_681 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln1493_fu_486_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_reg_156 : STD_LOGIC_VECTOR (63 downto 0);
    signal i1_reg_166 : STD_LOGIC_VECTOR (63 downto 0);
    signal j1_8_reg_177 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_03_reg_189 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal zext_ln1466_fu_350_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1467_fu_361_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1468_fu_413_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1473_fu_434_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1474_fu_464_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1475_fu_473_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1493_fu_481_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_fu_66 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1453_fu_381_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal u_08_fu_70 : STD_LOGIC_VECTOR (3 downto 0);
    signal u_fu_366_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal t_06_fu_74 : STD_LOGIC_VECTOR (63 downto 0);
    signal u_11_fu_78 : STD_LOGIC_VECTOR (10 downto 0);
    signal u_233_fu_492_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_198_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_204_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_fu_198_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_198_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_204_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_204_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_220_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_220_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_279_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_212_fu_310_p4 : STD_LOGIC_VECTOR (54 downto 0);
    signal trunc_ln1466_fu_332_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1466_fu_336_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln_fu_342_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln1467_fu_355_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal lshr_ln_fu_371_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal bitcast_ln147_fu_399_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln147_fu_403_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1468_fu_424_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln1473_fu_428_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln1453_fu_439_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln1475_fu_468_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_198_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component keygen_dadddsub_64ns_64ns_64_2_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component keygen_dadd_64ns_64ns_64_2_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component keygen_dsub_64ns_64ns_64_2_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component keygen_dmul_64ns_64ns_64_2_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component keygen_FFT_fpr_gm_tab_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    fpr_gm_tab_U : component keygen_FFT_fpr_gm_tab_ROM_AUTO_1R
    generic map (
        DataWidth => 64,
        AddressRange => 2048,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fpr_gm_tab_address0,
        ce0 => fpr_gm_tab_ce0,
        q0 => fpr_gm_tab_q0,
        address1 => fpr_gm_tab_address1,
        ce1 => fpr_gm_tab_ce1,
        q1 => fpr_gm_tab_q1);

    dadddsub_64ns_64ns_64_2_full_dsp_1_U101 : component keygen_dadddsub_64ns_64ns_64_2_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_198_p0,
        din1 => grp_fu_198_p1,
        opcode => grp_fu_198_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_198_p2);

    dadd_64ns_64ns_64_2_full_dsp_1_U102 : component keygen_dadd_64ns_64ns_64_2_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_204_p0,
        din1 => grp_fu_204_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_204_p2);

    dsub_64ns_64ns_64_2_full_dsp_1_U103 : component keygen_dsub_64ns_64ns_64_2_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_250,
        din1 => f_q1,
        ce => ap_const_logic_1,
        dout => grp_fu_210_p2);

    dsub_64ns_64ns_64_2_full_dsp_1_U104 : component keygen_dsub_64ns_64ns_64_2_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => x_im_reg_618,
        din1 => f_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_215_p2);

    dmul_64ns_64ns_64_2_max_dsp_1_U105 : component keygen_dmul_64ns_64ns_64_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_220_p0,
        din1 => grp_fu_220_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_220_p2);

    dmul_64ns_64ns_64_2_max_dsp_1_U106 : component keygen_dmul_64ns_64ns_64_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_215_p2,
        din1 => s_im_reg_578,
        ce => ap_const_logic_1,
        dout => grp_fu_226_p2);

    dmul_64ns_64ns_64_2_max_dsp_1_U107 : component keygen_dmul_64ns_64ns_64_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_210_p2,
        din1 => s_im_reg_578,
        ce => ap_const_logic_1,
        dout => grp_fu_232_p2);

    dmul_64ns_64ns_64_2_max_dsp_1_U108 : component keygen_dmul_64ns_64ns_64_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_215_p2,
        din1 => s_re_reg_572,
        ce => ap_const_logic_1,
        dout => grp_fu_238_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i1_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1453_fu_289_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i1_reg_166 <= ap_const_lv64_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln1468_fu_418_p2 = ap_const_lv1_0))) then 
                i1_reg_166 <= i1_2_reg_557;
            end if; 
        end if;
    end process;

    indvars_iv_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1453_fu_289_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvars_iv_reg_156 <= t_06_fu_74;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln1468_fu_418_p2 = ap_const_lv1_0))) then 
                indvars_iv_reg_156 <= add_ln1459_fu_459_p2;
            end if; 
        end if;
    end process;

    j1_8_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1453_fu_289_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j1_8_reg_177 <= ap_const_lv64_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln1468_fu_418_p2 = ap_const_lv1_0))) then 
                j1_8_reg_177 <= j1_fu_454_p2;
            end if; 
        end if;
    end process;

    j_03_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                j_03_reg_189 <= j_11_reg_603;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_03_reg_189 <= trunc_ln1455_reg_549;
            end if; 
        end if;
    end process;

    m_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                m_fu_66 <= ap_const_lv10_200;
            elsif (((icmp_ln1459_fu_320_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                m_fu_66 <= zext_ln1453_fu_381_p1;
            end if; 
        end if;
    end process;

    reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                reg_250 <= f_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                reg_250 <= f_q1;
            end if; 
        end if;
    end process;

    t_06_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                t_06_fu_74 <= ap_const_lv64_1;
            elsif (((icmp_ln1459_fu_320_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                t_06_fu_74 <= dt_reg_535;
            end if; 
        end if;
    end process;

    u_08_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                u_08_fu_70 <= ap_const_lv4_A;
            elsif (((icmp_ln1459_fu_320_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                u_08_fu_70 <= u_fu_366_p2;
            end if; 
        end if;
    end process;

    u_11_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1453_fu_289_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                u_11_fu_78 <= ap_const_lv11_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln1493_fu_486_p2 = ap_const_lv1_0))) then 
                u_11_fu_78 <= u_233_fu_492_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln1468_fu_418_p2 = ap_const_lv1_1))) then
                add_ln1474_reg_597 <= add_ln1474_fu_442_p2;
                f_addr_7_reg_587 <= zext_ln1468_fu_413_p1(10 - 1 downto 0);
                f_addr_8_reg_592 <= zext_ln1473_fu_434_p1(10 - 1 downto 0);
                j_11_reg_603 <= j_11_fu_448_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1453_fu_289_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    dt_reg_535(63 downto 1) <= dt_fu_295_p2(63 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                f_addr_10_reg_629 <= zext_ln1475_fu_473_p1(10 - 1 downto 0);
                f_addr_9_reg_624 <= zext_ln1474_fu_464_p1(10 - 1 downto 0);
                x_im_reg_618 <= f_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln1493_fu_486_p2 = ap_const_lv1_0))) then
                f_addr_reg_681 <= zext_ln1493_fu_481_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i1_2_reg_557 <= i1_2_fu_326_p2;
                trunc_ln1455_reg_549 <= trunc_ln1455_fu_306_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                s_im_reg_578 <= s_im_fu_409_p1;
                s_re_reg_572 <= fpr_gm_tab_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                t_reg_527 <= t_06_fu_74;
            end if;
        end if;
    end process;
    dt_reg_535(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln1453_fu_289_p2, ap_CS_fsm_state3, icmp_ln1459_fu_320_p2, ap_CS_fsm_state5, icmp_ln1468_fu_418_p2, ap_CS_fsm_state11, icmp_ln1493_fu_486_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln1453_fu_289_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln1459_fu_320_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln1468_fu_418_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln1493_fu_486_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    add_ln1459_fu_459_p2 <= std_logic_vector(unsigned(dt_reg_535) + unsigned(indvars_iv_reg_156));
    add_ln1466_fu_336_p2 <= std_logic_vector(unsigned(trunc_ln1466_fu_332_p1) + unsigned(m_fu_66));
    add_ln1474_fu_442_p2 <= std_logic_vector(unsigned(trunc_ln1468_fu_424_p1) + unsigned(trunc_ln1453_fu_439_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state11, icmp_ln1493_fu_486_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln1493_fu_486_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11, icmp_ln1493_fu_486_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln1493_fu_486_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln147_fu_399_p1 <= fpr_gm_tab_q0;
    dt_fu_295_p2 <= std_logic_vector(shift_left(unsigned(t_06_fu_74),to_integer(unsigned('0' & ap_const_lv64_1(31-1 downto 0)))));

    f_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state5, f_addr_8_reg_592, f_addr_10_reg_629, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state10, zext_ln1473_fu_434_p1, zext_ln1475_fu_473_p1, zext_ln1493_fu_481_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            f_address0 <= zext_ln1493_fu_481_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            f_address0 <= f_addr_10_reg_629;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            f_address0 <= f_addr_8_reg_592;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            f_address0 <= zext_ln1475_fu_473_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            f_address0 <= zext_ln1473_fu_434_p1(10 - 1 downto 0);
        else 
            f_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    f_address1_assign_proc : process(ap_CS_fsm_state6, f_addr_7_reg_587, ap_CS_fsm_state5, f_addr_9_reg_624, ap_CS_fsm_state8, f_addr_reg_681, ap_CS_fsm_state10, zext_ln1468_fu_413_p1, zext_ln1474_fu_464_p1, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            f_address1 <= f_addr_reg_681;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            f_address1 <= f_addr_9_reg_624;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            f_address1 <= f_addr_7_reg_587;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            f_address1 <= zext_ln1474_fu_464_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            f_address1 <= zext_ln1468_fu_413_p1(10 - 1 downto 0);
        else 
            f_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    f_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            f_ce0 <= ap_const_logic_1;
        else 
            f_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    f_ce1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            f_ce1 <= ap_const_logic_1;
        else 
            f_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    f_d0 <= grp_fu_204_p2;

    f_d1_assign_proc : process(ap_CS_fsm_state8, grp_fu_220_p2, ap_CS_fsm_state10, grp_fu_198_p2, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            f_d1 <= grp_fu_220_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            f_d1 <= grp_fu_198_p2;
        else 
            f_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    f_we0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            f_we0 <= ap_const_logic_1;
        else 
            f_we0 <= ap_const_logic_0;
        end if; 
    end process;


    f_we1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            f_we1 <= ap_const_logic_1;
        else 
            f_we1 <= ap_const_logic_0;
        end if; 
    end process;

    fpr_gm_tab_address0 <= zext_ln1467_fu_361_p1(11 - 1 downto 0);
    fpr_gm_tab_address1 <= zext_ln1466_fu_350_p1(11 - 1 downto 0);

    fpr_gm_tab_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fpr_gm_tab_ce0 <= ap_const_logic_1;
        else 
            fpr_gm_tab_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fpr_gm_tab_ce1_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fpr_gm_tab_ce1 <= ap_const_logic_1;
        else 
            fpr_gm_tab_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_198_opcode_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_198_opcode <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_198_opcode <= ap_const_lv2_0;
        else 
            grp_fu_198_opcode <= "XX";
        end if; 
    end process;


    grp_fu_198_p0_assign_proc : process(reg_250, ap_CS_fsm_state7, grp_fu_220_p2, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_198_p0 <= grp_fu_220_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_198_p0 <= reg_250;
        else 
            grp_fu_198_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_198_p1_assign_proc : process(f_q1, ap_CS_fsm_state7, ap_CS_fsm_state9, grp_fu_226_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_198_p1 <= grp_fu_226_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_198_p1 <= f_q1;
        else 
            grp_fu_198_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_204_p0_assign_proc : process(x_im_reg_618, ap_CS_fsm_state7, ap_CS_fsm_state9, grp_fu_232_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_204_p0 <= grp_fu_232_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_204_p0 <= x_im_reg_618;
        else 
            grp_fu_204_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_204_p1_assign_proc : process(f_q0, ap_CS_fsm_state7, ap_CS_fsm_state9, grp_fu_238_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_204_p1 <= grp_fu_238_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_204_p1 <= f_q0;
        else 
            grp_fu_204_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_220_p0_assign_proc : process(f_q0, ap_CS_fsm_state12, grp_fu_210_p2, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_220_p0 <= f_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_220_p0 <= grp_fu_210_p2;
        else 
            grp_fu_220_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_220_p1_assign_proc : process(ap_CS_fsm_state12, s_re_reg_572, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_220_p1 <= ap_const_lv64_3F60000000000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_220_p1 <= s_re_reg_572;
        else 
            grp_fu_220_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i1_2_fu_326_p2 <= std_logic_vector(unsigned(i1_reg_166) + unsigned(ap_const_lv64_1));
    icmp_ln1453_fu_289_p2 <= "1" when (tmp_fu_279_p4 = ap_const_lv3_0) else "0";
    icmp_ln1459_fu_320_p2 <= "1" when (tmp_212_fu_310_p4 = ap_const_lv55_0) else "0";
    icmp_ln1468_fu_418_p2 <= "1" when (unsigned(zext_ln1468_fu_413_p1) < unsigned(indvars_iv_reg_156)) else "0";
    icmp_ln1493_fu_486_p2 <= "1" when (u_11_fu_78 = ap_const_lv11_400) else "0";
    j1_fu_454_p2 <= std_logic_vector(unsigned(dt_reg_535) + unsigned(j1_8_reg_177));
    j_11_fu_448_p2 <= std_logic_vector(unsigned(j_03_reg_189) + unsigned(ap_const_lv11_1));
    lshr_ln_fu_371_p4 <= m_fu_66(9 downto 1);
    or_ln1467_fu_355_p2 <= (shl_ln_fu_342_p3 or ap_const_lv11_1);
    s_im_fu_409_p1 <= xor_ln147_fu_403_p2;
    shl_ln_fu_342_p3 <= (add_ln1466_fu_336_p2 & ap_const_lv1_0);
    tmp_212_fu_310_p4 <= j1_8_reg_177(63 downto 9);
    tmp_fu_279_p4 <= u_08_fu_70(3 downto 1);
    trunc_ln1453_fu_439_p1 <= t_reg_527(10 - 1 downto 0);
    trunc_ln1455_fu_306_p1 <= j1_8_reg_177(11 - 1 downto 0);
    trunc_ln1466_fu_332_p1 <= i1_reg_166(10 - 1 downto 0);
    trunc_ln1468_fu_424_p1 <= j_03_reg_189(10 - 1 downto 0);
    u_233_fu_492_p2 <= std_logic_vector(unsigned(u_11_fu_78) + unsigned(ap_const_lv11_1));
    u_fu_366_p2 <= std_logic_vector(unsigned(u_08_fu_70) + unsigned(ap_const_lv4_F));
    xor_ln1473_fu_428_p2 <= (trunc_ln1468_fu_424_p1 xor ap_const_lv10_200);
    xor_ln1475_fu_468_p2 <= (ap_const_lv10_200 xor add_ln1474_reg_597);
    xor_ln147_fu_403_p2 <= (bitcast_ln147_fu_399_p1 xor ap_const_lv64_8000000000000000);
    zext_ln1453_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_371_p4),10));
    zext_ln1466_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_342_p3),64));
    zext_ln1467_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1467_fu_355_p2),64));
    zext_ln1468_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_03_reg_189),64));
    zext_ln1473_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln1473_fu_428_p2),64));
    zext_ln1474_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1474_reg_597),64));
    zext_ln1475_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln1475_fu_468_p2),64));
    zext_ln1493_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_11_fu_78),64));
end behav;
