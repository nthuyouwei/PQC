-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity keygen_FFT is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    f_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    f_ce0 : OUT STD_LOGIC;
    f_we0 : OUT STD_LOGIC;
    f_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    f_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    f_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    f_ce1 : OUT STD_LOGIC;
    f_we1 : OUT STD_LOGIC;
    f_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    f_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of keygen_FFT is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv63_1 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal fpr_gm_tab_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal fpr_gm_tab_ce0 : STD_LOGIC;
    signal fpr_gm_tab_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal fpr_gm_tab_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal fpr_gm_tab_ce1 : STD_LOGIC;
    signal fpr_gm_tab_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal zext_ln957_fu_279_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln957_reg_460 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln953_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln955_fu_283_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_reg_471 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln965_fu_297_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln965_reg_476 : STD_LOGIC_VECTOR (9 downto 0);
    signal i1_4_fu_306_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal i1_4_reg_484 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln959_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_re_reg_499 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal s_im_reg_505 : STD_LOGIC_VECTOR (63 downto 0);
    signal f_addr_reg_514 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln968_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln968_fu_376_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln968_reg_519 : STD_LOGIC_VECTOR (9 downto 0);
    signal f_addr_12_reg_524 : STD_LOGIC_VECTOR (9 downto 0);
    signal f_addr_13_reg_529 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_14_fu_401_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_14_reg_534 : STD_LOGIC_VECTOR (63 downto 0);
    signal j1_fu_411_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln959_fu_417_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal f_addr_11_reg_549 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_199_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_205_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_211_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_217_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_173_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_177_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_187_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal fpct_re_6_reg_586 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_193_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal fpct_im_6_reg_591 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvars_iv_reg_129 : STD_LOGIC_VECTOR (63 downto 0);
    signal j1_13_reg_139 : STD_LOGIC_VECTOR (63 downto 0);
    signal i1_reg_151 : STD_LOGIC_VECTOR (62 downto 0);
    signal j_02_reg_162 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal zext_ln965_fu_329_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln966_fu_340_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln974_fu_385_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln975_fu_396_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln973_fu_428_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_08_fu_52 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_fu_350_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_fu_56 : STD_LOGIC_VECTOR (9 downto 0);
    signal u_010_fu_60 : STD_LOGIC_VECTOR (3 downto 0);
    signal u_fu_345_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_173_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_173_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_177_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_177_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ht_fu_269_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln965_2_fu_312_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln965_fu_316_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln_fu_321_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln966_fu_334_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln974_fu_380_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln975_fu_390_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln953_fu_407_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln973_fu_423_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_173_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component keygen_dadddsub_64ns_64ns_64_2_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component keygen_dadd_64ns_64ns_64_2_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component keygen_dsub_64ns_64ns_64_2_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component keygen_dmul_64ns_64ns_64_2_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component keygen_FFT_fpr_gm_tab_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    fpr_gm_tab_U : component keygen_FFT_fpr_gm_tab_ROM_AUTO_1R
    generic map (
        DataWidth => 64,
        AddressRange => 2048,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fpr_gm_tab_address0,
        ce0 => fpr_gm_tab_ce0,
        q0 => fpr_gm_tab_q0,
        address1 => fpr_gm_tab_address1,
        ce1 => fpr_gm_tab_ce1,
        q1 => fpr_gm_tab_q1);

    dadddsub_64ns_64ns_64_2_full_dsp_1_U87 : component keygen_dadddsub_64ns_64ns_64_2_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_173_p0,
        din1 => grp_fu_173_p1,
        opcode => grp_fu_173_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_173_p2);

    dadd_64ns_64ns_64_2_full_dsp_1_U88 : component keygen_dadd_64ns_64ns_64_2_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_177_p0,
        din1 => grp_fu_177_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_177_p2);

    dsub_64ns_64ns_64_2_full_dsp_1_U89 : component keygen_dsub_64ns_64ns_64_2_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => f_q1,
        din1 => grp_fu_173_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_187_p2);

    dsub_64ns_64ns_64_2_full_dsp_1_U90 : component keygen_dsub_64ns_64ns_64_2_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => f_q0,
        din1 => grp_fu_177_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_193_p2);

    dmul_64ns_64ns_64_2_max_dsp_1_U91 : component keygen_dmul_64ns_64ns_64_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => f_q1,
        din1 => s_re_reg_499,
        ce => ap_const_logic_1,
        dout => grp_fu_199_p2);

    dmul_64ns_64ns_64_2_max_dsp_1_U92 : component keygen_dmul_64ns_64ns_64_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => f_q0,
        din1 => s_im_reg_505,
        ce => ap_const_logic_1,
        dout => grp_fu_205_p2);

    dmul_64ns_64ns_64_2_max_dsp_1_U93 : component keygen_dmul_64ns_64ns_64_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => f_q1,
        din1 => s_im_reg_505,
        ce => ap_const_logic_1,
        dout => grp_fu_211_p2);

    dmul_64ns_64ns_64_2_max_dsp_1_U94 : component keygen_dmul_64ns_64ns_64_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => f_q0,
        din1 => s_re_reg_499,
        ce => ap_const_logic_1,
        dout => grp_fu_217_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i1_reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln953_fu_263_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i1_reg_151 <= ap_const_lv63_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln968_fu_370_p2 = ap_const_lv1_0))) then 
                i1_reg_151 <= i1_4_reg_484;
            end if; 
        end if;
    end process;

    indvars_iv_reg_129_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln953_fu_263_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvars_iv_reg_129 <= zext_ln955_fu_283_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln968_fu_370_p2 = ap_const_lv1_0))) then 
                indvars_iv_reg_129 <= add_ln959_fu_417_p2;
            end if; 
        end if;
    end process;

    j1_13_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln953_fu_263_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j1_13_reg_139 <= ap_const_lv64_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln968_fu_370_p2 = ap_const_lv1_0))) then 
                j1_13_reg_139 <= j1_fu_411_p2;
            end if; 
        end if;
    end process;

    j_02_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                j_02_reg_162 <= j_14_reg_534;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_02_reg_162 <= j1_13_reg_139;
            end if; 
        end if;
    end process;

    m_08_fu_52_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                m_08_fu_52(1) <= '1';
                m_08_fu_52(2) <= '0';
                m_08_fu_52(3) <= '0';
                m_08_fu_52(4) <= '0';
                m_08_fu_52(5) <= '0';
                m_08_fu_52(6) <= '0';
                m_08_fu_52(7) <= '0';
                m_08_fu_52(8) <= '0';
                m_08_fu_52(9) <= '0';
                m_08_fu_52(10) <= '0';
                m_08_fu_52(11) <= '0';
                m_08_fu_52(12) <= '0';
                m_08_fu_52(13) <= '0';
                m_08_fu_52(14) <= '0';
                m_08_fu_52(15) <= '0';
                m_08_fu_52(16) <= '0';
                m_08_fu_52(17) <= '0';
                m_08_fu_52(18) <= '0';
                m_08_fu_52(19) <= '0';
                m_08_fu_52(20) <= '0';
                m_08_fu_52(21) <= '0';
                m_08_fu_52(22) <= '0';
                m_08_fu_52(23) <= '0';
                m_08_fu_52(24) <= '0';
                m_08_fu_52(25) <= '0';
                m_08_fu_52(26) <= '0';
                m_08_fu_52(27) <= '0';
                m_08_fu_52(28) <= '0';
                m_08_fu_52(29) <= '0';
                m_08_fu_52(30) <= '0';
                m_08_fu_52(31) <= '0';
                m_08_fu_52(32) <= '0';
                m_08_fu_52(33) <= '0';
                m_08_fu_52(34) <= '0';
                m_08_fu_52(35) <= '0';
                m_08_fu_52(36) <= '0';
                m_08_fu_52(37) <= '0';
                m_08_fu_52(38) <= '0';
                m_08_fu_52(39) <= '0';
                m_08_fu_52(40) <= '0';
                m_08_fu_52(41) <= '0';
                m_08_fu_52(42) <= '0';
                m_08_fu_52(43) <= '0';
                m_08_fu_52(44) <= '0';
                m_08_fu_52(45) <= '0';
                m_08_fu_52(46) <= '0';
                m_08_fu_52(47) <= '0';
                m_08_fu_52(48) <= '0';
                m_08_fu_52(49) <= '0';
                m_08_fu_52(50) <= '0';
                m_08_fu_52(51) <= '0';
                m_08_fu_52(52) <= '0';
                m_08_fu_52(53) <= '0';
                m_08_fu_52(54) <= '0';
                m_08_fu_52(55) <= '0';
                m_08_fu_52(56) <= '0';
                m_08_fu_52(57) <= '0';
                m_08_fu_52(58) <= '0';
                m_08_fu_52(59) <= '0';
                m_08_fu_52(60) <= '0';
                m_08_fu_52(61) <= '0';
                m_08_fu_52(62) <= '0';
                m_08_fu_52(63) <= '0';
            elsif (((icmp_ln959_fu_301_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                                m_08_fu_52(63 downto 1) <= m_fu_350_p2(63 downto 1);
            end if; 
        end if;
    end process;

    t_fu_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                t_fu_56 <= ap_const_lv10_200;
            elsif (((icmp_ln959_fu_301_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                t_fu_56 <= zext_ln957_reg_460;
            end if; 
        end if;
    end process;

    u_010_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                u_010_fu_60 <= ap_const_lv4_1;
            elsif (((icmp_ln959_fu_301_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                u_010_fu_60 <= u_fu_345_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                f_addr_11_reg_549 <= zext_ln973_fu_428_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln968_fu_370_p2 = ap_const_lv1_1))) then
                f_addr_12_reg_524 <= zext_ln974_fu_385_p1(10 - 1 downto 0);
                f_addr_13_reg_529 <= zext_ln975_fu_396_p1(10 - 1 downto 0);
                f_addr_reg_514 <= j_02_reg_162(10 - 1 downto 0);
                j_14_reg_534 <= j_14_fu_401_p2;
                trunc_ln968_reg_519 <= trunc_ln968_fu_376_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                fpct_im_6_reg_591 <= grp_fu_193_p2;
                fpct_re_6_reg_586 <= grp_fu_187_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i1_4_reg_484 <= i1_4_fu_306_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                s_im_reg_505 <= fpr_gm_tab_q0;
                s_re_reg_499 <= fpr_gm_tab_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln953_fu_263_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    trunc_ln965_reg_476(9 downto 1) <= trunc_ln965_fu_297_p1(9 downto 1);
                trunc_ln_reg_471 <= m_08_fu_52(63 downto 1);
                    zext_ln957_reg_460(8 downto 0) <= zext_ln957_fu_279_p1(8 downto 0);
            end if;
        end if;
    end process;
    zext_ln957_reg_460(9) <= '0';
    trunc_ln965_reg_476(0) <= '0';
    m_08_fu_52(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln953_fu_263_p2, ap_CS_fsm_state3, icmp_ln959_fu_301_p2, ap_CS_fsm_state5, icmp_ln968_fu_370_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln953_fu_263_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln959_fu_301_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln968_fu_370_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    add_ln959_fu_417_p2 <= std_logic_vector(unsigned(zext_ln953_fu_407_p1) + unsigned(indvars_iv_reg_129));
    add_ln965_fu_316_p2 <= std_logic_vector(unsigned(trunc_ln965_2_fu_312_p1) + unsigned(trunc_ln965_reg_476));
    add_ln974_fu_380_p2 <= std_logic_vector(unsigned(trunc_ln968_fu_376_p1) + unsigned(zext_ln957_reg_460));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln953_fu_263_p2)
    begin
        if ((((icmp_ln953_fu_263_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln953_fu_263_p2)
    begin
        if (((icmp_ln953_fu_263_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    f_address0_assign_proc : process(ap_CS_fsm_state5, f_addr_13_reg_529, f_addr_11_reg_549, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10, zext_ln975_fu_396_p1, zext_ln973_fu_428_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            f_address0 <= f_addr_13_reg_529;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            f_address0 <= f_addr_11_reg_549;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            f_address0 <= zext_ln973_fu_428_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            f_address0 <= zext_ln975_fu_396_p1(10 - 1 downto 0);
        else 
            f_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    f_address1_assign_proc : process(f_addr_reg_514, ap_CS_fsm_state5, f_addr_12_reg_524, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10, zext_ln974_fu_385_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            f_address1 <= f_addr_12_reg_524;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            f_address1 <= f_addr_reg_514;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            f_address1 <= zext_ln974_fu_385_p1(10 - 1 downto 0);
        else 
            f_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    f_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            f_ce0 <= ap_const_logic_1;
        else 
            f_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    f_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            f_ce1 <= ap_const_logic_1;
        else 
            f_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    f_d0_assign_proc : process(grp_fu_177_p2, ap_CS_fsm_state9, fpct_im_6_reg_591, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            f_d0 <= fpct_im_6_reg_591;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            f_d0 <= grp_fu_177_p2;
        else 
            f_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    f_d1_assign_proc : process(grp_fu_173_p2, fpct_re_6_reg_586, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            f_d1 <= fpct_re_6_reg_586;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            f_d1 <= grp_fu_173_p2;
        else 
            f_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    f_we0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            f_we0 <= ap_const_logic_1;
        else 
            f_we0 <= ap_const_logic_0;
        end if; 
    end process;


    f_we1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            f_we1 <= ap_const_logic_1;
        else 
            f_we1 <= ap_const_logic_0;
        end if; 
    end process;

    fpr_gm_tab_address0 <= zext_ln966_fu_340_p1(11 - 1 downto 0);
    fpr_gm_tab_address1 <= zext_ln965_fu_329_p1(11 - 1 downto 0);

    fpr_gm_tab_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fpr_gm_tab_ce0 <= ap_const_logic_1;
        else 
            fpr_gm_tab_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fpr_gm_tab_ce1_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fpr_gm_tab_ce1 <= ap_const_logic_1;
        else 
            fpr_gm_tab_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_173_opcode_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_173_opcode <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_173_opcode <= ap_const_lv2_0;
        else 
            grp_fu_173_opcode <= "XX";
        end if; 
    end process;


    grp_fu_173_p0_assign_proc : process(f_q1, ap_CS_fsm_state8, ap_CS_fsm_state7, grp_fu_199_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_173_p0 <= f_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_173_p0 <= grp_fu_199_p2;
        else 
            grp_fu_173_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_173_p1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state7, grp_fu_205_p2, grp_fu_173_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_173_p1 <= grp_fu_173_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_173_p1 <= grp_fu_205_p2;
        else 
            grp_fu_173_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_177_p0_assign_proc : process(f_q0, ap_CS_fsm_state8, ap_CS_fsm_state7, grp_fu_211_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_177_p0 <= f_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_177_p0 <= grp_fu_211_p2;
        else 
            grp_fu_177_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_177_p1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state7, grp_fu_217_p2, grp_fu_177_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_177_p1 <= grp_fu_177_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_177_p1 <= grp_fu_217_p2;
        else 
            grp_fu_177_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    ht_fu_269_p4 <= t_fu_56(9 downto 1);
    i1_4_fu_306_p2 <= std_logic_vector(unsigned(i1_reg_151) + unsigned(ap_const_lv63_1));
    icmp_ln953_fu_263_p2 <= "1" when (u_010_fu_60 = ap_const_lv4_A) else "0";
    icmp_ln959_fu_301_p2 <= "1" when (i1_reg_151 = trunc_ln_reg_471) else "0";
    icmp_ln968_fu_370_p2 <= "1" when (unsigned(j_02_reg_162) < unsigned(indvars_iv_reg_129)) else "0";
    j1_fu_411_p2 <= std_logic_vector(unsigned(zext_ln953_fu_407_p1) + unsigned(j1_13_reg_139));
    j_14_fu_401_p2 <= std_logic_vector(unsigned(j_02_reg_162) + unsigned(ap_const_lv64_1));
    m_fu_350_p2 <= std_logic_vector(shift_left(unsigned(m_08_fu_52),to_integer(unsigned('0' & ap_const_lv64_1(31-1 downto 0)))));
    or_ln966_fu_334_p2 <= (shl_ln_fu_321_p3 or ap_const_lv11_1);
    shl_ln_fu_321_p3 <= (add_ln965_fu_316_p2 & ap_const_lv1_0);
    trunc_ln965_2_fu_312_p1 <= i1_reg_151(10 - 1 downto 0);
    trunc_ln965_fu_297_p1 <= m_08_fu_52(10 - 1 downto 0);
    trunc_ln968_fu_376_p1 <= j_02_reg_162(10 - 1 downto 0);
    u_fu_345_p2 <= std_logic_vector(unsigned(u_010_fu_60) + unsigned(ap_const_lv4_1));
    xor_ln973_fu_423_p2 <= (trunc_ln968_reg_519 xor ap_const_lv10_200);
    xor_ln975_fu_390_p2 <= (ap_const_lv10_200 xor add_ln974_fu_380_p2);
    zext_ln953_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_fu_56),64));
    zext_ln955_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ht_fu_269_p4),64));
    zext_ln957_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ht_fu_269_p4),10));
    zext_ln965_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_321_p3),64));
    zext_ln966_fu_340_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln966_fu_334_p2),64));
    zext_ln973_fu_428_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln973_fu_423_p2),64));
    zext_ln974_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln974_fu_380_p2),64));
    zext_ln975_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln975_fu_390_p2),64));
end behav;
