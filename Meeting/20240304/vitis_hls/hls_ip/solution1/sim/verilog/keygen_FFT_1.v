// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module keygen_FFT_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        vla18_address0,
        vla18_ce0,
        vla18_we0,
        vla18_d0,
        vla18_q0,
        vla18_address1,
        vla18_ce1,
        vla18_we1,
        vla18_d1,
        vla18_q1,
        f,
        logn
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] vla18_address0;
output   vla18_ce0;
output  [3:0] vla18_we0;
output  [31:0] vla18_d0;
input  [31:0] vla18_q0;
output  [12:0] vla18_address1;
output   vla18_ce1;
output  [3:0] vla18_we1;
output  [31:0] vla18_d1;
input  [31:0] vla18_q1;
input  [14:0] f;
input  [31:0] logn;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[12:0] vla18_address0;
reg vla18_ce0;
reg[3:0] vla18_we0;
reg[31:0] vla18_d0;
reg[12:0] vla18_address1;
reg vla18_ce1;
reg[3:0] vla18_we1;
reg[31:0] vla18_d1;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [10:0] fpr_gm_tab_address0;
reg    fpr_gm_tab_ce0;
wire   [63:0] fpr_gm_tab_q0;
wire   [10:0] fpr_gm_tab_address1;
reg    fpr_gm_tab_ce1;
wire   [63:0] fpr_gm_tab_q1;
wire   [63:0] grp_fu_255_p2;
reg   [63:0] reg_287;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state11;
reg   [11:0] trunc_ln20_reg_821;
wire   [62:0] zext_ln957_fu_356_p1;
reg   [62:0] zext_ln957_reg_833;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln953_fu_341_p2;
wire   [63:0] zext_ln955_fu_360_p1;
reg   [62:0] trunc_ln21_reg_843;
wire   [9:0] trunc_ln965_fu_374_p1;
reg   [9:0] trunc_ln965_reg_848;
reg   [11:0] trunc_ln22_reg_853;
wire   [62:0] i1_3_fu_393_p2;
reg   [62:0] i1_3_reg_861;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln959_fu_388_p2;
reg   [63:0] s_re_reg_876;
wire    ap_CS_fsm_state4;
reg   [63:0] s_im_reg_882;
reg   [12:0] trunc_ln23_reg_891;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln968_fu_457_p2;
reg   [12:0] trunc_ln973_2_reg_897;
reg   [12:0] vla18_addr_360_reg_903;
reg   [12:0] vla18_addr_361_reg_909;
reg   [12:0] trunc_ln24_reg_914;
wire   [63:0] j_13_fu_590_p2;
reg   [63:0] j_13_reg_920;
wire   [63:0] j1_fu_600_p2;
wire   [63:0] add_ln959_fu_606_p2;
reg   [31:0] vla18_load_240_reg_935;
wire    ap_CS_fsm_state6;
reg   [31:0] vla18_load_241_reg_940;
reg   [12:0] vla18_addr_362_reg_945;
reg   [12:0] vla18_addr_363_reg_951;
wire   [63:0] y_re_1_fu_632_p1;
wire    ap_CS_fsm_state7;
wire   [63:0] y_im_1_fu_646_p1;
reg   [12:0] vla18_addr_reg_968;
wire    ap_CS_fsm_state8;
reg   [12:0] vla18_addr_357_reg_974;
wire   [63:0] grp_fu_261_p2;
wire   [63:0] grp_fu_266_p2;
wire   [63:0] grp_fu_271_p2;
wire   [63:0] grp_fu_276_p2;
wire   [63:0] x_re_fu_674_p1;
reg   [12:0] vla18_addr_358_reg_1005;
reg   [12:0] vla18_addr_359_reg_1011;
wire   [63:0] grp_fu_251_p2;
wire   [63:0] x_im_fu_702_p1;
wire    ap_CS_fsm_state10;
reg   [63:0] fpct_re_5_reg_1028;
reg   [63:0] indvars_iv_reg_208;
reg   [63:0] j1_12_reg_218;
reg   [62:0] i1_reg_230;
reg   [63:0] j_02_reg_241;
wire    ap_CS_fsm_state13;
wire   [63:0] zext_ln965_fu_416_p1;
wire   [63:0] zext_ln966_fu_427_p1;
wire   [63:0] zext_ln974_fu_546_p1;
wire   [63:0] zext_ln974_1_fu_557_p1;
wire   [63:0] zext_ln975_fu_612_p1;
wire   [63:0] zext_ln975_1_fu_621_p1;
wire   [63:0] zext_ln972_fu_652_p1;
wire   [63:0] zext_ln972_1_fu_661_p1;
wire   [63:0] zext_ln973_fu_680_p1;
wire   [63:0] zext_ln973_1_fu_689_p1;
reg   [63:0] m_08_fu_86;
wire   [63:0] m_fu_437_p2;
reg   [62:0] t_fu_90;
reg   [31:0] u_010_fu_94;
wire   [31:0] u_fu_432_p2;
wire   [31:0] trunc_ln12_fu_712_p1;
wire   [31:0] trunc_ln13_fu_732_p1;
wire    ap_CS_fsm_state12;
wire   [31:0] trunc_ln32_fu_751_p1;
wire   [31:0] trunc_ln33_fu_771_p1;
reg   [63:0] grp_fu_251_p0;
reg   [63:0] grp_fu_251_p1;
reg   [63:0] grp_fu_255_p0;
reg   [63:0] grp_fu_255_p1;
wire   [63:0] zext_ln949_fu_293_p1;
wire   [63:0] n_fu_297_p2;
wire   [61:0] ht_fu_346_p4;
wire   [9:0] trunc_ln965_1_fu_399_p1;
wire   [9:0] add_ln965_fu_403_p2;
wire   [10:0] shl_ln_fu_408_p3;
wire   [10:0] or_ln966_fu_421_p2;
wire   [11:0] trunc_ln972_fu_463_p1;
wire   [14:0] shl_ln101_fu_467_p3;
wire   [14:0] add_ln972_fu_475_p2;
wire   [11:0] add_ln973_fu_490_p2;
wire   [14:0] shl_ln102_fu_495_p3;
wire   [14:0] add_ln973_1_fu_503_p2;
wire   [11:0] add_ln974_fu_518_p2;
wire   [14:0] shl_ln103_fu_523_p3;
wire   [14:0] add_ln974_1_fu_531_p2;
wire   [12:0] trunc_ln974_1_fu_536_p4;
wire   [12:0] add_ln974_2_fu_551_p2;
wire   [11:0] add_ln975_fu_562_p2;
wire   [14:0] shl_ln104_fu_567_p3;
wire   [14:0] add_ln975_1_fu_575_p2;
wire   [63:0] zext_ln953_fu_596_p1;
wire   [12:0] add_ln975_2_fu_616_p2;
wire   [63:0] tmp_89_fu_626_p3;
wire   [63:0] tmp_90_fu_638_p3;
wire   [12:0] add_ln972_1_fu_656_p2;
wire   [63:0] tmp_fu_666_p3;
wire   [12:0] add_ln973_2_fu_684_p2;
wire   [63:0] tmp_s_fu_694_p3;
wire   [63:0] bitcast_ln12_fu_708_p1;
wire   [63:0] bitcast_ln13_fu_728_p1;
wire   [63:0] bitcast_ln32_fu_748_p1;
wire   [63:0] bitcast_ln33_fu_767_p1;
reg   [1:0] grp_fu_251_opcode;
reg   [1:0] grp_fu_255_opcode;
reg   [12:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
end

keygen_FFT_fpr_gm_tab_ROM_AUTO_1R #(
    .DataWidth( 64 ),
    .AddressRange( 2048 ),
    .AddressWidth( 11 ))
fpr_gm_tab_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fpr_gm_tab_address0),
    .ce0(fpr_gm_tab_ce0),
    .q0(fpr_gm_tab_q0),
    .address1(fpr_gm_tab_address1),
    .ce1(fpr_gm_tab_ce1),
    .q1(fpr_gm_tab_q1)
);

keygen_dadddsub_64ns_64ns_64_2_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadddsub_64ns_64ns_64_2_full_dsp_1_U214(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_251_p0),
    .din1(grp_fu_251_p1),
    .opcode(grp_fu_251_opcode),
    .ce(1'b1),
    .dout(grp_fu_251_p2)
);

keygen_dadddsub_64ns_64ns_64_2_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadddsub_64ns_64ns_64_2_full_dsp_1_U215(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_255_p0),
    .din1(grp_fu_255_p1),
    .opcode(grp_fu_255_opcode),
    .ce(1'b1),
    .dout(grp_fu_255_p2)
);

keygen_dmul_64ns_64ns_64_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_2_max_dsp_1_U216(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(y_re_1_fu_632_p1),
    .din1(s_re_reg_876),
    .ce(1'b1),
    .dout(grp_fu_261_p2)
);

keygen_dmul_64ns_64ns_64_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_2_max_dsp_1_U217(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(y_im_1_fu_646_p1),
    .din1(s_im_reg_882),
    .ce(1'b1),
    .dout(grp_fu_266_p2)
);

keygen_dmul_64ns_64ns_64_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_2_max_dsp_1_U218(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(y_re_1_fu_632_p1),
    .din1(s_im_reg_882),
    .ce(1'b1),
    .dout(grp_fu_271_p2)
);

keygen_dmul_64ns_64ns_64_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_2_max_dsp_1_U219(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(y_im_1_fu_646_p1),
    .din1(s_re_reg_876),
    .ce(1'b1),
    .dout(grp_fu_276_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln953_fu_341_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i1_reg_230 <= 63'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln968_fu_457_p2 == 1'd0))) begin
        i1_reg_230 <= i1_3_reg_861;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln953_fu_341_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        indvars_iv_reg_208 <= zext_ln955_fu_360_p1;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln968_fu_457_p2 == 1'd0))) begin
        indvars_iv_reg_208 <= add_ln959_fu_606_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln953_fu_341_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        j1_12_reg_218 <= 64'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln968_fu_457_p2 == 1'd0))) begin
        j1_12_reg_218 <= j1_fu_600_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        j_02_reg_241 <= j_13_reg_920;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        j_02_reg_241 <= j1_12_reg_218;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                m_08_fu_86[1] <= 1'b1;
        m_08_fu_86[2] <= 1'b0;
        m_08_fu_86[3] <= 1'b0;
        m_08_fu_86[4] <= 1'b0;
        m_08_fu_86[5] <= 1'b0;
        m_08_fu_86[6] <= 1'b0;
        m_08_fu_86[7] <= 1'b0;
        m_08_fu_86[8] <= 1'b0;
        m_08_fu_86[9] <= 1'b0;
        m_08_fu_86[10] <= 1'b0;
        m_08_fu_86[11] <= 1'b0;
        m_08_fu_86[12] <= 1'b0;
        m_08_fu_86[13] <= 1'b0;
        m_08_fu_86[14] <= 1'b0;
        m_08_fu_86[15] <= 1'b0;
        m_08_fu_86[16] <= 1'b0;
        m_08_fu_86[17] <= 1'b0;
        m_08_fu_86[18] <= 1'b0;
        m_08_fu_86[19] <= 1'b0;
        m_08_fu_86[20] <= 1'b0;
        m_08_fu_86[21] <= 1'b0;
        m_08_fu_86[22] <= 1'b0;
        m_08_fu_86[23] <= 1'b0;
        m_08_fu_86[24] <= 1'b0;
        m_08_fu_86[25] <= 1'b0;
        m_08_fu_86[26] <= 1'b0;
        m_08_fu_86[27] <= 1'b0;
        m_08_fu_86[28] <= 1'b0;
        m_08_fu_86[29] <= 1'b0;
        m_08_fu_86[30] <= 1'b0;
        m_08_fu_86[31] <= 1'b0;
        m_08_fu_86[32] <= 1'b0;
        m_08_fu_86[33] <= 1'b0;
        m_08_fu_86[34] <= 1'b0;
        m_08_fu_86[35] <= 1'b0;
        m_08_fu_86[36] <= 1'b0;
        m_08_fu_86[37] <= 1'b0;
        m_08_fu_86[38] <= 1'b0;
        m_08_fu_86[39] <= 1'b0;
        m_08_fu_86[40] <= 1'b0;
        m_08_fu_86[41] <= 1'b0;
        m_08_fu_86[42] <= 1'b0;
        m_08_fu_86[43] <= 1'b0;
        m_08_fu_86[44] <= 1'b0;
        m_08_fu_86[45] <= 1'b0;
        m_08_fu_86[46] <= 1'b0;
        m_08_fu_86[47] <= 1'b0;
        m_08_fu_86[48] <= 1'b0;
        m_08_fu_86[49] <= 1'b0;
        m_08_fu_86[50] <= 1'b0;
        m_08_fu_86[51] <= 1'b0;
        m_08_fu_86[52] <= 1'b0;
        m_08_fu_86[53] <= 1'b0;
        m_08_fu_86[54] <= 1'b0;
        m_08_fu_86[55] <= 1'b0;
        m_08_fu_86[56] <= 1'b0;
        m_08_fu_86[57] <= 1'b0;
        m_08_fu_86[58] <= 1'b0;
        m_08_fu_86[59] <= 1'b0;
        m_08_fu_86[60] <= 1'b0;
        m_08_fu_86[61] <= 1'b0;
        m_08_fu_86[62] <= 1'b0;
        m_08_fu_86[63] <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln959_fu_388_p2 == 1'd1))) begin
                m_08_fu_86[63 : 1] <= m_fu_437_p2[63 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        t_fu_90 <= {{n_fu_297_p2[63:1]}};
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln959_fu_388_p2 == 1'd1))) begin
        t_fu_90 <= zext_ln957_reg_833;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        u_010_fu_94 <= 32'd1;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln959_fu_388_p2 == 1'd1))) begin
        u_010_fu_94 <= u_fu_432_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        fpct_re_5_reg_1028 <= grp_fu_255_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i1_3_reg_861 <= i1_3_fu_393_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln968_fu_457_p2 == 1'd1))) begin
        j_13_reg_920 <= j_13_fu_590_p2;
        trunc_ln23_reg_891 <= {{add_ln972_fu_475_p2[14:2]}};
        trunc_ln24_reg_914 <= {{add_ln975_1_fu_575_p2[14:2]}};
        trunc_ln973_2_reg_897 <= {{add_ln973_1_fu_503_p2[14:2]}};
        vla18_addr_360_reg_903 <= zext_ln974_fu_546_p1;
        vla18_addr_361_reg_909 <= zext_ln974_1_fu_557_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9))) begin
        reg_287 <= grp_fu_255_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        s_im_reg_882 <= fpr_gm_tab_q0;
        s_re_reg_876 <= fpr_gm_tab_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        trunc_ln20_reg_821 <= {{n_fu_297_p2[12:1]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln953_fu_341_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        trunc_ln21_reg_843 <= {{m_08_fu_86[63:1]}};
        trunc_ln22_reg_853 <= {{t_fu_90[12:1]}};
        trunc_ln965_reg_848[9 : 1] <= trunc_ln965_fu_374_p1[9 : 1];
        zext_ln957_reg_833[61 : 0] <= zext_ln957_fu_356_p1[61 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        vla18_addr_357_reg_974 <= zext_ln972_1_fu_661_p1;
        vla18_addr_reg_968 <= zext_ln972_fu_652_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        vla18_addr_358_reg_1005 <= zext_ln973_fu_680_p1;
        vla18_addr_359_reg_1011 <= zext_ln973_1_fu_689_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        vla18_addr_362_reg_945 <= zext_ln975_fu_612_p1;
        vla18_addr_363_reg_951 <= zext_ln975_1_fu_621_p1;
        vla18_load_240_reg_935 <= vla18_q1;
        vla18_load_241_reg_940 <= vla18_q0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((icmp_ln953_fu_341_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln953_fu_341_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        fpr_gm_tab_ce0 = 1'b1;
    end else begin
        fpr_gm_tab_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        fpr_gm_tab_ce1 = 1'b1;
    end else begin
        fpr_gm_tab_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_251_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_fu_251_opcode = 2'd0;
    end else begin
        grp_fu_251_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_251_p0 = x_im_fu_702_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_251_p0 = x_re_fu_674_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_251_p0 = grp_fu_261_p2;
    end else begin
        grp_fu_251_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_251_p1 = reg_287;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_251_p1 = grp_fu_251_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_251_p1 = grp_fu_266_p2;
    end else begin
        grp_fu_251_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_fu_255_opcode = 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_255_opcode = 2'd0;
    end else begin
        grp_fu_255_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_255_p0 = x_im_fu_702_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_255_p0 = x_re_fu_674_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_255_p0 = grp_fu_271_p2;
    end else begin
        grp_fu_255_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_255_p1 = reg_287;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_255_p1 = grp_fu_251_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_255_p1 = grp_fu_276_p2;
    end else begin
        grp_fu_255_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        vla18_address0 = vla18_addr_363_reg_951;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        vla18_address0 = vla18_addr_361_reg_909;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        vla18_address0 = vla18_addr_359_reg_1011;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        vla18_address0 = vla18_addr_357_reg_974;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        vla18_address0 = zext_ln973_1_fu_689_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        vla18_address0 = zext_ln972_1_fu_661_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        vla18_address0 = zext_ln975_1_fu_621_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        vla18_address0 = zext_ln974_1_fu_557_p1;
    end else begin
        vla18_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        vla18_address1 = vla18_addr_362_reg_945;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        vla18_address1 = vla18_addr_360_reg_903;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        vla18_address1 = vla18_addr_358_reg_1005;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        vla18_address1 = vla18_addr_reg_968;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        vla18_address1 = zext_ln973_fu_680_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        vla18_address1 = zext_ln972_fu_652_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        vla18_address1 = zext_ln975_fu_612_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        vla18_address1 = zext_ln974_fu_546_p1;
    end else begin
        vla18_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        vla18_ce0 = 1'b1;
    end else begin
        vla18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        vla18_ce1 = 1'b1;
    end else begin
        vla18_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        vla18_d0 = {{bitcast_ln33_fu_767_p1[63:32]}};
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        vla18_d0 = {{bitcast_ln32_fu_748_p1[63:32]}};
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        vla18_d0 = {{bitcast_ln13_fu_728_p1[63:32]}};
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        vla18_d0 = {{bitcast_ln12_fu_708_p1[63:32]}};
    end else begin
        vla18_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        vla18_d1 = trunc_ln33_fu_771_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        vla18_d1 = trunc_ln32_fu_751_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        vla18_d1 = trunc_ln13_fu_732_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        vla18_d1 = trunc_ln12_fu_712_p1;
    end else begin
        vla18_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state10))) begin
        vla18_we0 = 4'd15;
    end else begin
        vla18_we0 = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state10))) begin
        vla18_we1 = 4'd15;
    end else begin
        vla18_we1 = 4'd0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln953_fu_341_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln959_fu_388_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln968_fu_457_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln959_fu_606_p2 = (zext_ln953_fu_596_p1 + indvars_iv_reg_208);

assign add_ln965_fu_403_p2 = (trunc_ln965_1_fu_399_p1 + trunc_ln965_reg_848);

assign add_ln972_1_fu_656_p2 = (trunc_ln23_reg_891 + 13'd1);

assign add_ln972_fu_475_p2 = (shl_ln101_fu_467_p3 + f);

assign add_ln973_1_fu_503_p2 = (shl_ln102_fu_495_p3 + f);

assign add_ln973_2_fu_684_p2 = (trunc_ln973_2_reg_897 + 13'd1);

assign add_ln973_fu_490_p2 = (trunc_ln972_fu_463_p1 + trunc_ln20_reg_821);

assign add_ln974_1_fu_531_p2 = (shl_ln103_fu_523_p3 + f);

assign add_ln974_2_fu_551_p2 = (trunc_ln974_1_fu_536_p4 + 13'd1);

assign add_ln974_fu_518_p2 = (trunc_ln972_fu_463_p1 + trunc_ln22_reg_853);

assign add_ln975_1_fu_575_p2 = (shl_ln104_fu_567_p3 + f);

assign add_ln975_2_fu_616_p2 = (trunc_ln24_reg_914 + 13'd1);

assign add_ln975_fu_562_p2 = (add_ln974_fu_518_p2 + trunc_ln20_reg_821);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bitcast_ln12_fu_708_p1 = grp_fu_251_p2;

assign bitcast_ln13_fu_728_p1 = grp_fu_251_p2;

assign bitcast_ln32_fu_748_p1 = fpct_re_5_reg_1028;

assign bitcast_ln33_fu_767_p1 = reg_287;

assign fpr_gm_tab_address0 = zext_ln966_fu_427_p1;

assign fpr_gm_tab_address1 = zext_ln965_fu_416_p1;

assign ht_fu_346_p4 = {{t_fu_90[62:1]}};

assign i1_3_fu_393_p2 = (i1_reg_230 + 63'd1);

assign icmp_ln953_fu_341_p2 = ((u_010_fu_94 < logn) ? 1'b1 : 1'b0);

assign icmp_ln959_fu_388_p2 = ((i1_reg_230 == trunc_ln21_reg_843) ? 1'b1 : 1'b0);

assign icmp_ln968_fu_457_p2 = ((j_02_reg_241 < indvars_iv_reg_208) ? 1'b1 : 1'b0);

assign j1_fu_600_p2 = (zext_ln953_fu_596_p1 + j1_12_reg_218);

assign j_13_fu_590_p2 = (j_02_reg_241 + 64'd1);

assign m_fu_437_p2 = m_08_fu_86 << 64'd1;

assign n_fu_297_p2 = 64'd1 << zext_ln949_fu_293_p1;

assign or_ln966_fu_421_p2 = (shl_ln_fu_408_p3 | 11'd1);

assign shl_ln101_fu_467_p3 = {{trunc_ln972_fu_463_p1}, {3'd0}};

assign shl_ln102_fu_495_p3 = {{add_ln973_fu_490_p2}, {3'd0}};

assign shl_ln103_fu_523_p3 = {{add_ln974_fu_518_p2}, {3'd0}};

assign shl_ln104_fu_567_p3 = {{add_ln975_fu_562_p2}, {3'd0}};

assign shl_ln_fu_408_p3 = {{add_ln965_fu_403_p2}, {1'd0}};

assign tmp_89_fu_626_p3 = {{vla18_load_241_reg_940}, {vla18_load_240_reg_935}};

assign tmp_90_fu_638_p3 = {{vla18_q0}, {vla18_q1}};

assign tmp_fu_666_p3 = {{vla18_q0}, {vla18_q1}};

assign tmp_s_fu_694_p3 = {{vla18_q0}, {vla18_q1}};

assign trunc_ln12_fu_712_p1 = bitcast_ln12_fu_708_p1[31:0];

assign trunc_ln13_fu_732_p1 = bitcast_ln13_fu_728_p1[31:0];

assign trunc_ln32_fu_751_p1 = bitcast_ln32_fu_748_p1[31:0];

assign trunc_ln33_fu_771_p1 = bitcast_ln33_fu_767_p1[31:0];

assign trunc_ln965_1_fu_399_p1 = i1_reg_230[9:0];

assign trunc_ln965_fu_374_p1 = m_08_fu_86[9:0];

assign trunc_ln972_fu_463_p1 = j_02_reg_241[11:0];

assign trunc_ln974_1_fu_536_p4 = {{add_ln974_1_fu_531_p2[14:2]}};

assign u_fu_432_p2 = (u_010_fu_94 + 32'd1);

assign x_im_fu_702_p1 = tmp_s_fu_694_p3;

assign x_re_fu_674_p1 = tmp_fu_666_p3;

assign y_im_1_fu_646_p1 = tmp_90_fu_638_p3;

assign y_re_1_fu_632_p1 = tmp_89_fu_626_p3;

assign zext_ln949_fu_293_p1 = logn;

assign zext_ln953_fu_596_p1 = t_fu_90;

assign zext_ln955_fu_360_p1 = ht_fu_346_p4;

assign zext_ln957_fu_356_p1 = ht_fu_346_p4;

assign zext_ln965_fu_416_p1 = shl_ln_fu_408_p3;

assign zext_ln966_fu_427_p1 = or_ln966_fu_421_p2;

assign zext_ln972_1_fu_661_p1 = add_ln972_1_fu_656_p2;

assign zext_ln972_fu_652_p1 = trunc_ln23_reg_891;

assign zext_ln973_1_fu_689_p1 = add_ln973_2_fu_684_p2;

assign zext_ln973_fu_680_p1 = trunc_ln973_2_reg_897;

assign zext_ln974_1_fu_557_p1 = add_ln974_2_fu_551_p2;

assign zext_ln974_fu_546_p1 = trunc_ln974_1_fu_536_p4;

assign zext_ln975_1_fu_621_p1 = add_ln975_2_fu_616_p2;

assign zext_ln975_fu_612_p1 = trunc_ln24_reg_914;

always @ (posedge ap_clk) begin
    zext_ln957_reg_833[62] <= 1'b0;
    trunc_ln965_reg_848[0] <= 1'b0;
    m_08_fu_86[0] <= 1'b0;
end

endmodule //keygen_FFT_1
