// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module keygen_poly_mul_fft_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        vla18_address0,
        vla18_ce0,
        vla18_we0,
        vla18_d0,
        vla18_q0,
        vla18_address1,
        vla18_ce1,
        vla18_we1,
        vla18_d1,
        vla18_q1,
        a,
        b,
        logn
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] vla18_address0;
output   vla18_ce0;
output  [3:0] vla18_we0;
output  [31:0] vla18_d0;
input  [31:0] vla18_q0;
output  [12:0] vla18_address1;
output   vla18_ce1;
output  [3:0] vla18_we1;
output  [31:0] vla18_d1;
input  [31:0] vla18_q1;
input  [14:0] a;
input  [14:0] b;
input  [31:0] logn;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[12:0] vla18_address0;
reg vla18_ce0;
reg[3:0] vla18_we0;
reg[31:0] vla18_d0;
reg[12:0] vla18_address1;
reg vla18_ce1;
reg[3:0] vla18_we1;
reg[31:0] vla18_d1;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [62:0] trunc_ln_reg_492;
reg   [11:0] trunc_ln10_reg_497;
reg   [12:0] vla18_addr_reg_505;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln511_fu_229_p2;
reg   [12:0] vla18_addr_302_reg_511;
reg   [12:0] trunc_ln516_2_reg_516;
reg   [12:0] trunc_ln12_reg_522;
reg   [12:0] trunc_ln13_reg_528;
reg   [31:0] vla18_load_reg_534;
wire    ap_CS_fsm_state3;
reg   [31:0] vla18_load_203_reg_539;
reg   [12:0] vla18_addr_303_reg_544;
reg   [12:0] vla18_addr_304_reg_550;
reg   [31:0] vla18_load_204_reg_555;
wire    ap_CS_fsm_state4;
reg   [31:0] vla18_load_205_reg_560;
reg   [31:0] vla18_load_206_reg_575;
wire    ap_CS_fsm_state5;
reg   [31:0] vla18_load_207_reg_580;
wire   [63:0] a_re_fu_390_p1;
wire    ap_CS_fsm_state6;
wire   [63:0] a_im_fu_402_p1;
wire   [63:0] b_re_fu_414_p1;
wire   [63:0] b_im_fu_428_p1;
wire   [63:0] grp_fu_167_p2;
wire    ap_CS_fsm_state7;
wire   [63:0] grp_fu_172_p2;
wire   [63:0] grp_fu_177_p2;
wire   [63:0] grp_fu_182_p2;
wire   [63:0] grp_fu_163_p2;
reg   [63:0] fpct_d_im_reg_639;
wire    ap_CS_fsm_state8;
wire   [63:0] zext_ln515_fu_263_p1;
wire   [63:0] zext_ln515_1_fu_274_p1;
wire   [63:0] zext_ln516_fu_342_p1;
wire   [63:0] zext_ln516_1_fu_351_p1;
wire   [63:0] zext_ln517_fu_356_p1;
wire   [63:0] zext_ln517_1_fu_365_p1;
wire   [63:0] zext_ln518_fu_370_p1;
wire   [63:0] zext_ln518_1_fu_379_p1;
reg   [62:0] u_02_fu_64;
wire   [62:0] u_198_fu_234_p2;
wire   [31:0] trunc_ln64_fu_438_p1;
wire    ap_CS_fsm_state9;
wire   [31:0] trunc_ln65_fu_457_p1;
wire   [63:0] zext_ln509_fu_187_p1;
wire   [63:0] n_fu_191_p2;
wire   [11:0] trunc_ln511_fu_225_p1;
wire   [14:0] shl_ln_fu_240_p3;
wire   [14:0] add_ln515_fu_248_p2;
wire   [12:0] trunc_ln11_fu_253_p4;
wire   [12:0] add_ln515_1_fu_268_p2;
wire   [11:0] add_ln516_fu_279_p2;
wire   [14:0] shl_ln62_fu_284_p3;
wire   [14:0] add_ln516_1_fu_292_p2;
wire   [14:0] add_ln517_fu_307_p2;
wire   [14:0] add_ln518_fu_322_p2;
wire   [12:0] add_ln516_2_fu_346_p2;
wire   [12:0] add_ln517_1_fu_360_p2;
wire   [12:0] add_ln518_1_fu_374_p2;
wire   [63:0] tmp_fu_384_p3;
wire   [63:0] tmp_s_fu_396_p3;
wire   [63:0] tmp_76_fu_408_p3;
wire   [63:0] tmp_77_fu_420_p3;
wire   [63:0] grp_fu_159_p2;
wire   [63:0] bitcast_ln64_fu_434_p1;
wire   [63:0] bitcast_ln65_fu_454_p1;
reg   [8:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

keygen_dsub_64ns_64ns_64_2_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dsub_64ns_64ns_64_2_full_dsp_1_U279(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_167_p2),
    .din1(grp_fu_172_p2),
    .ce(1'b1),
    .dout(grp_fu_159_p2)
);

keygen_dadd_64ns_64ns_64_2_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_2_full_dsp_1_U280(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_177_p2),
    .din1(grp_fu_182_p2),
    .ce(1'b1),
    .dout(grp_fu_163_p2)
);

keygen_dmul_64ns_64ns_64_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_2_max_dsp_1_U281(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(a_re_fu_390_p1),
    .din1(b_re_fu_414_p1),
    .ce(1'b1),
    .dout(grp_fu_167_p2)
);

keygen_dmul_64ns_64ns_64_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_2_max_dsp_1_U282(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(a_im_fu_402_p1),
    .din1(b_im_fu_428_p1),
    .ce(1'b1),
    .dout(grp_fu_172_p2)
);

keygen_dmul_64ns_64ns_64_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_2_max_dsp_1_U283(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(a_re_fu_390_p1),
    .din1(b_im_fu_428_p1),
    .ce(1'b1),
    .dout(grp_fu_177_p2)
);

keygen_dmul_64ns_64ns_64_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_2_max_dsp_1_U284(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(a_im_fu_402_p1),
    .din1(b_re_fu_414_p1),
    .ce(1'b1),
    .dout(grp_fu_182_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        u_02_fu_64 <= 63'd0;
    end else if (((icmp_ln511_fu_229_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        u_02_fu_64 <= u_198_fu_234_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        fpct_d_im_reg_639 <= grp_fu_163_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        trunc_ln10_reg_497 <= {{n_fu_191_p2[12:1]}};
        trunc_ln_reg_492 <= {{n_fu_191_p2[63:1]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln511_fu_229_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        trunc_ln12_reg_522 <= {{add_ln517_fu_307_p2[14:2]}};
        trunc_ln13_reg_528 <= {{add_ln518_fu_322_p2[14:2]}};
        trunc_ln516_2_reg_516 <= {{add_ln516_1_fu_292_p2[14:2]}};
        vla18_addr_302_reg_511 <= zext_ln515_1_fu_274_p1;
        vla18_addr_reg_505 <= zext_ln515_fu_263_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        vla18_addr_303_reg_544 <= zext_ln516_fu_342_p1;
        vla18_addr_304_reg_550 <= zext_ln516_1_fu_351_p1;
        vla18_load_203_reg_539 <= vla18_q0;
        vla18_load_reg_534 <= vla18_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        vla18_load_204_reg_555 <= vla18_q1;
        vla18_load_205_reg_560 <= vla18_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        vla18_load_206_reg_575 <= vla18_q1;
        vla18_load_207_reg_580 <= vla18_q0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((icmp_ln511_fu_229_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln511_fu_229_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        vla18_address0 = vla18_addr_304_reg_550;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        vla18_address0 = vla18_addr_302_reg_511;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        vla18_address0 = zext_ln518_1_fu_379_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        vla18_address0 = zext_ln517_1_fu_365_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        vla18_address0 = zext_ln516_1_fu_351_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        vla18_address0 = zext_ln515_1_fu_274_p1;
    end else begin
        vla18_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        vla18_address1 = vla18_addr_303_reg_544;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        vla18_address1 = vla18_addr_reg_505;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        vla18_address1 = zext_ln518_fu_370_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        vla18_address1 = zext_ln517_fu_356_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        vla18_address1 = zext_ln516_fu_342_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        vla18_address1 = zext_ln515_fu_263_p1;
    end else begin
        vla18_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        vla18_ce0 = 1'b1;
    end else begin
        vla18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        vla18_ce1 = 1'b1;
    end else begin
        vla18_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        vla18_d0 = {{bitcast_ln65_fu_454_p1[63:32]}};
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        vla18_d0 = {{bitcast_ln64_fu_434_p1[63:32]}};
    end else begin
        vla18_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        vla18_d1 = trunc_ln65_fu_457_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        vla18_d1 = trunc_ln64_fu_438_p1;
    end else begin
        vla18_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        vla18_we0 = 4'd15;
    end else begin
        vla18_we0 = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        vla18_we1 = 4'd15;
    end else begin
        vla18_we1 = 4'd0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln511_fu_229_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_im_fu_402_p1 = tmp_s_fu_396_p3;

assign a_re_fu_390_p1 = tmp_fu_384_p3;

assign add_ln515_1_fu_268_p2 = (trunc_ln11_fu_253_p4 + 13'd1);

assign add_ln515_fu_248_p2 = (shl_ln_fu_240_p3 + a);

assign add_ln516_1_fu_292_p2 = (shl_ln62_fu_284_p3 + a);

assign add_ln516_2_fu_346_p2 = (trunc_ln516_2_reg_516 + 13'd1);

assign add_ln516_fu_279_p2 = (trunc_ln511_fu_225_p1 + trunc_ln10_reg_497);

assign add_ln517_1_fu_360_p2 = (trunc_ln12_reg_522 + 13'd1);

assign add_ln517_fu_307_p2 = (shl_ln_fu_240_p3 + b);

assign add_ln518_1_fu_374_p2 = (trunc_ln13_reg_528 + 13'd1);

assign add_ln518_fu_322_p2 = (shl_ln62_fu_284_p3 + b);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign b_im_fu_428_p1 = tmp_77_fu_420_p3;

assign b_re_fu_414_p1 = tmp_76_fu_408_p3;

assign bitcast_ln64_fu_434_p1 = grp_fu_159_p2;

assign bitcast_ln65_fu_454_p1 = fpct_d_im_reg_639;

assign icmp_ln511_fu_229_p2 = ((u_02_fu_64 == trunc_ln_reg_492) ? 1'b1 : 1'b0);

assign n_fu_191_p2 = 64'd1 << zext_ln509_fu_187_p1;

assign shl_ln62_fu_284_p3 = {{add_ln516_fu_279_p2}, {3'd0}};

assign shl_ln_fu_240_p3 = {{trunc_ln511_fu_225_p1}, {3'd0}};

assign tmp_76_fu_408_p3 = {{vla18_load_207_reg_580}, {vla18_load_206_reg_575}};

assign tmp_77_fu_420_p3 = {{vla18_q0}, {vla18_q1}};

assign tmp_fu_384_p3 = {{vla18_load_203_reg_539}, {vla18_load_reg_534}};

assign tmp_s_fu_396_p3 = {{vla18_load_205_reg_560}, {vla18_load_204_reg_555}};

assign trunc_ln11_fu_253_p4 = {{add_ln515_fu_248_p2[14:2]}};

assign trunc_ln511_fu_225_p1 = u_02_fu_64[11:0];

assign trunc_ln64_fu_438_p1 = bitcast_ln64_fu_434_p1[31:0];

assign trunc_ln65_fu_457_p1 = bitcast_ln65_fu_454_p1[31:0];

assign u_198_fu_234_p2 = (u_02_fu_64 + 63'd1);

assign zext_ln509_fu_187_p1 = logn;

assign zext_ln515_1_fu_274_p1 = add_ln515_1_fu_268_p2;

assign zext_ln515_fu_263_p1 = trunc_ln11_fu_253_p4;

assign zext_ln516_1_fu_351_p1 = add_ln516_2_fu_346_p2;

assign zext_ln516_fu_342_p1 = trunc_ln516_2_reg_516;

assign zext_ln517_1_fu_365_p1 = add_ln517_1_fu_360_p2;

assign zext_ln517_fu_356_p1 = trunc_ln12_reg_522;

assign zext_ln518_1_fu_379_p1 = add_ln518_1_fu_374_p2;

assign zext_ln518_fu_370_p1 = trunc_ln13_reg_528;

endmodule //keygen_poly_mul_fft_1
