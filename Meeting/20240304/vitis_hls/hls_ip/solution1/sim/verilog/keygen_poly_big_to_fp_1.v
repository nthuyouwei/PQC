// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module keygen_poly_big_to_fp_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        vla18_address0,
        vla18_ce0,
        vla18_we0,
        vla18_d0,
        vla18_q0,
        vla18_address1,
        vla18_ce1,
        vla18_we1,
        vla18_d1,
        vla18_q1,
        d,
        f,
        flen,
        fstride,
        logn
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] vla18_address0;
output   vla18_ce0;
output  [3:0] vla18_we0;
output  [31:0] vla18_d0;
input  [31:0] vla18_q0;
output  [12:0] vla18_address1;
output   vla18_ce1;
output  [3:0] vla18_we1;
output  [31:0] vla18_d1;
input  [31:0] vla18_q1;
input  [14:0] d;
input  [14:0] f;
input  [3:0] flen;
input  [8:0] fstride;
input  [31:0] logn;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[12:0] vla18_address0;
reg vla18_ce0;
reg[3:0] vla18_we0;
reg[31:0] vla18_d0;
reg[12:0] vla18_address1;
reg vla18_ce1;
reg[3:0] vla18_we1;
reg[31:0] vla18_d1;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] fstride_cast_fu_250_p1;
reg   [63:0] fstride_cast_reg_660;
wire   [63:0] n_fu_258_p2;
reg   [63:0] n_reg_665;
wire   [0:0] icmp_ln2336_fu_264_p2;
reg   [0:0] icmp_ln2336_reg_671;
wire   [12:0] zext_ln2342_fu_270_p1;
reg   [12:0] zext_ln2342_reg_691;
wire   [63:0] u_201_fu_297_p2;
reg   [63:0] u_201_reg_702;
wire    ap_CS_fsm_state2;
wire   [12:0] trunc_ln2352_fu_303_p1;
reg   [12:0] trunc_ln2352_reg_707;
wire   [0:0] icmp_ln2342_fu_292_p2;
wire  signed [31:0] sext_ln2344_fu_425_p1;
reg  signed [31:0] sext_ln2344_reg_720;
wire    ap_CS_fsm_state3;
wire   [0:0] cc_fu_429_p1;
wire  signed [30:0] sext_ln2353_fu_443_p1;
reg  signed [30:0] sext_ln2353_reg_730;
wire   [31:0] zext_ln2353_fu_447_p1;
reg   [31:0] zext_ln2353_reg_735;
wire   [3:0] v_37_fu_456_p2;
reg   [3:0] v_37_reg_743;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln2357_fu_451_p2;
reg   [0:0] tmp_reg_753;
wire    ap_CS_fsm_state5;
wire  signed [63:0] sext_ln2364_fu_638_p1;
reg   [63:0] sext_ln2364_reg_758;
wire   [63:0] grp_fu_238_p2;
reg   [63:0] fsc_reg_763;
wire   [63:0] grp_fpr_of_fu_228_ap_return;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire   [63:0] grp_fu_233_p2;
wire    ap_CS_fsm_state8;
wire    grp_fpr_of_fu_228_ap_start;
wire    grp_fpr_of_fu_228_ap_done;
wire    grp_fpr_of_fu_228_ap_idle;
wire    grp_fpr_of_fu_228_ap_ready;
reg   [63:0] fsc_1_reg_183;
reg   [63:0] x_25_reg_195;
reg   [0:0] cc_04_reg_207;
reg   [3:0] v_reg_217;
reg    grp_fpr_of_fu_228_ap_start_reg;
wire   [63:0] zext_ln2352_fu_341_p1;
wire   [63:0] zext_ln2338_fu_384_p1;
wire   [0:0] icmp_ln2337_fu_346_p2;
wire   [63:0] zext_ln2338_1_fu_395_p1;
wire   [63:0] zext_ln2360_1_fu_494_p1;
wire   [63:0] zext_ln2366_fu_529_p1;
wire   [63:0] zext_ln2366_1_fu_556_p1;
reg   [63:0] u_01_fu_92;
wire   [63:0] add_ln2342_1_fu_561_p2;
wire   [63:0] u_199_fu_351_p2;
reg   [63:0] u_17_fu_96;
wire   [31:0] trunc_ln2366_3_fu_534_p1;
reg   [63:0] grp_fu_238_p0;
reg   [63:0] grp_fu_238_p1;
wire   [63:0] zext_ln2335_fu_254_p1;
wire   [12:0] add_ln2352_fu_307_p2;
wire   [12:0] add_ln2352_2_fu_313_p2;
wire   [14:0] shl_ln63_fu_318_p3;
wire   [14:0] add_ln2352_1_fu_326_p2;
wire   [12:0] lshr_ln2352_1_fu_331_p4;
wire   [11:0] trunc_ln2338_fu_357_p1;
wire   [14:0] shl_ln_fu_361_p3;
wire   [14:0] add_ln2338_fu_369_p2;
wire   [12:0] trunc_ln_fu_374_p4;
wire   [12:0] add_ln2338_1_fu_389_p2;
wire   [1:0] trunc_ln2352_1_fu_405_p4;
wire   [2:0] zext_ln2352_1_fu_415_p1;
wire  signed [2:0] neg_fu_419_p2;
wire   [1:0] xm_fu_433_p4;
wire   [12:0] zext_ln2360_fu_462_p1;
wire   [12:0] add_ln2360_fu_466_p2;
wire   [14:0] shl_ln65_fu_471_p3;
wire   [14:0] add_ln2360_1_fu_479_p2;
wire   [12:0] lshr_ln_fu_484_p4;
wire   [11:0] trunc_ln2366_fu_499_p1;
wire   [14:0] shl_ln64_fu_502_p3;
wire   [14:0] add_ln2366_fu_510_p2;
wire   [12:0] trunc_ln2366_2_fu_519_p4;
wire   [63:0] bitcast_ln2366_fu_515_p1;
wire   [12:0] add_ln2366_1_fu_550_p2;
wire   [30:0] trunc_ln2360_fu_575_p1;
wire   [31:0] xor_ln2360_fu_579_p2;
wire   [31:0] zext_ln2357_fu_593_p1;
wire   [30:0] xor_ln2360_1_fu_588_p2;
wire   [30:0] zext_ln2360_2_fu_584_p1;
wire   [31:0] w_fu_597_p2;
wire   [30:0] w_58_fu_603_p2;
wire   [31:0] shl_ln2363_fu_621_p2;
wire   [31:0] zext_ln2358_fu_617_p1;
wire   [31:0] and_ln2363_fu_627_p2;
wire   [31:0] w_59_fu_632_p2;
reg    grp_fu_238_ce;
reg   [7:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 grp_fpr_of_fu_228_ap_start_reg = 1'b0;
end

keygen_fpr_of grp_fpr_of_fu_228(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_fpr_of_fu_228_ap_start),
    .ap_done(grp_fpr_of_fu_228_ap_done),
    .ap_idle(grp_fpr_of_fu_228_ap_idle),
    .ap_ready(grp_fpr_of_fu_228_ap_ready),
    .i(sext_ln2364_reg_758),
    .ap_return(grp_fpr_of_fu_228_ap_return)
);

keygen_dadd_64ns_64ns_64_2_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_2_full_dsp_1_U271(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(x_25_reg_195),
    .din1(grp_fu_238_p2),
    .ce(1'b1),
    .dout(grp_fu_233_p2)
);

keygen_dmul_64ns_64ns_64_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_2_max_dsp_1_U272(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_238_p0),
    .din1(grp_fu_238_p1),
    .ce(grp_fu_238_ce),
    .dout(grp_fu_238_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_fpr_of_fu_228_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            grp_fpr_of_fu_228_ap_start_reg <= 1'b1;
        end else if ((grp_fpr_of_fu_228_ap_ready == 1'b1)) begin
            grp_fpr_of_fu_228_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cc_04_reg_207 <= tmp_reg_753;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cc_04_reg_207 <= cc_fu_429_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        fsc_1_reg_183 <= fsc_reg_763;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        fsc_1_reg_183 <= 64'd4607182418800017408;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln2336_fu_264_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | ((icmp_ln2336_fu_264_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        u_01_fu_92 <= 64'd0;
    end else if (((icmp_ln2336_reg_671 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln2337_fu_346_p2 == 1'd0))) begin
        u_01_fu_92 <= u_199_fu_351_p2;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln2357_fu_451_p2 == 1'd1))) begin
        u_01_fu_92 <= add_ln2342_1_fu_561_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln2336_fu_264_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        u_17_fu_96 <= 64'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln2357_fu_451_p2 == 1'd1))) begin
        u_17_fu_96 <= u_201_reg_702;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        v_reg_217 <= v_37_reg_743;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        v_reg_217 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        x_25_reg_195 <= grp_fu_233_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        x_25_reg_195 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        fsc_reg_763 <= grp_fu_238_p2;
        sext_ln2364_reg_758 <= sext_ln2364_fu_638_p1;
        tmp_reg_753 <= w_fu_597_p2[32'd31];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        fstride_cast_reg_660[8 : 0] <= fstride_cast_fu_250_p1[8 : 0];
        icmp_ln2336_reg_671 <= icmp_ln2336_fu_264_p2;
        n_reg_665 <= n_fu_258_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sext_ln2344_reg_720 <= sext_ln2344_fu_425_p1;
        sext_ln2353_reg_730 <= sext_ln2353_fu_443_p1;
        zext_ln2353_reg_735[30 : 0] <= zext_ln2353_fu_447_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln2342_fu_292_p2 == 1'd0) & (icmp_ln2336_reg_671 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        trunc_ln2352_reg_707 <= trunc_ln2352_fu_303_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln2336_reg_671 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        u_201_reg_702 <= u_201_fu_297_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        v_37_reg_743 <= v_37_fu_456_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln2336_fu_264_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        zext_ln2342_reg_691[3 : 0] <= zext_ln2342_fu_270_p1[3 : 0];
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((grp_fpr_of_fu_228_ap_done == 1'b0)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (((icmp_ln2342_fu_292_p2 == 1'd1) & (icmp_ln2336_reg_671 == 1'd0)) | ((icmp_ln2336_reg_671 == 1'd1) & (icmp_ln2337_fu_346_p2 == 1'd1)))) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (((icmp_ln2342_fu_292_p2 == 1'd1) & (icmp_ln2336_reg_671 == 1'd0)) | ((icmp_ln2336_reg_671 == 1'd1) & (icmp_ln2337_fu_346_p2 == 1'd1))))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state6) & (grp_fpr_of_fu_228_ap_done == 1'b1)))) begin
        grp_fu_238_ce = 1'b1;
    end else begin
        grp_fu_238_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_238_p0 = grp_fpr_of_fu_228_ap_return;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_238_p0 = fsc_1_reg_183;
    end else begin
        grp_fu_238_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_238_p1 = fsc_1_reg_183;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_238_p1 = 64'd4746794007248502784;
    end else begin
        grp_fu_238_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        vla18_address0 = zext_ln2366_fu_529_p1;
    end else if (((icmp_ln2336_reg_671 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln2337_fu_346_p2 == 1'd0))) begin
        vla18_address0 = zext_ln2338_1_fu_395_p1;
    end else if (((icmp_ln2342_fu_292_p2 == 1'd0) & (icmp_ln2336_reg_671 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        vla18_address0 = zext_ln2352_fu_341_p1;
    end else begin
        vla18_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln2357_fu_451_p2 == 1'd1))) begin
        vla18_address1 = zext_ln2366_1_fu_556_p1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln2357_fu_451_p2 == 1'd0))) begin
        vla18_address1 = zext_ln2360_1_fu_494_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        vla18_address1 = zext_ln2338_fu_384_p1;
    end else begin
        vla18_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((icmp_ln2342_fu_292_p2 == 1'd0) & (icmp_ln2336_reg_671 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln2336_reg_671 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln2337_fu_346_p2 == 1'd0)))) begin
        vla18_ce0 = 1'b1;
    end else begin
        vla18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state4) & (icmp_ln2357_fu_451_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state4) & (icmp_ln2357_fu_451_p2 == 1'd0)))) begin
        vla18_ce1 = 1'b1;
    end else begin
        vla18_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        vla18_d0 = trunc_ln2366_3_fu_534_p1;
    end else if (((icmp_ln2336_reg_671 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln2337_fu_346_p2 == 1'd0))) begin
        vla18_d0 = 32'd0;
    end else begin
        vla18_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln2357_fu_451_p2 == 1'd1))) begin
        vla18_d1 = {{bitcast_ln2366_fu_515_p1[63:32]}};
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        vla18_d1 = 32'd0;
    end else begin
        vla18_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (icmp_ln2357_fu_451_p2 == 1'd1)) | ((icmp_ln2336_reg_671 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln2337_fu_346_p2 == 1'd0)))) begin
        vla18_we0 = 4'd15;
    end else begin
        vla18_we0 = 4'd0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (icmp_ln2357_fu_451_p2 == 1'd1)) | ((icmp_ln2336_reg_671 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln2337_fu_346_p2 == 1'd0)))) begin
        vla18_we1 = 4'd15;
    end else begin
        vla18_we1 = 4'd0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (((icmp_ln2342_fu_292_p2 == 1'd1) & (icmp_ln2336_reg_671 == 1'd0)) | ((icmp_ln2336_reg_671 == 1'd1) & (icmp_ln2337_fu_346_p2 == 1'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((icmp_ln2336_reg_671 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln2337_fu_346_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln2357_fu_451_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (grp_fpr_of_fu_228_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln2338_1_fu_389_p2 = (trunc_ln_fu_374_p4 + 13'd1);

assign add_ln2338_fu_369_p2 = (shl_ln_fu_361_p3 + d);

assign add_ln2342_1_fu_561_p2 = (u_01_fu_92 + fstride_cast_reg_660);

assign add_ln2352_1_fu_326_p2 = (shl_ln63_fu_318_p3 + f);

assign add_ln2352_2_fu_313_p2 = (add_ln2352_fu_307_p2 + zext_ln2342_reg_691);

assign add_ln2352_fu_307_p2 = ($signed(trunc_ln2352_fu_303_p1) + $signed(13'd8191));

assign add_ln2360_1_fu_479_p2 = (shl_ln65_fu_471_p3 + f);

assign add_ln2360_fu_466_p2 = (zext_ln2360_fu_462_p1 + trunc_ln2352_reg_707);

assign add_ln2366_1_fu_550_p2 = (trunc_ln2366_2_fu_519_p4 + 13'd1);

assign add_ln2366_fu_510_p2 = (shl_ln64_fu_502_p3 + d);

assign and_ln2363_fu_627_p2 = (shl_ln2363_fu_621_p2 & sext_ln2344_reg_720);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign bitcast_ln2366_fu_515_p1 = x_25_reg_195;

assign cc_fu_429_p1 = neg_fu_419_p2[0:0];

assign fstride_cast_fu_250_p1 = fstride;

assign grp_fpr_of_fu_228_ap_start = grp_fpr_of_fu_228_ap_start_reg;

assign icmp_ln2336_fu_264_p2 = ((flen == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln2337_fu_346_p2 = ((u_01_fu_92 == n_reg_665) ? 1'b1 : 1'b0);

assign icmp_ln2342_fu_292_p2 = ((u_17_fu_96 == n_reg_665) ? 1'b1 : 1'b0);

assign icmp_ln2357_fu_451_p2 = ((v_reg_217 == flen) ? 1'b1 : 1'b0);

assign lshr_ln2352_1_fu_331_p4 = {{add_ln2352_1_fu_326_p2[14:2]}};

assign lshr_ln_fu_484_p4 = {{add_ln2360_1_fu_479_p2[14:2]}};

assign n_fu_258_p2 = 64'd1 << zext_ln2335_fu_254_p1;

assign neg_fu_419_p2 = (3'd0 - zext_ln2352_1_fu_415_p1);

assign sext_ln2344_fu_425_p1 = neg_fu_419_p2;

assign sext_ln2353_fu_443_p1 = $signed(xm_fu_433_p4);

assign sext_ln2364_fu_638_p1 = $signed(w_59_fu_632_p2);

assign shl_ln2363_fu_621_p2 = w_fu_597_p2 << 32'd1;

assign shl_ln63_fu_318_p3 = {{add_ln2352_2_fu_313_p2}, {2'd0}};

assign shl_ln64_fu_502_p3 = {{trunc_ln2366_fu_499_p1}, {3'd0}};

assign shl_ln65_fu_471_p3 = {{add_ln2360_fu_466_p2}, {2'd0}};

assign shl_ln_fu_361_p3 = {{trunc_ln2338_fu_357_p1}, {3'd0}};

assign trunc_ln2338_fu_357_p1 = u_01_fu_92[11:0];

assign trunc_ln2352_1_fu_405_p4 = {{vla18_q0[31:30]}};

assign trunc_ln2352_fu_303_p1 = u_01_fu_92[12:0];

assign trunc_ln2360_fu_575_p1 = vla18_q1[30:0];

assign trunc_ln2366_2_fu_519_p4 = {{add_ln2366_fu_510_p2[14:2]}};

assign trunc_ln2366_3_fu_534_p1 = bitcast_ln2366_fu_515_p1[31:0];

assign trunc_ln2366_fu_499_p1 = u_17_fu_96[11:0];

assign trunc_ln_fu_374_p4 = {{add_ln2338_fu_369_p2[14:2]}};

assign u_199_fu_351_p2 = (u_01_fu_92 + 64'd1);

assign u_201_fu_297_p2 = (u_17_fu_96 + 64'd1);

assign v_37_fu_456_p2 = (v_reg_217 + 4'd1);

assign w_58_fu_603_p2 = (xor_ln2360_1_fu_588_p2 + zext_ln2360_2_fu_584_p1);

assign w_59_fu_632_p2 = (zext_ln2358_fu_617_p1 - and_ln2363_fu_627_p2);

assign w_fu_597_p2 = (xor_ln2360_fu_579_p2 + zext_ln2357_fu_593_p1);

assign xm_fu_433_p4 = {{neg_fu_419_p2[2:1]}};

assign xor_ln2360_1_fu_588_p2 = (trunc_ln2360_fu_575_p1 ^ sext_ln2353_reg_730);

assign xor_ln2360_fu_579_p2 = (zext_ln2353_reg_735 ^ vla18_q1);

assign zext_ln2335_fu_254_p1 = logn;

assign zext_ln2338_1_fu_395_p1 = add_ln2338_1_fu_389_p2;

assign zext_ln2338_fu_384_p1 = trunc_ln_fu_374_p4;

assign zext_ln2342_fu_270_p1 = flen;

assign zext_ln2352_1_fu_415_p1 = trunc_ln2352_1_fu_405_p4;

assign zext_ln2352_fu_341_p1 = lshr_ln2352_1_fu_331_p4;

assign zext_ln2353_fu_447_p1 = $unsigned(sext_ln2353_fu_443_p1);

assign zext_ln2357_fu_593_p1 = cc_04_reg_207;

assign zext_ln2358_fu_617_p1 = w_58_fu_603_p2;

assign zext_ln2360_1_fu_494_p1 = lshr_ln_fu_484_p4;

assign zext_ln2360_2_fu_584_p1 = cc_04_reg_207;

assign zext_ln2360_fu_462_p1 = v_reg_217;

assign zext_ln2366_1_fu_556_p1 = add_ln2366_1_fu_550_p2;

assign zext_ln2366_fu_529_p1 = trunc_ln2366_2_fu_519_p4;

always @ (posedge ap_clk) begin
    fstride_cast_reg_660[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln2342_reg_691[12:4] <= 9'b000000000;
    zext_ln2353_reg_735[31] <= 1'b0;
end

endmodule //keygen_poly_big_to_fp_1
