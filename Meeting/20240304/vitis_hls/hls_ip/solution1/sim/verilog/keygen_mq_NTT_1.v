// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module keygen_mq_NTT_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        tmp2108_address0,
        tmp2108_ce0,
        tmp2108_we0,
        tmp2108_d0,
        tmp2108_q0
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] tmp2108_address0;
output   tmp2108_ce0;
output  [1:0] tmp2108_we0;
output  [15:0] tmp2108_d0;
input  [15:0] tmp2108_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[10:0] tmp2108_address0;
reg tmp2108_ce0;
reg[1:0] tmp2108_we0;
reg[15:0] tmp2108_d0;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [9:0] GMb_address0;
reg    GMb_ce0;
wire   [13:0] GMb_q0;
wire   [10:0] zext_ln514_fu_194_p1;
reg   [10:0] zext_ln514_reg_498;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_fu_176_p3;
wire   [19:0] zext_ln512_fu_198_p1;
wire   [63:0] zext_ln515_fu_202_p1;
reg   [63:0] zext_ln515_reg_509;
wire    ap_CS_fsm_state3;
wire   [9:0] i_fu_215_p2;
reg   [9:0] i_reg_517;
wire   [0:0] icmp_ln515_fu_210_p2;
wire   [29:0] zext_ln517_fu_249_p1;
reg   [29:0] zext_ln517_reg_527;
wire    ap_CS_fsm_state4;
wire   [10:0] trunc_ln524_fu_263_p1;
reg   [10:0] trunc_ln524_reg_535;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln521_fu_257_p2;
reg   [10:0] tmp2108_addr_1_reg_540;
wire   [63:0] j_8_fu_277_p2;
reg   [63:0] j_8_reg_545;
wire   [19:0] j1_fu_287_p2;
wire   [19:0] add_ln515_fu_293_p2;
wire    ap_CS_fsm_state6;
wire   [29:0] grp_fu_456_p2;
reg   [29:0] z_reg_565;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state12;
reg   [10:0] tmp2108_addr_reg_580;
wire    ap_CS_fsm_state14;
wire   [15:0] add_ln527_fu_450_p2;
reg   [15:0] add_ln527_reg_590;
wire    ap_CS_fsm_state15;
reg   [19:0] indvars_iv_reg_118;
reg   [19:0] j1_2_reg_128;
reg   [9:0] i_04_reg_140;
reg   [63:0] j_02_reg_151;
wire    ap_CS_fsm_state16;
wire   [63:0] zext_ln519_fu_230_p1;
wire   [63:0] zext_ln525_fu_272_p1;
wire   [63:0] zext_ln524_fu_309_p1;
reg   [10:0] t_fu_76;
reg   [10:0] m_fu_80;
wire   [10:0] m_6_fu_235_p2;
wire   [15:0] add_ln526_fu_417_p2;
wire   [9:0] ht_fu_184_p4;
wire   [10:0] zext_ln515_2_fu_206_p1;
wire   [9:0] trunc_ln507_fu_221_p1;
wire   [9:0] add_ln519_fu_224_p2;
wire   [63:0] zext_ln515_3_fu_253_p1;
wire   [10:0] add_ln525_fu_267_p2;
wire   [19:0] zext_ln507_fu_283_p1;
wire  signed [15:0] zext_ln406_fu_306_p0;
wire   [15:0] grp_fu_462_p2;
wire   [30:0] grp_fu_469_p3;
wire   [14:0] trunc_ln_fu_324_p4;
wire  signed [14:0] z_87_fu_337_p2;
wire   [0:0] tmp_183_fu_347_p3;
wire   [15:0] select_ln422_fu_355_p3;
wire  signed [15:0] sext_ln396_fu_343_p1;
wire   [15:0] z_89_fu_363_p2;
wire   [16:0] zext_ln522_1_fu_320_p1;
wire   [16:0] add_ln356_fu_373_p2;
wire  signed [17:0] sext_ln356_fu_379_p1;
wire  signed [17:0] sext_ln396_1_fu_369_p1;
wire   [17:0] d_fu_383_p2;
wire   [15:0] zext_ln421_fu_333_p1;
wire   [15:0] add_ln526_1_fu_397_p2;
wire   [0:0] tmp_184_fu_389_p3;
wire   [15:0] select_ln526_fu_409_p3;
wire   [15:0] add_ln526_2_fu_403_p2;
wire   [17:0] zext_ln522_fu_316_p1;
wire   [17:0] d_4_fu_424_p2;
wire   [0:0] tmp_185_fu_430_p3;
wire   [15:0] select_ln527_fu_442_p3;
wire   [15:0] trunc_ln374_fu_438_p1;
wire   [15:0] grp_fu_456_p0;
wire   [13:0] grp_fu_456_p1;
wire  signed [15:0] grp_fu_462_p0;
wire   [13:0] grp_fu_462_p1;
wire   [15:0] grp_fu_469_p0;
wire   [13:0] grp_fu_469_p1;
wire   [29:0] grp_fu_469_p2;
reg   [15:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire   [29:0] grp_fu_456_p00;
wire   [29:0] grp_fu_469_p00;
wire   [30:0] grp_fu_469_p20;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
end

keygen_mq_NTT_GMb_ROM_AUTO_1R #(
    .DataWidth( 14 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
GMb_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(GMb_address0),
    .ce0(GMb_ce0),
    .q0(GMb_q0)
);

keygen_mul_mul_16ns_14ns_30_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 30 ))
mul_mul_16ns_14ns_30_4_1_U118(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_456_p0),
    .din1(grp_fu_456_p1),
    .ce(1'b1),
    .dout(grp_fu_456_p2)
);

keygen_mul_mul_16s_14ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 16 ))
mul_mul_16s_14ns_16_4_1_U119(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_462_p0),
    .din1(grp_fu_462_p1),
    .ce(1'b1),
    .dout(grp_fu_462_p2)
);

keygen_mac_muladd_16ns_14ns_30ns_31_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .din2_WIDTH( 30 ),
    .dout_WIDTH( 31 ))
mac_muladd_16ns_14ns_30ns_31_4_1_U120(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_469_p0),
    .din1(grp_fu_469_p1),
    .din2(grp_fu_469_p2),
    .ce(1'b1),
    .dout(grp_fu_469_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_176_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_04_reg_140 <= 10'd0;
    end else if (((icmp_ln521_fu_257_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        i_04_reg_140 <= i_reg_517;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_176_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvars_iv_reg_118 <= zext_ln512_fu_198_p1;
    end else if (((icmp_ln521_fu_257_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        indvars_iv_reg_118 <= add_ln515_fu_293_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_176_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j1_2_reg_128 <= 20'd0;
    end else if (((icmp_ln521_fu_257_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        j1_2_reg_128 <= j1_fu_287_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        j_02_reg_151 <= j_8_reg_545;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        j_02_reg_151 <= zext_ln515_reg_509;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        m_fu_80 <= 11'd1;
    end else if (((icmp_ln515_fu_210_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        m_fu_80 <= m_6_fu_235_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        t_fu_76 <= 11'd1024;
    end else if (((icmp_ln515_fu_210_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        t_fu_76 <= zext_ln514_reg_498;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        add_ln527_reg_590 <= add_ln527_fu_450_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_517 <= i_fu_215_p2;
        zext_ln515_reg_509[19 : 0] <= zext_ln515_fu_202_p1[19 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln521_fu_257_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        j_8_reg_545 <= j_8_fu_277_p2;
        tmp2108_addr_1_reg_540 <= zext_ln525_fu_272_p1;
        trunc_ln524_reg_535 <= trunc_ln524_fu_263_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        tmp2108_addr_reg_580 <= zext_ln524_fu_309_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        z_reg_565 <= grp_fu_456_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_176_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln514_reg_498[9 : 0] <= zext_ln514_fu_194_p1[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        zext_ln517_reg_527[13 : 0] <= zext_ln517_fu_249_p1[13 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        GMb_ce0 = 1'b1;
    end else begin
        GMb_ce0 = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((tmp_fu_176_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_176_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        tmp2108_address0 = tmp2108_addr_1_reg_540;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        tmp2108_address0 = tmp2108_addr_reg_580;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        tmp2108_address0 = zext_ln524_fu_309_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp2108_address0 = zext_ln525_fu_272_p1;
    end else begin
        tmp2108_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14))) begin
        tmp2108_ce0 = 1'b1;
    end else begin
        tmp2108_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        tmp2108_d0 = add_ln527_reg_590;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        tmp2108_d0 = add_ln526_fu_417_p2;
    end else begin
        tmp2108_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15))) begin
        tmp2108_we0 = 2'd3;
    end else begin
        tmp2108_we0 = 2'd0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_176_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln515_fu_210_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln521_fu_257_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign GMb_address0 = zext_ln519_fu_230_p1;

assign add_ln356_fu_373_p2 = ($signed(zext_ln522_1_fu_320_p1) + $signed(17'd118783));

assign add_ln515_fu_293_p2 = (zext_ln507_fu_283_p1 + indvars_iv_reg_118);

assign add_ln519_fu_224_p2 = (i_04_reg_140 + trunc_ln507_fu_221_p1);

assign add_ln525_fu_267_p2 = (trunc_ln524_fu_263_p1 + zext_ln514_reg_498);

assign add_ln526_1_fu_397_p2 = (zext_ln421_fu_333_p1 + select_ln422_fu_355_p3);

assign add_ln526_2_fu_403_p2 = (add_ln526_1_fu_397_p2 + tmp2108_q0);

assign add_ln526_fu_417_p2 = (select_ln526_fu_409_p3 + add_ln526_2_fu_403_p2);

assign add_ln527_fu_450_p2 = (select_ln527_fu_442_p3 + trunc_ln374_fu_438_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign d_4_fu_424_p2 = ($signed(zext_ln522_fu_316_p1) - $signed(sext_ln396_1_fu_369_p1));

assign d_fu_383_p2 = ($signed(sext_ln356_fu_379_p1) + $signed(sext_ln396_1_fu_369_p1));

assign grp_fu_456_p0 = grp_fu_456_p00;

assign grp_fu_456_p00 = tmp2108_q0;

assign grp_fu_456_p1 = zext_ln517_reg_527;

assign grp_fu_462_p0 = grp_fu_456_p2[15:0];

assign grp_fu_462_p1 = 16'd12287;

assign grp_fu_469_p0 = grp_fu_469_p00;

assign grp_fu_469_p00 = $unsigned(zext_ln406_fu_306_p0);

assign grp_fu_469_p1 = 30'd12289;

assign grp_fu_469_p2 = grp_fu_469_p20;

assign grp_fu_469_p20 = z_reg_565;

assign ht_fu_184_p4 = {{t_fu_76[10:1]}};

assign i_fu_215_p2 = (i_04_reg_140 + 10'd1);

assign icmp_ln515_fu_210_p2 = ((zext_ln515_2_fu_206_p1 == m_fu_80) ? 1'b1 : 1'b0);

assign icmp_ln521_fu_257_p2 = ((j_02_reg_151 < zext_ln515_3_fu_253_p1) ? 1'b1 : 1'b0);

assign j1_fu_287_p2 = (zext_ln507_fu_283_p1 + j1_2_reg_128);

assign j_8_fu_277_p2 = (j_02_reg_151 + 64'd1);

assign m_6_fu_235_p2 = m_fu_80 << 11'd1;

assign select_ln422_fu_355_p3 = ((tmp_183_fu_347_p3[0:0] == 1'b1) ? 16'd12289 : 16'd0);

assign select_ln526_fu_409_p3 = ((tmp_184_fu_389_p3[0:0] == 1'b1) ? 16'd53247 : 16'd40958);

assign select_ln527_fu_442_p3 = ((tmp_185_fu_430_p3[0:0] == 1'b1) ? 16'd12289 : 16'd0);

assign sext_ln356_fu_379_p1 = $signed(add_ln356_fu_373_p2);

assign sext_ln396_1_fu_369_p1 = $signed(z_89_fu_363_p2);

assign sext_ln396_fu_343_p1 = z_87_fu_337_p2;

assign tmp_183_fu_347_p3 = z_87_fu_337_p2[32'd14];

assign tmp_184_fu_389_p3 = d_fu_383_p2[32'd17];

assign tmp_185_fu_430_p3 = d_4_fu_424_p2[32'd17];

assign tmp_fu_176_p3 = m_fu_80[32'd10];

assign trunc_ln374_fu_438_p1 = d_4_fu_424_p2[15:0];

assign trunc_ln507_fu_221_p1 = m_fu_80[9:0];

assign trunc_ln524_fu_263_p1 = j_02_reg_151[10:0];

assign trunc_ln_fu_324_p4 = {{grp_fu_469_p3[30:16]}};

assign z_87_fu_337_p2 = ($signed(trunc_ln_fu_324_p4) + $signed(15'd20479));

assign z_89_fu_363_p2 = ($signed(select_ln422_fu_355_p3) + $signed(sext_ln396_fu_343_p1));

assign zext_ln406_fu_306_p0 = grp_fu_462_p2;

assign zext_ln421_fu_333_p1 = trunc_ln_fu_324_p4;

assign zext_ln507_fu_283_p1 = t_fu_76;

assign zext_ln512_fu_198_p1 = ht_fu_184_p4;

assign zext_ln514_fu_194_p1 = ht_fu_184_p4;

assign zext_ln515_2_fu_206_p1 = i_04_reg_140;

assign zext_ln515_3_fu_253_p1 = indvars_iv_reg_118;

assign zext_ln515_fu_202_p1 = j1_2_reg_128;

assign zext_ln517_fu_249_p1 = GMb_q0;

assign zext_ln519_fu_230_p1 = add_ln519_fu_224_p2;

assign zext_ln522_1_fu_320_p1 = tmp2108_q0;

assign zext_ln522_fu_316_p1 = tmp2108_q0;

assign zext_ln524_fu_309_p1 = trunc_ln524_reg_535;

assign zext_ln525_fu_272_p1 = add_ln525_fu_267_p2;

always @ (posedge ap_clk) begin
    zext_ln514_reg_498[10] <= 1'b0;
    zext_ln515_reg_509[63:20] <= 44'b00000000000000000000000000000000000000000000;
    zext_ln517_reg_527[29:14] <= 16'b0000000000000000;
end

endmodule //keygen_mq_NTT_1
