// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module keygen_iFFT (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        f_address0,
        f_ce0,
        f_we0,
        f_d0,
        f_q0,
        f_address1,
        f_ce1,
        f_we1,
        f_d1,
        f_q1
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] f_address0;
output   f_ce0;
output   f_we0;
output  [63:0] f_d0;
input  [63:0] f_q0;
output  [9:0] f_address1;
output   f_ce1;
output   f_we1;
output  [63:0] f_d1;
input  [63:0] f_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] f_address0;
reg f_ce0;
reg f_we0;
reg[9:0] f_address1;
reg f_ce1;
reg f_we1;
reg[63:0] f_d1;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [10:0] fpr_gm_tab_address0;
reg    fpr_gm_tab_ce0;
wire   [63:0] fpr_gm_tab_q0;
wire   [10:0] fpr_gm_tab_address1;
reg    fpr_gm_tab_ce1;
wire   [63:0] fpr_gm_tab_q1;
reg   [63:0] reg_250;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state12;
reg   [63:0] t_reg_527;
wire    ap_CS_fsm_state2;
wire   [63:0] dt_fu_295_p2;
reg   [63:0] dt_reg_535;
wire   [0:0] icmp_ln1453_fu_289_p2;
wire   [10:0] trunc_ln1455_fu_306_p1;
reg   [10:0] trunc_ln1455_reg_549;
wire    ap_CS_fsm_state3;
wire   [63:0] i1_2_fu_326_p2;
reg   [63:0] i1_2_reg_557;
wire   [0:0] icmp_ln1459_fu_320_p2;
reg   [63:0] s_re_reg_572;
wire    ap_CS_fsm_state4;
wire   [63:0] s_im_fu_409_p1;
reg   [63:0] s_im_reg_578;
reg   [9:0] f_addr_7_reg_587;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln1468_fu_418_p2;
reg   [9:0] f_addr_8_reg_592;
wire   [9:0] add_ln1474_fu_442_p2;
reg   [9:0] add_ln1474_reg_597;
wire   [10:0] j_11_fu_448_p2;
reg   [10:0] j_11_reg_603;
wire   [63:0] j1_fu_454_p2;
wire   [63:0] add_ln1459_fu_459_p2;
reg   [63:0] x_im_reg_618;
reg   [9:0] f_addr_9_reg_624;
reg   [9:0] f_addr_10_reg_629;
wire    ap_CS_fsm_state7;
wire   [63:0] grp_fu_210_p2;
wire    ap_CS_fsm_state8;
wire   [63:0] grp_fu_215_p2;
wire   [63:0] grp_fu_220_p2;
wire    ap_CS_fsm_state9;
wire   [63:0] grp_fu_226_p2;
wire   [63:0] grp_fu_232_p2;
wire   [63:0] grp_fu_238_p2;
reg   [9:0] f_addr_reg_681;
wire    ap_CS_fsm_state11;
wire   [0:0] icmp_ln1493_fu_486_p2;
reg   [63:0] indvars_iv_reg_156;
reg   [63:0] i1_reg_166;
reg   [63:0] j1_8_reg_177;
reg   [10:0] j_03_reg_189;
wire    ap_CS_fsm_state10;
wire   [63:0] zext_ln1466_fu_350_p1;
wire   [63:0] zext_ln1467_fu_361_p1;
wire   [63:0] zext_ln1468_fu_413_p1;
wire   [63:0] zext_ln1473_fu_434_p1;
wire   [63:0] zext_ln1474_fu_464_p1;
wire   [63:0] zext_ln1475_fu_473_p1;
wire   [63:0] zext_ln1493_fu_481_p1;
reg   [9:0] m_fu_66;
wire   [9:0] zext_ln1453_fu_381_p1;
reg   [3:0] u_08_fu_70;
wire   [3:0] u_fu_366_p2;
reg   [63:0] t_06_fu_74;
reg   [10:0] u_11_fu_78;
wire   [10:0] u_233_fu_492_p2;
wire   [63:0] grp_fu_198_p2;
wire   [63:0] grp_fu_204_p2;
wire    ap_CS_fsm_state13;
reg   [63:0] grp_fu_198_p0;
reg   [63:0] grp_fu_198_p1;
reg   [63:0] grp_fu_204_p0;
reg   [63:0] grp_fu_204_p1;
reg   [63:0] grp_fu_220_p0;
reg   [63:0] grp_fu_220_p1;
wire   [2:0] tmp_fu_279_p4;
wire   [54:0] tmp_212_fu_310_p4;
wire   [9:0] trunc_ln1466_fu_332_p1;
wire   [9:0] add_ln1466_fu_336_p2;
wire   [10:0] shl_ln_fu_342_p3;
wire   [10:0] or_ln1467_fu_355_p2;
wire   [8:0] lshr_ln_fu_371_p4;
wire   [63:0] bitcast_ln147_fu_399_p1;
wire   [63:0] xor_ln147_fu_403_p2;
wire   [9:0] trunc_ln1468_fu_424_p1;
wire   [9:0] xor_ln1473_fu_428_p2;
wire   [9:0] trunc_ln1453_fu_439_p1;
wire   [9:0] xor_ln1475_fu_468_p2;
reg   [1:0] grp_fu_198_opcode;
reg   [12:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
end

keygen_FFT_fpr_gm_tab_ROM_AUTO_1R #(
    .DataWidth( 64 ),
    .AddressRange( 2048 ),
    .AddressWidth( 11 ))
fpr_gm_tab_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fpr_gm_tab_address0),
    .ce0(fpr_gm_tab_ce0),
    .q0(fpr_gm_tab_q0),
    .address1(fpr_gm_tab_address1),
    .ce1(fpr_gm_tab_ce1),
    .q1(fpr_gm_tab_q1)
);

keygen_dadddsub_64ns_64ns_64_2_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadddsub_64ns_64ns_64_2_full_dsp_1_U101(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_198_p0),
    .din1(grp_fu_198_p1),
    .opcode(grp_fu_198_opcode),
    .ce(1'b1),
    .dout(grp_fu_198_p2)
);

keygen_dadd_64ns_64ns_64_2_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_2_full_dsp_1_U102(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_204_p0),
    .din1(grp_fu_204_p1),
    .ce(1'b1),
    .dout(grp_fu_204_p2)
);

keygen_dsub_64ns_64ns_64_2_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dsub_64ns_64ns_64_2_full_dsp_1_U103(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_250),
    .din1(f_q1),
    .ce(1'b1),
    .dout(grp_fu_210_p2)
);

keygen_dsub_64ns_64ns_64_2_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dsub_64ns_64ns_64_2_full_dsp_1_U104(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(x_im_reg_618),
    .din1(f_q0),
    .ce(1'b1),
    .dout(grp_fu_215_p2)
);

keygen_dmul_64ns_64ns_64_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_2_max_dsp_1_U105(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_220_p0),
    .din1(grp_fu_220_p1),
    .ce(1'b1),
    .dout(grp_fu_220_p2)
);

keygen_dmul_64ns_64ns_64_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_2_max_dsp_1_U106(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_215_p2),
    .din1(s_im_reg_578),
    .ce(1'b1),
    .dout(grp_fu_226_p2)
);

keygen_dmul_64ns_64ns_64_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_2_max_dsp_1_U107(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_210_p2),
    .din1(s_im_reg_578),
    .ce(1'b1),
    .dout(grp_fu_232_p2)
);

keygen_dmul_64ns_64ns_64_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_2_max_dsp_1_U108(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_215_p2),
    .din1(s_re_reg_572),
    .ce(1'b1),
    .dout(grp_fu_238_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1453_fu_289_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i1_reg_166 <= 64'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln1468_fu_418_p2 == 1'd0))) begin
        i1_reg_166 <= i1_2_reg_557;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1453_fu_289_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvars_iv_reg_156 <= t_06_fu_74;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln1468_fu_418_p2 == 1'd0))) begin
        indvars_iv_reg_156 <= add_ln1459_fu_459_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1453_fu_289_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j1_8_reg_177 <= 64'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln1468_fu_418_p2 == 1'd0))) begin
        j1_8_reg_177 <= j1_fu_454_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        j_03_reg_189 <= j_11_reg_603;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        j_03_reg_189 <= trunc_ln1455_reg_549;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        m_fu_66 <= 10'd512;
    end else if (((icmp_ln1459_fu_320_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        m_fu_66 <= zext_ln1453_fu_381_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        reg_250 <= f_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        reg_250 <= f_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        t_06_fu_74 <= 64'd1;
    end else if (((icmp_ln1459_fu_320_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        t_06_fu_74 <= dt_reg_535;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        u_08_fu_70 <= 4'd10;
    end else if (((icmp_ln1459_fu_320_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        u_08_fu_70 <= u_fu_366_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1453_fu_289_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        u_11_fu_78 <= 11'd0;
    end else if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln1493_fu_486_p2 == 1'd0))) begin
        u_11_fu_78 <= u_233_fu_492_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln1468_fu_418_p2 == 1'd1))) begin
        add_ln1474_reg_597 <= add_ln1474_fu_442_p2;
        f_addr_7_reg_587 <= zext_ln1468_fu_413_p1;
        f_addr_8_reg_592 <= zext_ln1473_fu_434_p1;
        j_11_reg_603 <= j_11_fu_448_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1453_fu_289_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        dt_reg_535[63 : 1] <= dt_fu_295_p2[63 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        f_addr_10_reg_629 <= zext_ln1475_fu_473_p1;
        f_addr_9_reg_624 <= zext_ln1474_fu_464_p1;
        x_im_reg_618 <= f_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln1493_fu_486_p2 == 1'd0))) begin
        f_addr_reg_681 <= zext_ln1493_fu_481_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i1_2_reg_557 <= i1_2_fu_326_p2;
        trunc_ln1455_reg_549 <= trunc_ln1455_fu_306_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        s_im_reg_578 <= s_im_fu_409_p1;
        s_re_reg_572 <= fpr_gm_tab_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        t_reg_527 <= t_06_fu_74;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) | ((1'b1 == ap_CS_fsm_state11) & (icmp_ln1493_fu_486_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln1493_fu_486_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        f_address0 = zext_ln1493_fu_481_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        f_address0 = f_addr_10_reg_629;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        f_address0 = f_addr_8_reg_592;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        f_address0 = zext_ln1475_fu_473_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        f_address0 = zext_ln1473_fu_434_p1;
    end else begin
        f_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        f_address1 = f_addr_reg_681;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        f_address1 = f_addr_9_reg_624;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        f_address1 = f_addr_7_reg_587;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        f_address1 = zext_ln1474_fu_464_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        f_address1 = zext_ln1468_fu_413_p1;
    end else begin
        f_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5))) begin
        f_ce0 = 1'b1;
    end else begin
        f_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5))) begin
        f_ce1 = 1'b1;
    end else begin
        f_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        f_d1 = grp_fu_220_p2;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        f_d1 = grp_fu_198_p2;
    end else begin
        f_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        f_we0 = 1'b1;
    end else begin
        f_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        f_we1 = 1'b1;
    end else begin
        f_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        fpr_gm_tab_ce0 = 1'b1;
    end else begin
        fpr_gm_tab_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        fpr_gm_tab_ce1 = 1'b1;
    end else begin
        fpr_gm_tab_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_198_opcode = 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_198_opcode = 2'd0;
    end else begin
        grp_fu_198_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_198_p0 = grp_fu_220_p2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_198_p0 = reg_250;
    end else begin
        grp_fu_198_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_198_p1 = grp_fu_226_p2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_198_p1 = f_q1;
    end else begin
        grp_fu_198_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_204_p0 = grp_fu_232_p2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_204_p0 = x_im_reg_618;
    end else begin
        grp_fu_204_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_204_p1 = grp_fu_238_p2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_204_p1 = f_q0;
    end else begin
        grp_fu_204_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_220_p0 = f_q0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_220_p0 = grp_fu_210_p2;
    end else begin
        grp_fu_220_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_220_p1 = 64'd4566650022153682944;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_220_p1 = s_re_reg_572;
    end else begin
        grp_fu_220_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln1453_fu_289_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln1459_fu_320_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln1468_fu_418_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln1493_fu_486_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1459_fu_459_p2 = (dt_reg_535 + indvars_iv_reg_156);

assign add_ln1466_fu_336_p2 = (trunc_ln1466_fu_332_p1 + m_fu_66);

assign add_ln1474_fu_442_p2 = (trunc_ln1468_fu_424_p1 + trunc_ln1453_fu_439_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bitcast_ln147_fu_399_p1 = fpr_gm_tab_q0;

assign dt_fu_295_p2 = t_06_fu_74 << 64'd1;

assign f_d0 = grp_fu_204_p2;

assign fpr_gm_tab_address0 = zext_ln1467_fu_361_p1;

assign fpr_gm_tab_address1 = zext_ln1466_fu_350_p1;

assign i1_2_fu_326_p2 = (i1_reg_166 + 64'd1);

assign icmp_ln1453_fu_289_p2 = ((tmp_fu_279_p4 == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln1459_fu_320_p2 = ((tmp_212_fu_310_p4 == 55'd0) ? 1'b1 : 1'b0);

assign icmp_ln1468_fu_418_p2 = ((zext_ln1468_fu_413_p1 < indvars_iv_reg_156) ? 1'b1 : 1'b0);

assign icmp_ln1493_fu_486_p2 = ((u_11_fu_78 == 11'd1024) ? 1'b1 : 1'b0);

assign j1_fu_454_p2 = (dt_reg_535 + j1_8_reg_177);

assign j_11_fu_448_p2 = (j_03_reg_189 + 11'd1);

assign lshr_ln_fu_371_p4 = {{m_fu_66[9:1]}};

assign or_ln1467_fu_355_p2 = (shl_ln_fu_342_p3 | 11'd1);

assign s_im_fu_409_p1 = xor_ln147_fu_403_p2;

assign shl_ln_fu_342_p3 = {{add_ln1466_fu_336_p2}, {1'd0}};

assign tmp_212_fu_310_p4 = {{j1_8_reg_177[63:9]}};

assign tmp_fu_279_p4 = {{u_08_fu_70[3:1]}};

assign trunc_ln1453_fu_439_p1 = t_reg_527[9:0];

assign trunc_ln1455_fu_306_p1 = j1_8_reg_177[10:0];

assign trunc_ln1466_fu_332_p1 = i1_reg_166[9:0];

assign trunc_ln1468_fu_424_p1 = j_03_reg_189[9:0];

assign u_233_fu_492_p2 = (u_11_fu_78 + 11'd1);

assign u_fu_366_p2 = ($signed(u_08_fu_70) + $signed(4'd15));

assign xor_ln1473_fu_428_p2 = (trunc_ln1468_fu_424_p1 ^ 10'd512);

assign xor_ln1475_fu_468_p2 = (10'd512 ^ add_ln1474_reg_597);

assign xor_ln147_fu_403_p2 = (bitcast_ln147_fu_399_p1 ^ 64'd9223372036854775808);

assign zext_ln1453_fu_381_p1 = lshr_ln_fu_371_p4;

assign zext_ln1466_fu_350_p1 = shl_ln_fu_342_p3;

assign zext_ln1467_fu_361_p1 = or_ln1467_fu_355_p2;

assign zext_ln1468_fu_413_p1 = j_03_reg_189;

assign zext_ln1473_fu_434_p1 = xor_ln1473_fu_428_p2;

assign zext_ln1474_fu_464_p1 = add_ln1474_reg_597;

assign zext_ln1475_fu_473_p1 = xor_ln1475_fu_468_p2;

assign zext_ln1493_fu_481_p1 = u_11_fu_78;

always @ (posedge ap_clk) begin
    dt_reg_535[0] <= 1'b0;
end

endmodule //keygen_iFFT
