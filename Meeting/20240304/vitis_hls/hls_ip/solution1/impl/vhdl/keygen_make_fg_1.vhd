-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity keygen_make_fg_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    vla18_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    vla18_ce0 : OUT STD_LOGIC;
    vla18_we0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    vla18_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    vla18_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    vla18_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    vla18_ce1 : OUT STD_LOGIC;
    vla18_we1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    vla18_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    vla18_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    data : IN STD_LOGIC_VECTOR (63 downto 0);
    f_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    f_ce0 : OUT STD_LOGIC;
    f_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    g_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    g_ce0 : OUT STD_LOGIC;
    g_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    depth : IN STD_LOGIC_VECTOR (31 downto 0);
    out_ntt_offset : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of keygen_make_fg_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_75596399 : STD_LOGIC_VECTOR (31 downto 0) := "01110101010110010110001110011001";
    constant ap_const_lv32_7FFFD801 : STD_LOGIC_VECTOR (31 downto 0) := "01111111111111111101100000000001";
    constant ap_const_lv32_79BFD7FF : STD_LOGIC_VECTOR (31 downto 0) := "01111001101111111101011111111111";
    constant ap_const_lv32_63FB001 : STD_LOGIC_VECTOR (31 downto 0) := "00000110001111111011000000000001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv25_1FFD801 : STD_LOGIC_VECTOR (24 downto 0) := "1111111111101100000000001";
    constant ap_const_lv31_79BFD7FF : STD_LOGIC_VECTOR (30 downto 0) := "1111001101111111101011111111111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_27FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010011111111111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv6_1E : STD_LOGIC_VECTOR (5 downto 0) := "011110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv15_1000 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_7FFFD7FF : STD_LOGIC_VECTOR (31 downto 0) := "01111111111111111101011111111111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv15_2000 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal REV10_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal REV10_ce0 : STD_LOGIC;
    signal REV10_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_fu_302_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal empty_reg_746 : STD_LOGIC_VECTOR (14 downto 0);
    signal gt_fu_306_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal gt_reg_754 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln3008_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln3009_fu_338_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln3009_reg_768 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln3013_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln3013_reg_778 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_68_fu_450_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_68_reg_798 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal lshr_ln84_reg_803 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln3030_fu_475_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln3030_reg_808 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal sub_ln3029_fu_491_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln3029_reg_816 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln3030_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3030_1_fu_498_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3030_1_reg_821 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln3030_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln3030_reg_826 : STD_LOGIC_VECTOR (0 downto 0);
    signal z_128_fu_566_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_128_reg_834 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_204_fu_528_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_modp_montymul_fu_265_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ig_reg_860 : STD_LOGIC_VECTOR (31 downto 0);
    signal gm_fu_583_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal gm_reg_865 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln962_fu_615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln86_reg_879 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_make_fg_step_1_fu_234_ap_start : STD_LOGIC;
    signal grp_make_fg_step_1_fu_234_ap_done : STD_LOGIC;
    signal grp_make_fg_step_1_fu_234_ap_idle : STD_LOGIC;
    signal grp_make_fg_step_1_fu_234_ap_ready : STD_LOGIC;
    signal grp_make_fg_step_1_fu_234_vla18_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_make_fg_step_1_fu_234_vla18_ce0 : STD_LOGIC;
    signal grp_make_fg_step_1_fu_234_vla18_we0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_make_fg_step_1_fu_234_vla18_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_make_fg_step_1_fu_234_vla18_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_make_fg_step_1_fu_234_vla18_ce1 : STD_LOGIC;
    signal grp_make_fg_step_1_fu_234_vla18_we1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_make_fg_step_1_fu_234_vla18_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_make_fg_step_1_fu_234_grp_modp_montymul_fu_255_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_make_fg_step_1_fu_234_grp_modp_montymul_fu_255_p_din2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_make_fg_step_1_fu_234_grp_modp_montymul_fu_255_p_din3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_make_fg_step_1_fu_234_grp_modp_montymul_fu_255_p_din4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_make_fg_step_1_fu_234_grp_modp_montymul_fu_265_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_make_fg_step_1_fu_234_grp_modp_montymul_fu_265_p_din2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_make_fg_step_1_fu_234_grp_modp_montymul_fu_265_p_din3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_make_fg_step_1_fu_234_grp_modp_montymul_fu_265_p_din4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_modp_montymul_fu_255_ap_ready : STD_LOGIC;
    signal grp_modp_montymul_fu_255_a : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_modp_montymul_fu_255_b : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_modp_montymul_fu_255_p : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_modp_montymul_fu_255_p0i : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_modp_montymul_fu_255_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_modp_montymul_fu_265_ap_ready : STD_LOGIC;
    signal grp_modp_montymul_fu_265_a : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_modp_montymul_fu_265_b : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_modp_montymul_fu_265_p : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_modp_montymul_fu_265_p0i : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_modp_NTT2_ext_1_fu_281_ap_start : STD_LOGIC;
    signal grp_modp_NTT2_ext_1_fu_281_ap_done : STD_LOGIC;
    signal grp_modp_NTT2_ext_1_fu_281_ap_idle : STD_LOGIC;
    signal grp_modp_NTT2_ext_1_fu_281_ap_ready : STD_LOGIC;
    signal grp_modp_NTT2_ext_1_fu_281_vla18_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_modp_NTT2_ext_1_fu_281_vla18_ce0 : STD_LOGIC;
    signal grp_modp_NTT2_ext_1_fu_281_vla18_we0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_modp_NTT2_ext_1_fu_281_vla18_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_modp_NTT2_ext_1_fu_281_vla18_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_modp_NTT2_ext_1_fu_281_vla18_ce1 : STD_LOGIC;
    signal grp_modp_NTT2_ext_1_fu_281_vla18_we1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_modp_NTT2_ext_1_fu_281_vla18_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_modp_NTT2_ext_1_fu_281_a : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_make_fg_step_1_fu_234_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_modp_NTT2_ext_1_fu_281_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal zext_ln3008_fu_320_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln3009_1_fu_425_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln3010_fu_471_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln962_fu_610_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln967_3_fu_664_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln968_3_fu_712_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal u_07_fu_120 : STD_LOGIC_VECTOR (10 downto 0);
    signal u_212_fu_332_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal d_10_fu_124 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_11_fu_485_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i_fu_128 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_17_fu_572_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal u_134_fu_132 : STD_LOGIC_VECTOR (10 downto 0);
    signal u_214_fu_621_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal x1_fu_136 : STD_LOGIC_VECTOR (31 downto 0);
    signal x2_fu_140 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_66_fu_392_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln3013_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln3009_fu_372_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_376_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_376_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln635_fu_384_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln3009_fu_372_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_399_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln3009_fu_406_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln3009_fu_410_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal lshr_ln_fu_415_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln3010_fu_430_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_203_fu_434_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_203_fu_434_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln635_18_fu_442_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln3010_fu_430_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln3010_1_fu_456_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln3030_2_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln808_fu_524_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_204_fu_528_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln808_fu_524_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln813_fu_542_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln813_fu_548_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln813_fu_536_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln813_fu_552_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln813_fu_560_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_17_fu_572_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln95_fu_637_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln967_fu_645_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln967_1_fu_649_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal lshr_ln85_fu_654_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal or_ln_fu_669_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln968_fu_679_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln968_fu_683_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln968_fu_687_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_state14_on_subcall_done : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component keygen_make_fg_step_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        vla18_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        vla18_ce0 : OUT STD_LOGIC;
        vla18_we0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        vla18_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        vla18_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        vla18_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        vla18_ce1 : OUT STD_LOGIC;
        vla18_we1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        vla18_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        vla18_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        data : IN STD_LOGIC_VECTOR (63 downto 0);
        logn : IN STD_LOGIC_VECTOR (31 downto 0);
        depth : IN STD_LOGIC_VECTOR (3 downto 0);
        in_ntt : IN STD_LOGIC_VECTOR (0 downto 0);
        out_ntt : IN STD_LOGIC_VECTOR (0 downto 0);
        grp_modp_montymul_fu_255_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_modp_montymul_fu_255_p_din2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_modp_montymul_fu_255_p_din3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_modp_montymul_fu_255_p_din4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_modp_montymul_fu_255_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_modp_montymul_fu_255_p_ready : IN STD_LOGIC;
        grp_modp_montymul_fu_265_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_modp_montymul_fu_265_p_din2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_modp_montymul_fu_265_p_din3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_modp_montymul_fu_265_p_din4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_modp_montymul_fu_265_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_modp_montymul_fu_265_p_ready : IN STD_LOGIC );
    end component;


    component keygen_modp_montymul IS
    port (
        ap_ready : OUT STD_LOGIC;
        a : IN STD_LOGIC_VECTOR (31 downto 0);
        b : IN STD_LOGIC_VECTOR (31 downto 0);
        p : IN STD_LOGIC_VECTOR (31 downto 0);
        p0i : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component keygen_modp_NTT2_ext_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        vla18_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        vla18_ce0 : OUT STD_LOGIC;
        vla18_we0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        vla18_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        vla18_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        vla18_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        vla18_ce1 : OUT STD_LOGIC;
        vla18_we1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        vla18_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        vla18_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        a : IN STD_LOGIC_VECTOR (14 downto 0);
        stride : IN STD_LOGIC_VECTOR (7 downto 0);
        gm : IN STD_LOGIC_VECTOR (14 downto 0);
        logn : IN STD_LOGIC_VECTOR (31 downto 0);
        p : IN STD_LOGIC_VECTOR (24 downto 0);
        p0i : IN STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component keygen_modp_mkgm2_1_REV10_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;



begin
    REV10_U : component keygen_modp_mkgm2_1_REV10_ROM_AUTO_1R
    generic map (
        DataWidth => 10,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => REV10_address0,
        ce0 => REV10_ce0,
        q0 => REV10_q0);

    grp_make_fg_step_1_fu_234 : component keygen_make_fg_step_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_make_fg_step_1_fu_234_ap_start,
        ap_done => grp_make_fg_step_1_fu_234_ap_done,
        ap_idle => grp_make_fg_step_1_fu_234_ap_idle,
        ap_ready => grp_make_fg_step_1_fu_234_ap_ready,
        vla18_address0 => grp_make_fg_step_1_fu_234_vla18_address0,
        vla18_ce0 => grp_make_fg_step_1_fu_234_vla18_ce0,
        vla18_we0 => grp_make_fg_step_1_fu_234_vla18_we0,
        vla18_d0 => grp_make_fg_step_1_fu_234_vla18_d0,
        vla18_q0 => vla18_q0,
        vla18_address1 => grp_make_fg_step_1_fu_234_vla18_address1,
        vla18_ce1 => grp_make_fg_step_1_fu_234_vla18_ce1,
        vla18_we1 => grp_make_fg_step_1_fu_234_vla18_we1,
        vla18_d1 => grp_make_fg_step_1_fu_234_vla18_d1,
        vla18_q1 => vla18_q1,
        data => data,
        logn => sub_ln3029_reg_816,
        depth => trunc_ln3030_reg_808,
        in_ntt => icmp_ln3030_1_reg_821,
        out_ntt => or_ln3030_reg_826,
        grp_modp_montymul_fu_255_p_din1 => grp_make_fg_step_1_fu_234_grp_modp_montymul_fu_255_p_din1,
        grp_modp_montymul_fu_255_p_din2 => grp_make_fg_step_1_fu_234_grp_modp_montymul_fu_255_p_din2,
        grp_modp_montymul_fu_255_p_din3 => grp_make_fg_step_1_fu_234_grp_modp_montymul_fu_255_p_din3,
        grp_modp_montymul_fu_255_p_din4 => grp_make_fg_step_1_fu_234_grp_modp_montymul_fu_255_p_din4,
        grp_modp_montymul_fu_255_p_dout0 => grp_modp_montymul_fu_255_ap_return,
        grp_modp_montymul_fu_255_p_ready => grp_modp_montymul_fu_255_ap_ready,
        grp_modp_montymul_fu_265_p_din1 => grp_make_fg_step_1_fu_234_grp_modp_montymul_fu_265_p_din1,
        grp_modp_montymul_fu_265_p_din2 => grp_make_fg_step_1_fu_234_grp_modp_montymul_fu_265_p_din2,
        grp_modp_montymul_fu_265_p_din3 => grp_make_fg_step_1_fu_234_grp_modp_montymul_fu_265_p_din3,
        grp_modp_montymul_fu_265_p_din4 => grp_make_fg_step_1_fu_234_grp_modp_montymul_fu_265_p_din4,
        grp_modp_montymul_fu_265_p_dout0 => grp_modp_montymul_fu_265_ap_return,
        grp_modp_montymul_fu_265_p_ready => grp_modp_montymul_fu_265_ap_ready);

    grp_modp_montymul_fu_255 : component keygen_modp_montymul
    port map (
        ap_ready => grp_modp_montymul_fu_255_ap_ready,
        a => grp_modp_montymul_fu_255_a,
        b => grp_modp_montymul_fu_255_b,
        p => grp_modp_montymul_fu_255_p,
        p0i => grp_modp_montymul_fu_255_p0i,
        ap_return => grp_modp_montymul_fu_255_ap_return);

    grp_modp_montymul_fu_265 : component keygen_modp_montymul
    port map (
        ap_ready => grp_modp_montymul_fu_265_ap_ready,
        a => grp_modp_montymul_fu_265_a,
        b => grp_modp_montymul_fu_265_b,
        p => grp_modp_montymul_fu_265_p,
        p0i => grp_modp_montymul_fu_265_p0i,
        ap_return => grp_modp_montymul_fu_265_ap_return);

    grp_modp_NTT2_ext_1_fu_281 : component keygen_modp_NTT2_ext_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_modp_NTT2_ext_1_fu_281_ap_start,
        ap_done => grp_modp_NTT2_ext_1_fu_281_ap_done,
        ap_idle => grp_modp_NTT2_ext_1_fu_281_ap_idle,
        ap_ready => grp_modp_NTT2_ext_1_fu_281_ap_ready,
        vla18_address0 => grp_modp_NTT2_ext_1_fu_281_vla18_address0,
        vla18_ce0 => grp_modp_NTT2_ext_1_fu_281_vla18_ce0,
        vla18_we0 => grp_modp_NTT2_ext_1_fu_281_vla18_we0,
        vla18_d0 => grp_modp_NTT2_ext_1_fu_281_vla18_d0,
        vla18_q0 => vla18_q0,
        vla18_address1 => grp_modp_NTT2_ext_1_fu_281_vla18_address1,
        vla18_ce1 => grp_modp_NTT2_ext_1_fu_281_vla18_ce1,
        vla18_we1 => grp_modp_NTT2_ext_1_fu_281_vla18_we1,
        vla18_d1 => grp_modp_NTT2_ext_1_fu_281_vla18_d1,
        vla18_q1 => vla18_q1,
        a => grp_modp_NTT2_ext_1_fu_281_a,
        stride => ap_const_lv8_1,
        gm => gm_reg_865,
        logn => ap_const_lv32_A,
        p => ap_const_lv25_1FFD801,
        p0i => ap_const_lv31_79BFD7FF);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_make_fg_step_1_fu_234_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_make_fg_step_1_fu_234_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln3030_fu_480_p2 = ap_const_lv1_0))) then 
                    grp_make_fg_step_1_fu_234_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_make_fg_step_1_fu_234_ap_ready = ap_const_logic_1)) then 
                    grp_make_fg_step_1_fu_234_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_modp_NTT2_ext_1_fu_281_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_modp_NTT2_ext_1_fu_281_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln962_fu_615_p2 = ap_const_lv1_1)))) then 
                    grp_modp_NTT2_ext_1_fu_281_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_modp_NTT2_ext_1_fu_281_ap_ready = ap_const_logic_1)) then 
                    grp_modp_NTT2_ext_1_fu_281_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    d_10_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln3013_fu_352_p2) and (icmp_ln3008_fu_326_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                d_10_fu_124 <= ap_const_lv32_27FF;
            elsif (((ap_const_lv1_0 = and_ln3013_fu_352_p2) and (icmp_ln3008_fu_326_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                d_10_fu_124 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln3030_fu_480_p2 = ap_const_lv1_0))) then 
                d_10_fu_124 <= d_11_fu_485_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                d_10_fu_124 <= z_128_reg_834;
            end if; 
        end if;
    end process;

    i_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln3013_fu_352_p2) and (icmp_ln3008_fu_326_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_fu_128 <= ap_const_lv6_1E;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_204_fu_528_p3 = ap_const_lv1_0))) then 
                i_fu_128 <= i_17_fu_572_p2;
            end if; 
        end if;
    end process;

    u_07_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                u_07_fu_120 <= ap_const_lv11_0;
            elsif (((icmp_ln3008_fu_326_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                u_07_fu_120 <= u_212_fu_332_p2;
            end if; 
        end if;
    end process;

    u_134_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_204_fu_528_p3 = ap_const_lv1_1))) then 
                u_134_fu_132 <= ap_const_lv11_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln962_fu_615_p2 = ap_const_lv1_0))) then 
                u_134_fu_132 <= u_214_fu_621_p2;
            end if; 
        end if;
    end process;

    x1_fu_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_204_fu_528_p3 = ap_const_lv1_1))) then 
                x1_fu_136 <= ap_const_lv32_27FF;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                x1_fu_136 <= grp_modp_montymul_fu_255_ap_return;
            end if; 
        end if;
    end process;

    x2_fu_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_204_fu_528_p3 = ap_const_lv1_1))) then 
                x2_fu_140 <= ap_const_lv32_27FF;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                x2_fu_140 <= grp_modp_montymul_fu_255_ap_return;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln3008_fu_326_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                and_ln3013_reg_778 <= and_ln3013_fu_352_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                empty_reg_746 <= empty_fu_302_p1;
                gt_reg_754 <= gt_fu_306_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_204_fu_528_p3 = ap_const_lv1_1))) then
                gm_reg_865 <= gm_fu_583_p2;
                ig_reg_860 <= grp_modp_montymul_fu_265_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln3030_fu_480_p2 = ap_const_lv1_0))) then
                icmp_ln3030_1_reg_821 <= icmp_ln3030_1_fu_498_p2;
                or_ln3030_reg_826 <= or_ln3030_fu_510_p2;
                sub_ln3029_reg_816 <= sub_ln3029_fu_491_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                lshr_ln84_reg_803 <= add_ln3010_1_fu_456_p2(14 downto 2);
                w_68_reg_798 <= w_68_fu_450_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                lshr_ln86_reg_879 <= add_ln968_fu_687_p2(14 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln3008_fu_326_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                trunc_ln3009_reg_768 <= trunc_ln3009_fu_338_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                trunc_ln3030_reg_808 <= trunc_ln3030_fu_475_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_204_fu_528_p3 = ap_const_lv1_0))) then
                z_128_reg_834 <= z_128_fu_566_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln3008_fu_326_p2, and_ln3013_fu_352_p2, ap_CS_fsm_state5, icmp_ln3030_fu_480_p2, ap_CS_fsm_state7, tmp_204_fu_528_p3, ap_CS_fsm_state9, icmp_ln962_fu_615_p2, grp_make_fg_step_1_fu_234_ap_done, grp_modp_NTT2_ext_1_fu_281_ap_done, ap_CS_fsm_state6, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_block_state14_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_lv1_1 = and_ln3013_fu_352_p2) and (icmp_ln3008_fu_326_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                elsif (((ap_const_lv1_0 = and_ln3013_fu_352_p2) and (icmp_ln3008_fu_326_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln3030_fu_480_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_make_fg_step_1_fu_234_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_204_fu_528_p3 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln962_fu_615_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state12 => 
                if (((grp_modp_NTT2_ext_1_fu_281_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((ap_const_boolean_0 = ap_block_state14_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;

    REV10_address0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state6, zext_ln962_fu_610_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            REV10_address0 <= zext_ln962_fu_610_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            REV10_address0 <= ap_const_lv10_0;
        else 
            REV10_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    REV10_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            REV10_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            REV10_ce0 <= ap_const_logic_0;
        else 
            REV10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln3009_fu_410_p2 <= std_logic_vector(unsigned(zext_ln3009_fu_406_p1) + unsigned(empty_reg_746));
    add_ln3010_1_fu_456_p2 <= std_logic_vector(unsigned(zext_ln3009_fu_406_p1) + unsigned(gt_reg_754));
    add_ln967_1_fu_649_p2 <= std_logic_vector(unsigned(zext_ln967_fu_645_p1) + unsigned(gm_reg_865));
    add_ln968_fu_687_p2 <= std_logic_vector(unsigned(zext_ln968_fu_683_p1) + unsigned(empty_reg_746));
    and_ln3013_fu_352_p2 <= (out_ntt_offset and icmp_ln3013_fu_347_p2);
    and_ln813_fu_560_p2 <= (xor_ln813_fu_536_p2 and select_ln813_fu_552_p3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;

    ap_ST_fsm_state12_blk_assign_proc : process(grp_modp_NTT2_ext_1_fu_281_ap_done)
    begin
        if ((grp_modp_NTT2_ext_1_fu_281_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state12_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state12_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state13_blk <= ap_const_logic_0;

    ap_ST_fsm_state14_blk_assign_proc : process(ap_block_state14_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state14_on_subcall_done)) then 
            ap_ST_fsm_state14_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state14_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(grp_make_fg_step_1_fu_234_ap_done)
    begin
        if ((grp_make_fg_step_1_fu_234_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state14_on_subcall_done_assign_proc : process(and_ln3013_reg_778, grp_modp_NTT2_ext_1_fu_281_ap_done)
    begin
                ap_block_state14_on_subcall_done <= ((ap_const_lv1_1 = and_ln3013_reg_778) and (grp_modp_NTT2_ext_1_fu_281_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state14, ap_block_state14_on_subcall_done)
    begin
        if ((((ap_const_boolean_0 = ap_block_state14_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state14, ap_block_state14_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state14_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    d_11_fu_485_p2 <= std_logic_vector(unsigned(d_10_fu_124) + unsigned(ap_const_lv32_1));
    empty_fu_302_p1 <= data(15 - 1 downto 0);
    f_address0 <= zext_ln3008_fu_320_p1(10 - 1 downto 0);

    f_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            f_ce0 <= ap_const_logic_1;
        else 
            f_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    g_address0 <= zext_ln3008_fu_320_p1(10 - 1 downto 0);

    g_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            g_ce0 <= ap_const_logic_1;
        else 
            g_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    gm_fu_583_p2 <= std_logic_vector(unsigned(empty_reg_746) + unsigned(ap_const_lv15_2000));
    grp_make_fg_step_1_fu_234_ap_start <= grp_make_fg_step_1_fu_234_ap_start_reg;

    grp_modp_NTT2_ext_1_fu_281_a_assign_proc : process(empty_reg_746, gt_reg_754, and_ln3013_reg_778, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if (((ap_const_lv1_1 = and_ln3013_reg_778) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            grp_modp_NTT2_ext_1_fu_281_a <= gt_reg_754;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_modp_NTT2_ext_1_fu_281_a <= empty_reg_746;
        else 
            grp_modp_NTT2_ext_1_fu_281_a <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_modp_NTT2_ext_1_fu_281_ap_start <= grp_modp_NTT2_ext_1_fu_281_ap_start_reg;

    grp_modp_montymul_fu_255_a_assign_proc : process(ap_CS_fsm_state7, tmp_204_fu_528_p3, ap_CS_fsm_state10, grp_make_fg_step_1_fu_234_grp_modp_montymul_fu_255_p_din1, ap_CS_fsm_state6, ap_CS_fsm_state11, d_10_fu_124, x1_fu_136, x2_fu_140)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_modp_montymul_fu_255_a <= grp_make_fg_step_1_fu_234_grp_modp_montymul_fu_255_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_modp_montymul_fu_255_a <= x2_fu_140;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_modp_montymul_fu_255_a <= x1_fu_136;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_204_fu_528_p3 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_204_fu_528_p3 = ap_const_lv1_0)))) then 
            grp_modp_montymul_fu_255_a <= d_10_fu_124;
        else 
            grp_modp_montymul_fu_255_a <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_modp_montymul_fu_255_b_assign_proc : process(ap_CS_fsm_state7, tmp_204_fu_528_p3, ig_reg_860, ap_CS_fsm_state10, grp_make_fg_step_1_fu_234_grp_modp_montymul_fu_255_p_din2, ap_CS_fsm_state6, ap_CS_fsm_state11, d_10_fu_124)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_modp_montymul_fu_255_b <= grp_make_fg_step_1_fu_234_grp_modp_montymul_fu_255_p_din2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_modp_montymul_fu_255_b <= ig_reg_860;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_modp_montymul_fu_255_b <= ap_const_lv32_75596399;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_204_fu_528_p3 = ap_const_lv1_1))) then 
            grp_modp_montymul_fu_255_b <= ap_const_lv32_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_204_fu_528_p3 = ap_const_lv1_0))) then 
            grp_modp_montymul_fu_255_b <= d_10_fu_124;
        else 
            grp_modp_montymul_fu_255_b <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_modp_montymul_fu_255_p_assign_proc : process(ap_CS_fsm_state7, tmp_204_fu_528_p3, ap_CS_fsm_state10, grp_make_fg_step_1_fu_234_grp_modp_montymul_fu_255_p_din3, ap_CS_fsm_state6, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_modp_montymul_fu_255_p <= grp_make_fg_step_1_fu_234_grp_modp_montymul_fu_255_p_din3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_204_fu_528_p3 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_204_fu_528_p3 = ap_const_lv1_0)))) then 
            grp_modp_montymul_fu_255_p <= ap_const_lv32_7FFFD801;
        else 
            grp_modp_montymul_fu_255_p <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_modp_montymul_fu_255_p0i_assign_proc : process(ap_CS_fsm_state7, tmp_204_fu_528_p3, ap_CS_fsm_state10, grp_make_fg_step_1_fu_234_grp_modp_montymul_fu_255_p_din4, ap_CS_fsm_state6, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_modp_montymul_fu_255_p0i <= grp_make_fg_step_1_fu_234_grp_modp_montymul_fu_255_p_din4;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_204_fu_528_p3 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_204_fu_528_p3 = ap_const_lv1_0)))) then 
            grp_modp_montymul_fu_255_p0i <= ap_const_lv32_79BFD7FF;
        else 
            grp_modp_montymul_fu_255_p0i <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_modp_montymul_fu_265_a_assign_proc : process(ap_CS_fsm_state7, tmp_204_fu_528_p3, grp_make_fg_step_1_fu_234_grp_modp_montymul_fu_265_p_din1, grp_modp_montymul_fu_255_ap_return, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_modp_montymul_fu_265_a <= grp_make_fg_step_1_fu_234_grp_modp_montymul_fu_265_p_din1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_204_fu_528_p3 = ap_const_lv1_1))) then 
            grp_modp_montymul_fu_265_a <= ap_const_lv32_63FB001;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_204_fu_528_p3 = ap_const_lv1_0))) then 
            grp_modp_montymul_fu_265_a <= grp_modp_montymul_fu_255_ap_return;
        else 
            grp_modp_montymul_fu_265_a <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_modp_montymul_fu_265_b_assign_proc : process(ap_CS_fsm_state7, tmp_204_fu_528_p3, grp_make_fg_step_1_fu_234_grp_modp_montymul_fu_265_p_din2, grp_modp_montymul_fu_255_ap_return, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_modp_montymul_fu_265_b <= grp_make_fg_step_1_fu_234_grp_modp_montymul_fu_265_p_din2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_204_fu_528_p3 = ap_const_lv1_1))) then 
            grp_modp_montymul_fu_265_b <= grp_modp_montymul_fu_255_ap_return;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_204_fu_528_p3 = ap_const_lv1_0))) then 
            grp_modp_montymul_fu_265_b <= ap_const_lv32_75596399;
        else 
            grp_modp_montymul_fu_265_b <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_modp_montymul_fu_265_p_assign_proc : process(ap_CS_fsm_state7, tmp_204_fu_528_p3, grp_make_fg_step_1_fu_234_grp_modp_montymul_fu_265_p_din3, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_modp_montymul_fu_265_p <= grp_make_fg_step_1_fu_234_grp_modp_montymul_fu_265_p_din3;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_204_fu_528_p3 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_204_fu_528_p3 = ap_const_lv1_0)))) then 
            grp_modp_montymul_fu_265_p <= ap_const_lv32_7FFFD801;
        else 
            grp_modp_montymul_fu_265_p <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_modp_montymul_fu_265_p0i_assign_proc : process(ap_CS_fsm_state7, tmp_204_fu_528_p3, grp_make_fg_step_1_fu_234_grp_modp_montymul_fu_265_p_din4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_modp_montymul_fu_265_p0i <= grp_make_fg_step_1_fu_234_grp_modp_montymul_fu_265_p_din4;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_204_fu_528_p3 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_204_fu_528_p3 = ap_const_lv1_0)))) then 
            grp_modp_montymul_fu_265_p0i <= ap_const_lv32_79BFD7FF;
        else 
            grp_modp_montymul_fu_265_p0i <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    gt_fu_306_p2 <= std_logic_vector(unsigned(empty_fu_302_p1) + unsigned(ap_const_lv15_1000));
    i_17_fu_572_p0 <= i_fu_128;
    i_17_fu_572_p2 <= std_logic_vector(signed(i_17_fu_572_p0) + signed(ap_const_lv6_3F));
    icmp_ln3008_fu_326_p2 <= "1" when (u_07_fu_120 = ap_const_lv11_400) else "0";
    icmp_ln3013_fu_347_p2 <= "1" when (depth = ap_const_lv32_0) else "0";
    icmp_ln3030_1_fu_498_p2 <= "0" when (d_10_fu_124 = ap_const_lv32_0) else "1";
    icmp_ln3030_2_fu_505_p2 <= "1" when (unsigned(d_11_fu_485_p2) < unsigned(depth)) else "0";
    icmp_ln3030_fu_480_p2 <= "1" when (d_10_fu_124 = depth) else "0";
    icmp_ln962_fu_615_p2 <= "1" when (u_134_fu_132 = ap_const_lv11_400) else "0";
    lshr_ln813_fu_542_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_7FFFD7FF),to_integer(unsigned('0' & sext_ln808_fu_524_p1(31-1 downto 0)))));
    lshr_ln85_fu_654_p4 <= add_ln967_1_fu_649_p2(14 downto 2);
    lshr_ln_fu_415_p4 <= add_ln3009_fu_410_p2(14 downto 2);
    or_ln3030_fu_510_p2 <= (out_ntt_offset or icmp_ln3030_2_fu_505_p2);
    or_ln_fu_669_p4 <= ((ap_const_lv1_1 & REV10_q0) & ap_const_lv2_0);
    select_ln635_18_fu_442_p3 <= 
        ap_const_lv32_7FFFD801 when (tmp_203_fu_434_p3(0) = '1') else 
        ap_const_lv32_0;
    select_ln635_fu_384_p3 <= 
        ap_const_lv32_7FFFD801 when (tmp_fu_376_p3(0) = '1') else 
        ap_const_lv32_0;
    select_ln813_fu_552_p3 <= 
        ap_const_lv32_FFFFFFFF when (trunc_ln813_fu_548_p1(0) = '1') else 
        ap_const_lv32_0;
    sext_ln3009_fu_372_p0 <= f_q0;
        sext_ln3009_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln3009_fu_372_p0),32));

    sext_ln3010_fu_430_p0 <= g_q0;
        sext_ln3010_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln3010_fu_430_p0),32));

    sext_ln808_fu_524_p0 <= i_fu_128;
        sext_ln808_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln808_fu_524_p0),32));

        sext_ln968_fu_679_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln_fu_669_p4),14));

    shl_ln95_fu_637_p3 <= (REV10_q0 & ap_const_lv2_0);
    shl_ln_fu_399_p3 <= (trunc_ln3009_reg_768 & ap_const_lv2_0);
    sub_ln3029_fu_491_p2 <= std_logic_vector(unsigned(ap_const_lv32_A) - unsigned(d_10_fu_124));
    tmp_203_fu_434_p1 <= g_q0;
    tmp_203_fu_434_p3 <= tmp_203_fu_434_p1(7 downto 7);
    tmp_204_fu_528_p1 <= i_fu_128;
    tmp_204_fu_528_p3 <= tmp_204_fu_528_p1(5 downto 5);
    tmp_fu_376_p1 <= f_q0;
    tmp_fu_376_p3 <= tmp_fu_376_p1(7 downto 7);
    trunc_ln3009_fu_338_p1 <= u_07_fu_120(10 - 1 downto 0);
    trunc_ln3030_fu_475_p1 <= d_10_fu_124(4 - 1 downto 0);
    trunc_ln813_fu_548_p1 <= lshr_ln813_fu_542_p2(1 - 1 downto 0);
    u_212_fu_332_p2 <= std_logic_vector(unsigned(u_07_fu_120) + unsigned(ap_const_lv11_1));
    u_214_fu_621_p2 <= std_logic_vector(unsigned(u_134_fu_132) + unsigned(ap_const_lv11_1));

    vla18_address0_assign_proc : process(and_ln3013_reg_778, ap_CS_fsm_state3, ap_CS_fsm_state10, grp_make_fg_step_1_fu_234_vla18_address0, grp_modp_NTT2_ext_1_fu_281_vla18_address0, ap_CS_fsm_state6, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state14, zext_ln3009_1_fu_425_p1, zext_ln3010_fu_471_p1, ap_CS_fsm_state4, zext_ln967_3_fu_664_p1, zext_ln968_3_fu_712_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            vla18_address0 <= zext_ln968_3_fu_712_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            vla18_address0 <= zext_ln967_3_fu_664_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            vla18_address0 <= zext_ln3010_fu_471_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            vla18_address0 <= zext_ln3009_1_fu_425_p1(13 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_const_lv1_1 = and_ln3013_reg_778) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            vla18_address0 <= grp_modp_NTT2_ext_1_fu_281_vla18_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            vla18_address0 <= grp_make_fg_step_1_fu_234_vla18_address0;
        else 
            vla18_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    vla18_address1_assign_proc : process(and_ln3013_reg_778, grp_make_fg_step_1_fu_234_vla18_address1, grp_modp_NTT2_ext_1_fu_281_vla18_address1, ap_CS_fsm_state6, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_const_lv1_1 = and_ln3013_reg_778) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            vla18_address1 <= grp_modp_NTT2_ext_1_fu_281_vla18_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            vla18_address1 <= grp_make_fg_step_1_fu_234_vla18_address1;
        else 
            vla18_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    vla18_ce0_assign_proc : process(and_ln3013_reg_778, ap_CS_fsm_state3, ap_CS_fsm_state10, grp_make_fg_step_1_fu_234_vla18_ce0, grp_modp_NTT2_ext_1_fu_281_vla18_ce0, ap_CS_fsm_state6, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            vla18_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_const_lv1_1 = and_ln3013_reg_778) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            vla18_ce0 <= grp_modp_NTT2_ext_1_fu_281_vla18_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            vla18_ce0 <= grp_make_fg_step_1_fu_234_vla18_ce0;
        else 
            vla18_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    vla18_ce1_assign_proc : process(and_ln3013_reg_778, grp_make_fg_step_1_fu_234_vla18_ce1, grp_modp_NTT2_ext_1_fu_281_vla18_ce1, ap_CS_fsm_state6, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_const_lv1_1 = and_ln3013_reg_778) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            vla18_ce1 <= grp_modp_NTT2_ext_1_fu_281_vla18_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            vla18_ce1 <= grp_make_fg_step_1_fu_234_vla18_ce1;
        else 
            vla18_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    vla18_d0_assign_proc : process(and_ln3013_reg_778, w_68_reg_798, ap_CS_fsm_state3, ap_CS_fsm_state10, grp_make_fg_step_1_fu_234_vla18_d0, grp_modp_NTT2_ext_1_fu_281_vla18_d0, ap_CS_fsm_state6, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state4, x1_fu_136, x2_fu_140, w_66_fu_392_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            vla18_d0 <= x2_fu_140;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            vla18_d0 <= x1_fu_136;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            vla18_d0 <= w_68_reg_798;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            vla18_d0 <= w_66_fu_392_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_const_lv1_1 = and_ln3013_reg_778) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            vla18_d0 <= grp_modp_NTT2_ext_1_fu_281_vla18_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            vla18_d0 <= grp_make_fg_step_1_fu_234_vla18_d0;
        else 
            vla18_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    vla18_d1_assign_proc : process(and_ln3013_reg_778, grp_make_fg_step_1_fu_234_vla18_d1, grp_modp_NTT2_ext_1_fu_281_vla18_d1, ap_CS_fsm_state6, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_const_lv1_1 = and_ln3013_reg_778) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            vla18_d1 <= grp_modp_NTT2_ext_1_fu_281_vla18_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            vla18_d1 <= grp_make_fg_step_1_fu_234_vla18_d1;
        else 
            vla18_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    vla18_we0_assign_proc : process(and_ln3013_reg_778, ap_CS_fsm_state3, ap_CS_fsm_state10, grp_make_fg_step_1_fu_234_vla18_we0, grp_modp_NTT2_ext_1_fu_281_vla18_we0, ap_CS_fsm_state6, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            vla18_we0 <= ap_const_lv4_F;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_const_lv1_1 = and_ln3013_reg_778) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            vla18_we0 <= grp_modp_NTT2_ext_1_fu_281_vla18_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            vla18_we0 <= grp_make_fg_step_1_fu_234_vla18_we0;
        else 
            vla18_we0 <= ap_const_lv4_0;
        end if; 
    end process;


    vla18_we1_assign_proc : process(and_ln3013_reg_778, grp_make_fg_step_1_fu_234_vla18_we1, grp_modp_NTT2_ext_1_fu_281_vla18_we1, ap_CS_fsm_state6, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_const_lv1_1 = and_ln3013_reg_778) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            vla18_we1 <= grp_modp_NTT2_ext_1_fu_281_vla18_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            vla18_we1 <= grp_make_fg_step_1_fu_234_vla18_we1;
        else 
            vla18_we1 <= (0=>ap_const_logic_0, others=>'-');
        end if; 
    end process;

    w_66_fu_392_p2 <= std_logic_vector(unsigned(select_ln635_fu_384_p3) + unsigned(sext_ln3009_fu_372_p1));
    w_68_fu_450_p2 <= std_logic_vector(unsigned(select_ln635_18_fu_442_p3) + unsigned(sext_ln3010_fu_430_p1));
    xor_ln813_fu_536_p2 <= (grp_modp_montymul_fu_265_ap_return xor grp_modp_montymul_fu_255_ap_return);
    z_128_fu_566_p2 <= (grp_modp_montymul_fu_255_ap_return xor and_ln813_fu_560_p2);
    zext_ln3008_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_07_fu_120),64));
    zext_ln3009_1_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_415_p4),64));
    zext_ln3009_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_399_p3),15));
    zext_ln3010_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln84_reg_803),64));
    zext_ln962_fu_610_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_134_fu_132),64));
    zext_ln967_3_fu_664_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln85_fu_654_p4),64));
    zext_ln967_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln95_fu_637_p3),15));
    zext_ln968_3_fu_712_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln86_reg_879),64));
    zext_ln968_fu_683_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln968_fu_679_p1),15));
end behav;
