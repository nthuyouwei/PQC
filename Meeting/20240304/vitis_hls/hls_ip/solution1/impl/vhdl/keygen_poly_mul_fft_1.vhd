-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity keygen_poly_mul_fft_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    vla18_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    vla18_ce0 : OUT STD_LOGIC;
    vla18_we0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    vla18_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    vla18_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    vla18_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    vla18_ce1 : OUT STD_LOGIC;
    vla18_we1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    vla18_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    vla18_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    a : IN STD_LOGIC_VECTOR (14 downto 0);
    b : IN STD_LOGIC_VECTOR (14 downto 0);
    logn : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of keygen_poly_mul_fft_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv63_1 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal trunc_ln_reg_492 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln10_reg_497 : STD_LOGIC_VECTOR (11 downto 0);
    signal vla18_addr_reg_505 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln511_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal vla18_addr_302_reg_511 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln516_2_reg_516 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln12_reg_522 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln13_reg_528 : STD_LOGIC_VECTOR (12 downto 0);
    signal vla18_load_reg_534 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal vla18_load_203_reg_539 : STD_LOGIC_VECTOR (31 downto 0);
    signal vla18_addr_303_reg_544 : STD_LOGIC_VECTOR (12 downto 0);
    signal vla18_addr_304_reg_550 : STD_LOGIC_VECTOR (12 downto 0);
    signal vla18_load_204_reg_555 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal vla18_load_205_reg_560 : STD_LOGIC_VECTOR (31 downto 0);
    signal vla18_load_206_reg_575 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal vla18_load_207_reg_580 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_re_fu_390_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal a_im_fu_402_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal b_re_fu_414_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal b_im_fu_428_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_167_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_172_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_177_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_182_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_163_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal fpct_d_im_reg_639 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal zext_ln515_fu_263_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln515_1_fu_274_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln516_fu_342_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln516_1_fu_351_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln517_fu_356_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln517_1_fu_365_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln518_fu_370_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln518_1_fu_379_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal u_02_fu_64 : STD_LOGIC_VECTOR (62 downto 0);
    signal u_198_fu_234_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln64_fu_438_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal trunc_ln65_fu_457_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln509_fu_187_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal n_fu_191_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln511_fu_225_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln_fu_240_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln515_fu_248_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln11_fu_253_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln515_1_fu_268_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln516_fu_279_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln62_fu_284_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln516_1_fu_292_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln517_fu_307_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln518_fu_322_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln516_2_fu_346_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln517_1_fu_360_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln518_1_fu_374_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_fu_384_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_396_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_76_fu_408_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_77_fu_420_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_159_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln64_fu_434_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln65_fu_454_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component keygen_dsub_64ns_64ns_64_2_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component keygen_dadd_64ns_64ns_64_2_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component keygen_dmul_64ns_64ns_64_2_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    dsub_64ns_64ns_64_2_full_dsp_1_U279 : component keygen_dsub_64ns_64ns_64_2_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_167_p2,
        din1 => grp_fu_172_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_159_p2);

    dadd_64ns_64ns_64_2_full_dsp_1_U280 : component keygen_dadd_64ns_64ns_64_2_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_177_p2,
        din1 => grp_fu_182_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_163_p2);

    dmul_64ns_64ns_64_2_max_dsp_1_U281 : component keygen_dmul_64ns_64ns_64_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_re_fu_390_p1,
        din1 => b_re_fu_414_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_167_p2);

    dmul_64ns_64ns_64_2_max_dsp_1_U282 : component keygen_dmul_64ns_64ns_64_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_im_fu_402_p1,
        din1 => b_im_fu_428_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_172_p2);

    dmul_64ns_64ns_64_2_max_dsp_1_U283 : component keygen_dmul_64ns_64ns_64_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_re_fu_390_p1,
        din1 => b_im_fu_428_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_177_p2);

    dmul_64ns_64ns_64_2_max_dsp_1_U284 : component keygen_dmul_64ns_64ns_64_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_im_fu_402_p1,
        din1 => b_re_fu_414_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_182_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    u_02_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                u_02_fu_64 <= ap_const_lv63_0;
            elsif (((icmp_ln511_fu_229_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                u_02_fu_64 <= u_198_fu_234_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                fpct_d_im_reg_639 <= grp_fu_163_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                trunc_ln10_reg_497 <= n_fu_191_p2(12 downto 1);
                trunc_ln_reg_492 <= n_fu_191_p2(63 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln511_fu_229_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                trunc_ln12_reg_522 <= add_ln517_fu_307_p2(14 downto 2);
                trunc_ln13_reg_528 <= add_ln518_fu_322_p2(14 downto 2);
                trunc_ln516_2_reg_516 <= add_ln516_1_fu_292_p2(14 downto 2);
                vla18_addr_302_reg_511 <= zext_ln515_1_fu_274_p1(13 - 1 downto 0);
                vla18_addr_reg_505 <= zext_ln515_fu_263_p1(13 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                vla18_addr_303_reg_544 <= zext_ln516_fu_342_p1(13 - 1 downto 0);
                vla18_addr_304_reg_550 <= zext_ln516_1_fu_351_p1(13 - 1 downto 0);
                vla18_load_203_reg_539 <= vla18_q0;
                vla18_load_reg_534 <= vla18_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                vla18_load_204_reg_555 <= vla18_q1;
                vla18_load_205_reg_560 <= vla18_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                vla18_load_206_reg_575 <= vla18_q1;
                vla18_load_207_reg_580 <= vla18_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln511_fu_229_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln511_fu_229_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    a_im_fu_402_p1 <= tmp_s_fu_396_p3;
    a_re_fu_390_p1 <= tmp_fu_384_p3;
    add_ln515_1_fu_268_p2 <= std_logic_vector(unsigned(trunc_ln11_fu_253_p4) + unsigned(ap_const_lv13_1));
    add_ln515_fu_248_p2 <= std_logic_vector(unsigned(shl_ln_fu_240_p3) + unsigned(a));
    add_ln516_1_fu_292_p2 <= std_logic_vector(unsigned(shl_ln62_fu_284_p3) + unsigned(a));
    add_ln516_2_fu_346_p2 <= std_logic_vector(unsigned(trunc_ln516_2_reg_516) + unsigned(ap_const_lv13_1));
    add_ln516_fu_279_p2 <= std_logic_vector(unsigned(trunc_ln511_fu_225_p1) + unsigned(trunc_ln10_reg_497));
    add_ln517_1_fu_360_p2 <= std_logic_vector(unsigned(trunc_ln12_reg_522) + unsigned(ap_const_lv13_1));
    add_ln517_fu_307_p2 <= std_logic_vector(unsigned(shl_ln_fu_240_p3) + unsigned(b));
    add_ln518_1_fu_374_p2 <= std_logic_vector(unsigned(trunc_ln13_reg_528) + unsigned(ap_const_lv13_1));
    add_ln518_fu_322_p2 <= std_logic_vector(unsigned(shl_ln62_fu_284_p3) + unsigned(b));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln511_fu_229_p2)
    begin
        if ((((icmp_ln511_fu_229_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln511_fu_229_p2)
    begin
        if (((icmp_ln511_fu_229_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_im_fu_428_p1 <= tmp_77_fu_420_p3;
    b_re_fu_414_p1 <= tmp_76_fu_408_p3;
    bitcast_ln64_fu_434_p1 <= grp_fu_159_p2;
    bitcast_ln65_fu_454_p1 <= fpct_d_im_reg_639;
    icmp_ln511_fu_229_p2 <= "1" when (u_02_fu_64 = trunc_ln_reg_492) else "0";
    n_fu_191_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_1),to_integer(unsigned('0' & zext_ln509_fu_187_p1(31-1 downto 0)))));
    shl_ln62_fu_284_p3 <= (add_ln516_fu_279_p2 & ap_const_lv3_0);
    shl_ln_fu_240_p3 <= (trunc_ln511_fu_225_p1 & ap_const_lv3_0);
    tmp_76_fu_408_p3 <= (vla18_load_207_reg_580 & vla18_load_206_reg_575);
    tmp_77_fu_420_p3 <= (vla18_q0 & vla18_q1);
    tmp_fu_384_p3 <= (vla18_load_203_reg_539 & vla18_load_reg_534);
    tmp_s_fu_396_p3 <= (vla18_load_205_reg_560 & vla18_load_204_reg_555);
    trunc_ln11_fu_253_p4 <= add_ln515_fu_248_p2(14 downto 2);
    trunc_ln511_fu_225_p1 <= u_02_fu_64(12 - 1 downto 0);
    trunc_ln64_fu_438_p1 <= bitcast_ln64_fu_434_p1(32 - 1 downto 0);
    trunc_ln65_fu_457_p1 <= bitcast_ln65_fu_454_p1(32 - 1 downto 0);
    u_198_fu_234_p2 <= std_logic_vector(unsigned(u_02_fu_64) + unsigned(ap_const_lv63_1));

    vla18_address0_assign_proc : process(ap_CS_fsm_state2, vla18_addr_302_reg_511, ap_CS_fsm_state3, vla18_addr_304_reg_550, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state8, zext_ln515_1_fu_274_p1, zext_ln516_1_fu_351_p1, zext_ln517_1_fu_365_p1, zext_ln518_1_fu_379_p1, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            vla18_address0 <= vla18_addr_304_reg_550;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            vla18_address0 <= vla18_addr_302_reg_511;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            vla18_address0 <= zext_ln518_1_fu_379_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            vla18_address0 <= zext_ln517_1_fu_365_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            vla18_address0 <= zext_ln516_1_fu_351_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            vla18_address0 <= zext_ln515_1_fu_274_p1(13 - 1 downto 0);
        else 
            vla18_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    vla18_address1_assign_proc : process(vla18_addr_reg_505, ap_CS_fsm_state2, ap_CS_fsm_state3, vla18_addr_303_reg_544, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state8, zext_ln515_fu_263_p1, zext_ln516_fu_342_p1, zext_ln517_fu_356_p1, zext_ln518_fu_370_p1, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            vla18_address1 <= vla18_addr_303_reg_544;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            vla18_address1 <= vla18_addr_reg_505;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            vla18_address1 <= zext_ln518_fu_370_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            vla18_address1 <= zext_ln517_fu_356_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            vla18_address1 <= zext_ln516_fu_342_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            vla18_address1 <= zext_ln515_fu_263_p1(13 - 1 downto 0);
        else 
            vla18_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    vla18_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            vla18_ce0 <= ap_const_logic_1;
        else 
            vla18_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    vla18_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            vla18_ce1 <= ap_const_logic_1;
        else 
            vla18_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    vla18_d0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, bitcast_ln64_fu_434_p1, bitcast_ln65_fu_454_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            vla18_d0 <= bitcast_ln65_fu_454_p1(63 downto 32);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            vla18_d0 <= bitcast_ln64_fu_434_p1(63 downto 32);
        else 
            vla18_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    vla18_d1_assign_proc : process(ap_CS_fsm_state8, trunc_ln64_fu_438_p1, ap_CS_fsm_state9, trunc_ln65_fu_457_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            vla18_d1 <= trunc_ln65_fu_457_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            vla18_d1 <= trunc_ln64_fu_438_p1;
        else 
            vla18_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    vla18_we0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            vla18_we0 <= ap_const_lv4_F;
        else 
            vla18_we0 <= ap_const_lv4_0;
        end if; 
    end process;


    vla18_we1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            vla18_we1 <= ap_const_lv4_F;
        else 
            vla18_we1 <= ap_const_lv4_0;
        end if; 
    end process;

    zext_ln509_fu_187_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(logn),64));
    zext_ln515_1_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln515_1_fu_268_p2),64));
    zext_ln515_fu_263_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln11_fu_253_p4),64));
    zext_ln516_1_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln516_2_fu_346_p2),64));
    zext_ln516_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln516_2_reg_516),64));
    zext_ln517_1_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln517_1_fu_360_p2),64));
    zext_ln517_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln12_reg_522),64));
    zext_ln518_1_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln518_1_fu_374_p2),64));
    zext_ln518_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln13_reg_528),64));
end behav;
