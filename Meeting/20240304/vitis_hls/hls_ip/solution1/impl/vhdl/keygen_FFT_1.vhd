-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity keygen_FFT_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    vla18_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    vla18_ce0 : OUT STD_LOGIC;
    vla18_we0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    vla18_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    vla18_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    vla18_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    vla18_ce1 : OUT STD_LOGIC;
    vla18_we1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    vla18_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    vla18_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    f : IN STD_LOGIC_VECTOR (14 downto 0);
    logn : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of keygen_FFT_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv63_1 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal fpr_gm_tab_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal fpr_gm_tab_ce0 : STD_LOGIC;
    signal fpr_gm_tab_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal fpr_gm_tab_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal fpr_gm_tab_ce1 : STD_LOGIC;
    signal fpr_gm_tab_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_255_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_287 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal trunc_ln20_reg_821 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln957_fu_356_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln957_reg_833 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln953_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln955_fu_360_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln21_reg_843 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln965_fu_374_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln965_reg_848 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln22_reg_853 : STD_LOGIC_VECTOR (11 downto 0);
    signal i1_3_fu_393_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal i1_3_reg_861 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln959_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_re_reg_876 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal s_im_reg_882 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln23_reg_891 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln968_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln973_2_reg_897 : STD_LOGIC_VECTOR (12 downto 0);
    signal vla18_addr_360_reg_903 : STD_LOGIC_VECTOR (12 downto 0);
    signal vla18_addr_361_reg_909 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln24_reg_914 : STD_LOGIC_VECTOR (12 downto 0);
    signal j_13_fu_590_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_13_reg_920 : STD_LOGIC_VECTOR (63 downto 0);
    signal j1_fu_600_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln959_fu_606_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal vla18_load_240_reg_935 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal vla18_load_241_reg_940 : STD_LOGIC_VECTOR (31 downto 0);
    signal vla18_addr_362_reg_945 : STD_LOGIC_VECTOR (12 downto 0);
    signal vla18_addr_363_reg_951 : STD_LOGIC_VECTOR (12 downto 0);
    signal y_re_1_fu_632_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal y_im_1_fu_646_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal vla18_addr_reg_968 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal vla18_addr_357_reg_974 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_261_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_266_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_271_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_276_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_re_fu_674_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal vla18_addr_358_reg_1005 : STD_LOGIC_VECTOR (12 downto 0);
    signal vla18_addr_359_reg_1011 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_251_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_im_fu_702_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal fpct_re_5_reg_1028 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvars_iv_reg_208 : STD_LOGIC_VECTOR (63 downto 0);
    signal j1_12_reg_218 : STD_LOGIC_VECTOR (63 downto 0);
    signal i1_reg_230 : STD_LOGIC_VECTOR (62 downto 0);
    signal j_02_reg_241 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal zext_ln965_fu_416_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln966_fu_427_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln974_fu_546_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln974_1_fu_557_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln975_fu_612_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln975_1_fu_621_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln972_fu_652_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln972_1_fu_661_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln973_fu_680_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln973_1_fu_689_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_08_fu_86 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_fu_437_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_fu_90 : STD_LOGIC_VECTOR (62 downto 0);
    signal u_010_fu_94 : STD_LOGIC_VECTOR (31 downto 0);
    signal u_fu_432_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln12_fu_712_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln13_fu_732_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal trunc_ln32_fu_751_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln33_fu_771_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_251_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_251_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_255_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_255_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln949_fu_293_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal n_fu_297_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ht_fu_346_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln965_1_fu_399_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln965_fu_403_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln_fu_408_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln966_fu_421_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln972_fu_463_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln101_fu_467_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln972_fu_475_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln973_fu_490_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln102_fu_495_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln973_1_fu_503_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln974_fu_518_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln103_fu_523_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln974_1_fu_531_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln974_1_fu_536_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln974_2_fu_551_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln975_fu_562_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln104_fu_567_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln975_1_fu_575_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln953_fu_596_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln975_2_fu_616_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_89_fu_626_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_90_fu_638_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln972_1_fu_656_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_fu_666_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln973_2_fu_684_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_s_fu_694_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln12_fu_708_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln13_fu_728_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln32_fu_748_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln33_fu_767_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_251_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_255_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component keygen_dadddsub_64ns_64ns_64_2_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component keygen_dmul_64ns_64ns_64_2_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component keygen_FFT_fpr_gm_tab_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    fpr_gm_tab_U : component keygen_FFT_fpr_gm_tab_ROM_AUTO_1R
    generic map (
        DataWidth => 64,
        AddressRange => 2048,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fpr_gm_tab_address0,
        ce0 => fpr_gm_tab_ce0,
        q0 => fpr_gm_tab_q0,
        address1 => fpr_gm_tab_address1,
        ce1 => fpr_gm_tab_ce1,
        q1 => fpr_gm_tab_q1);

    dadddsub_64ns_64ns_64_2_full_dsp_1_U214 : component keygen_dadddsub_64ns_64ns_64_2_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_251_p0,
        din1 => grp_fu_251_p1,
        opcode => grp_fu_251_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_251_p2);

    dadddsub_64ns_64ns_64_2_full_dsp_1_U215 : component keygen_dadddsub_64ns_64ns_64_2_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_255_p0,
        din1 => grp_fu_255_p1,
        opcode => grp_fu_255_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_255_p2);

    dmul_64ns_64ns_64_2_max_dsp_1_U216 : component keygen_dmul_64ns_64ns_64_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => y_re_1_fu_632_p1,
        din1 => s_re_reg_876,
        ce => ap_const_logic_1,
        dout => grp_fu_261_p2);

    dmul_64ns_64ns_64_2_max_dsp_1_U217 : component keygen_dmul_64ns_64ns_64_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => y_im_1_fu_646_p1,
        din1 => s_im_reg_882,
        ce => ap_const_logic_1,
        dout => grp_fu_266_p2);

    dmul_64ns_64ns_64_2_max_dsp_1_U218 : component keygen_dmul_64ns_64ns_64_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => y_re_1_fu_632_p1,
        din1 => s_im_reg_882,
        ce => ap_const_logic_1,
        dout => grp_fu_271_p2);

    dmul_64ns_64ns_64_2_max_dsp_1_U219 : component keygen_dmul_64ns_64ns_64_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => y_im_1_fu_646_p1,
        din1 => s_re_reg_876,
        ce => ap_const_logic_1,
        dout => grp_fu_276_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i1_reg_230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln953_fu_341_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i1_reg_230 <= ap_const_lv63_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln968_fu_457_p2 = ap_const_lv1_0))) then 
                i1_reg_230 <= i1_3_reg_861;
            end if; 
        end if;
    end process;

    indvars_iv_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln953_fu_341_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvars_iv_reg_208 <= zext_ln955_fu_360_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln968_fu_457_p2 = ap_const_lv1_0))) then 
                indvars_iv_reg_208 <= add_ln959_fu_606_p2;
            end if; 
        end if;
    end process;

    j1_12_reg_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln953_fu_341_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j1_12_reg_218 <= ap_const_lv64_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln968_fu_457_p2 = ap_const_lv1_0))) then 
                j1_12_reg_218 <= j1_fu_600_p2;
            end if; 
        end if;
    end process;

    j_02_reg_241_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                j_02_reg_241 <= j_13_reg_920;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_02_reg_241 <= j1_12_reg_218;
            end if; 
        end if;
    end process;

    m_08_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                m_08_fu_86(1) <= '1';
                m_08_fu_86(2) <= '0';
                m_08_fu_86(3) <= '0';
                m_08_fu_86(4) <= '0';
                m_08_fu_86(5) <= '0';
                m_08_fu_86(6) <= '0';
                m_08_fu_86(7) <= '0';
                m_08_fu_86(8) <= '0';
                m_08_fu_86(9) <= '0';
                m_08_fu_86(10) <= '0';
                m_08_fu_86(11) <= '0';
                m_08_fu_86(12) <= '0';
                m_08_fu_86(13) <= '0';
                m_08_fu_86(14) <= '0';
                m_08_fu_86(15) <= '0';
                m_08_fu_86(16) <= '0';
                m_08_fu_86(17) <= '0';
                m_08_fu_86(18) <= '0';
                m_08_fu_86(19) <= '0';
                m_08_fu_86(20) <= '0';
                m_08_fu_86(21) <= '0';
                m_08_fu_86(22) <= '0';
                m_08_fu_86(23) <= '0';
                m_08_fu_86(24) <= '0';
                m_08_fu_86(25) <= '0';
                m_08_fu_86(26) <= '0';
                m_08_fu_86(27) <= '0';
                m_08_fu_86(28) <= '0';
                m_08_fu_86(29) <= '0';
                m_08_fu_86(30) <= '0';
                m_08_fu_86(31) <= '0';
                m_08_fu_86(32) <= '0';
                m_08_fu_86(33) <= '0';
                m_08_fu_86(34) <= '0';
                m_08_fu_86(35) <= '0';
                m_08_fu_86(36) <= '0';
                m_08_fu_86(37) <= '0';
                m_08_fu_86(38) <= '0';
                m_08_fu_86(39) <= '0';
                m_08_fu_86(40) <= '0';
                m_08_fu_86(41) <= '0';
                m_08_fu_86(42) <= '0';
                m_08_fu_86(43) <= '0';
                m_08_fu_86(44) <= '0';
                m_08_fu_86(45) <= '0';
                m_08_fu_86(46) <= '0';
                m_08_fu_86(47) <= '0';
                m_08_fu_86(48) <= '0';
                m_08_fu_86(49) <= '0';
                m_08_fu_86(50) <= '0';
                m_08_fu_86(51) <= '0';
                m_08_fu_86(52) <= '0';
                m_08_fu_86(53) <= '0';
                m_08_fu_86(54) <= '0';
                m_08_fu_86(55) <= '0';
                m_08_fu_86(56) <= '0';
                m_08_fu_86(57) <= '0';
                m_08_fu_86(58) <= '0';
                m_08_fu_86(59) <= '0';
                m_08_fu_86(60) <= '0';
                m_08_fu_86(61) <= '0';
                m_08_fu_86(62) <= '0';
                m_08_fu_86(63) <= '0';
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln959_fu_388_p2 = ap_const_lv1_1))) then 
                                m_08_fu_86(63 downto 1) <= m_fu_437_p2(63 downto 1);
            end if; 
        end if;
    end process;

    t_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                t_fu_90 <= n_fu_297_p2(63 downto 1);
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln959_fu_388_p2 = ap_const_lv1_1))) then 
                t_fu_90 <= zext_ln957_reg_833;
            end if; 
        end if;
    end process;

    u_010_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                u_010_fu_94 <= ap_const_lv32_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln959_fu_388_p2 = ap_const_lv1_1))) then 
                u_010_fu_94 <= u_fu_432_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                fpct_re_5_reg_1028 <= grp_fu_255_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i1_3_reg_861 <= i1_3_fu_393_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln968_fu_457_p2 = ap_const_lv1_1))) then
                j_13_reg_920 <= j_13_fu_590_p2;
                trunc_ln23_reg_891 <= add_ln972_fu_475_p2(14 downto 2);
                trunc_ln24_reg_914 <= add_ln975_1_fu_575_p2(14 downto 2);
                trunc_ln973_2_reg_897 <= add_ln973_1_fu_503_p2(14 downto 2);
                vla18_addr_360_reg_903 <= zext_ln974_fu_546_p1(13 - 1 downto 0);
                vla18_addr_361_reg_909 <= zext_ln974_1_fu_557_p1(13 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then
                reg_287 <= grp_fu_255_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                s_im_reg_882 <= fpr_gm_tab_q0;
                s_re_reg_876 <= fpr_gm_tab_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                trunc_ln20_reg_821 <= n_fu_297_p2(12 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln953_fu_341_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                trunc_ln21_reg_843 <= m_08_fu_86(63 downto 1);
                trunc_ln22_reg_853 <= t_fu_90(12 downto 1);
                    trunc_ln965_reg_848(9 downto 1) <= trunc_ln965_fu_374_p1(9 downto 1);
                    zext_ln957_reg_833(61 downto 0) <= zext_ln957_fu_356_p1(61 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                vla18_addr_357_reg_974 <= zext_ln972_1_fu_661_p1(13 - 1 downto 0);
                vla18_addr_reg_968 <= zext_ln972_fu_652_p1(13 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                vla18_addr_358_reg_1005 <= zext_ln973_fu_680_p1(13 - 1 downto 0);
                vla18_addr_359_reg_1011 <= zext_ln973_1_fu_689_p1(13 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                vla18_addr_362_reg_945 <= zext_ln975_fu_612_p1(13 - 1 downto 0);
                vla18_addr_363_reg_951 <= zext_ln975_1_fu_621_p1(13 - 1 downto 0);
                vla18_load_240_reg_935 <= vla18_q1;
                vla18_load_241_reg_940 <= vla18_q0;
            end if;
        end if;
    end process;
    zext_ln957_reg_833(62) <= '0';
    trunc_ln965_reg_848(0) <= '0';
    m_08_fu_86(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln953_fu_341_p2, ap_CS_fsm_state3, icmp_ln959_fu_388_p2, ap_CS_fsm_state5, icmp_ln968_fu_457_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln953_fu_341_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln959_fu_388_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln968_fu_457_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    add_ln959_fu_606_p2 <= std_logic_vector(unsigned(zext_ln953_fu_596_p1) + unsigned(indvars_iv_reg_208));
    add_ln965_fu_403_p2 <= std_logic_vector(unsigned(trunc_ln965_1_fu_399_p1) + unsigned(trunc_ln965_reg_848));
    add_ln972_1_fu_656_p2 <= std_logic_vector(unsigned(trunc_ln23_reg_891) + unsigned(ap_const_lv13_1));
    add_ln972_fu_475_p2 <= std_logic_vector(unsigned(shl_ln101_fu_467_p3) + unsigned(f));
    add_ln973_1_fu_503_p2 <= std_logic_vector(unsigned(shl_ln102_fu_495_p3) + unsigned(f));
    add_ln973_2_fu_684_p2 <= std_logic_vector(unsigned(trunc_ln973_2_reg_897) + unsigned(ap_const_lv13_1));
    add_ln973_fu_490_p2 <= std_logic_vector(unsigned(trunc_ln972_fu_463_p1) + unsigned(trunc_ln20_reg_821));
    add_ln974_1_fu_531_p2 <= std_logic_vector(unsigned(shl_ln103_fu_523_p3) + unsigned(f));
    add_ln974_2_fu_551_p2 <= std_logic_vector(unsigned(trunc_ln974_1_fu_536_p4) + unsigned(ap_const_lv13_1));
    add_ln974_fu_518_p2 <= std_logic_vector(unsigned(trunc_ln972_fu_463_p1) + unsigned(trunc_ln22_reg_853));
    add_ln975_1_fu_575_p2 <= std_logic_vector(unsigned(shl_ln104_fu_567_p3) + unsigned(f));
    add_ln975_2_fu_616_p2 <= std_logic_vector(unsigned(trunc_ln24_reg_914) + unsigned(ap_const_lv13_1));
    add_ln975_fu_562_p2 <= std_logic_vector(unsigned(add_ln974_fu_518_p2) + unsigned(trunc_ln20_reg_821));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln953_fu_341_p2)
    begin
        if ((((icmp_ln953_fu_341_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln953_fu_341_p2)
    begin
        if (((icmp_ln953_fu_341_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln12_fu_708_p1 <= grp_fu_251_p2;
    bitcast_ln13_fu_728_p1 <= grp_fu_251_p2;
    bitcast_ln32_fu_748_p1 <= fpct_re_5_reg_1028;
    bitcast_ln33_fu_767_p1 <= reg_287;
    fpr_gm_tab_address0 <= zext_ln966_fu_427_p1(11 - 1 downto 0);
    fpr_gm_tab_address1 <= zext_ln965_fu_416_p1(11 - 1 downto 0);

    fpr_gm_tab_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fpr_gm_tab_ce0 <= ap_const_logic_1;
        else 
            fpr_gm_tab_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fpr_gm_tab_ce1_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fpr_gm_tab_ce1 <= ap_const_logic_1;
        else 
            fpr_gm_tab_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_251_opcode_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_251_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_fu_251_opcode <= ap_const_lv2_0;
        else 
            grp_fu_251_opcode <= "XX";
        end if; 
    end process;


    grp_fu_251_p0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state8, grp_fu_261_p2, x_re_fu_674_p1, x_im_fu_702_p1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_251_p0 <= x_im_fu_702_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_251_p0 <= x_re_fu_674_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_251_p0 <= grp_fu_261_p2;
        else 
            grp_fu_251_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_251_p1_assign_proc : process(reg_287, ap_CS_fsm_state9, ap_CS_fsm_state8, grp_fu_266_p2, grp_fu_251_p2, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_251_p1 <= reg_287;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_251_p1 <= grp_fu_251_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_251_p1 <= grp_fu_266_p2;
        else 
            grp_fu_251_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_255_opcode_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_fu_255_opcode <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_255_opcode <= ap_const_lv2_0;
        else 
            grp_fu_255_opcode <= "XX";
        end if; 
    end process;


    grp_fu_255_p0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state8, grp_fu_271_p2, x_re_fu_674_p1, x_im_fu_702_p1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_255_p0 <= x_im_fu_702_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_255_p0 <= x_re_fu_674_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_255_p0 <= grp_fu_271_p2;
        else 
            grp_fu_255_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_255_p1_assign_proc : process(reg_287, ap_CS_fsm_state9, ap_CS_fsm_state8, grp_fu_276_p2, grp_fu_251_p2, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_255_p1 <= reg_287;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_255_p1 <= grp_fu_251_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_255_p1 <= grp_fu_276_p2;
        else 
            grp_fu_255_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    ht_fu_346_p4 <= t_fu_90(62 downto 1);
    i1_3_fu_393_p2 <= std_logic_vector(unsigned(i1_reg_230) + unsigned(ap_const_lv63_1));
    icmp_ln953_fu_341_p2 <= "1" when (unsigned(u_010_fu_94) < unsigned(logn)) else "0";
    icmp_ln959_fu_388_p2 <= "1" when (i1_reg_230 = trunc_ln21_reg_843) else "0";
    icmp_ln968_fu_457_p2 <= "1" when (unsigned(j_02_reg_241) < unsigned(indvars_iv_reg_208)) else "0";
    j1_fu_600_p2 <= std_logic_vector(unsigned(zext_ln953_fu_596_p1) + unsigned(j1_12_reg_218));
    j_13_fu_590_p2 <= std_logic_vector(unsigned(j_02_reg_241) + unsigned(ap_const_lv64_1));
    m_fu_437_p2 <= std_logic_vector(shift_left(unsigned(m_08_fu_86),to_integer(unsigned('0' & ap_const_lv64_1(31-1 downto 0)))));
    n_fu_297_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_1),to_integer(unsigned('0' & zext_ln949_fu_293_p1(31-1 downto 0)))));
    or_ln966_fu_421_p2 <= (shl_ln_fu_408_p3 or ap_const_lv11_1);
    shl_ln101_fu_467_p3 <= (trunc_ln972_fu_463_p1 & ap_const_lv3_0);
    shl_ln102_fu_495_p3 <= (add_ln973_fu_490_p2 & ap_const_lv3_0);
    shl_ln103_fu_523_p3 <= (add_ln974_fu_518_p2 & ap_const_lv3_0);
    shl_ln104_fu_567_p3 <= (add_ln975_fu_562_p2 & ap_const_lv3_0);
    shl_ln_fu_408_p3 <= (add_ln965_fu_403_p2 & ap_const_lv1_0);
    tmp_89_fu_626_p3 <= (vla18_load_241_reg_940 & vla18_load_240_reg_935);
    tmp_90_fu_638_p3 <= (vla18_q0 & vla18_q1);
    tmp_fu_666_p3 <= (vla18_q0 & vla18_q1);
    tmp_s_fu_694_p3 <= (vla18_q0 & vla18_q1);
    trunc_ln12_fu_712_p1 <= bitcast_ln12_fu_708_p1(32 - 1 downto 0);
    trunc_ln13_fu_732_p1 <= bitcast_ln13_fu_728_p1(32 - 1 downto 0);
    trunc_ln32_fu_751_p1 <= bitcast_ln32_fu_748_p1(32 - 1 downto 0);
    trunc_ln33_fu_771_p1 <= bitcast_ln33_fu_767_p1(32 - 1 downto 0);
    trunc_ln965_1_fu_399_p1 <= i1_reg_230(10 - 1 downto 0);
    trunc_ln965_fu_374_p1 <= m_08_fu_86(10 - 1 downto 0);
    trunc_ln972_fu_463_p1 <= j_02_reg_241(12 - 1 downto 0);
    trunc_ln974_1_fu_536_p4 <= add_ln974_1_fu_531_p2(14 downto 2);
    u_fu_432_p2 <= std_logic_vector(unsigned(u_010_fu_94) + unsigned(ap_const_lv32_1));

    vla18_address0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state5, vla18_addr_361_reg_909, ap_CS_fsm_state6, vla18_addr_363_reg_951, ap_CS_fsm_state8, vla18_addr_357_reg_974, vla18_addr_359_reg_1011, ap_CS_fsm_state10, ap_CS_fsm_state13, zext_ln974_1_fu_557_p1, zext_ln975_1_fu_621_p1, zext_ln972_1_fu_661_p1, zext_ln973_1_fu_689_p1, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            vla18_address0 <= vla18_addr_363_reg_951;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            vla18_address0 <= vla18_addr_361_reg_909;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            vla18_address0 <= vla18_addr_359_reg_1011;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            vla18_address0 <= vla18_addr_357_reg_974;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            vla18_address0 <= zext_ln973_1_fu_689_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            vla18_address0 <= zext_ln972_1_fu_661_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            vla18_address0 <= zext_ln975_1_fu_621_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            vla18_address0 <= zext_ln974_1_fu_557_p1(13 - 1 downto 0);
        else 
            vla18_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    vla18_address1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state5, vla18_addr_360_reg_903, ap_CS_fsm_state6, vla18_addr_362_reg_945, vla18_addr_reg_968, ap_CS_fsm_state8, vla18_addr_358_reg_1005, ap_CS_fsm_state10, ap_CS_fsm_state13, zext_ln974_fu_546_p1, zext_ln975_fu_612_p1, zext_ln972_fu_652_p1, zext_ln973_fu_680_p1, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            vla18_address1 <= vla18_addr_362_reg_945;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            vla18_address1 <= vla18_addr_360_reg_903;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            vla18_address1 <= vla18_addr_358_reg_1005;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            vla18_address1 <= vla18_addr_reg_968;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            vla18_address1 <= zext_ln973_fu_680_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            vla18_address1 <= zext_ln972_fu_652_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            vla18_address1 <= zext_ln975_fu_612_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            vla18_address1 <= zext_ln974_fu_546_p1(13 - 1 downto 0);
        else 
            vla18_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    vla18_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state13, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            vla18_ce0 <= ap_const_logic_1;
        else 
            vla18_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    vla18_ce1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state13, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            vla18_ce1 <= ap_const_logic_1;
        else 
            vla18_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    vla18_d0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state10, ap_CS_fsm_state13, ap_CS_fsm_state12, bitcast_ln12_fu_708_p1, bitcast_ln13_fu_728_p1, bitcast_ln32_fu_748_p1, bitcast_ln33_fu_767_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            vla18_d0 <= bitcast_ln33_fu_767_p1(63 downto 32);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            vla18_d0 <= bitcast_ln32_fu_748_p1(63 downto 32);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            vla18_d0 <= bitcast_ln13_fu_728_p1(63 downto 32);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            vla18_d0 <= bitcast_ln12_fu_708_p1(63 downto 32);
        else 
            vla18_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    vla18_d1_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state10, ap_CS_fsm_state13, trunc_ln12_fu_712_p1, trunc_ln13_fu_732_p1, ap_CS_fsm_state12, trunc_ln32_fu_751_p1, trunc_ln33_fu_771_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            vla18_d1 <= trunc_ln33_fu_771_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            vla18_d1 <= trunc_ln32_fu_751_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            vla18_d1 <= trunc_ln13_fu_732_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            vla18_d1 <= trunc_ln12_fu_712_p1;
        else 
            vla18_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    vla18_we0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state10, ap_CS_fsm_state13, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            vla18_we0 <= ap_const_lv4_F;
        else 
            vla18_we0 <= ap_const_lv4_0;
        end if; 
    end process;


    vla18_we1_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state10, ap_CS_fsm_state13, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            vla18_we1 <= ap_const_lv4_F;
        else 
            vla18_we1 <= ap_const_lv4_0;
        end if; 
    end process;

    x_im_fu_702_p1 <= tmp_s_fu_694_p3;
    x_re_fu_674_p1 <= tmp_fu_666_p3;
    y_im_1_fu_646_p1 <= tmp_90_fu_638_p3;
    y_re_1_fu_632_p1 <= tmp_89_fu_626_p3;
    zext_ln949_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(logn),64));
    zext_ln953_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_fu_90),64));
    zext_ln955_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ht_fu_346_p4),64));
    zext_ln957_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ht_fu_346_p4),63));
    zext_ln965_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_408_p3),64));
    zext_ln966_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln966_fu_421_p2),64));
    zext_ln972_1_fu_661_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln972_1_fu_656_p2),64));
    zext_ln972_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln23_reg_891),64));
    zext_ln973_1_fu_689_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln973_2_fu_684_p2),64));
    zext_ln973_fu_680_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln973_2_reg_897),64));
    zext_ln974_1_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln974_2_fu_551_p2),64));
    zext_ln974_fu_546_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln974_1_fu_536_p4),64));
    zext_ln975_1_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln975_2_fu_616_p2),64));
    zext_ln975_fu_612_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln24_reg_914),64));
end behav;
