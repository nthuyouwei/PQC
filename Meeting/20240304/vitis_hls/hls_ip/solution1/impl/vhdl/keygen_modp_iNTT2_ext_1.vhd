-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity keygen_modp_iNTT2_ext_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    vla18_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    vla18_ce0 : OUT STD_LOGIC;
    vla18_we0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    vla18_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    vla18_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    vla18_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    vla18_ce1 : OUT STD_LOGIC;
    vla18_we1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    vla18_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    vla18_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    a : IN STD_LOGIC_VECTOR (14 downto 0);
    stride : IN STD_LOGIC_VECTOR (8 downto 0);
    igm : IN STD_LOGIC_VECTOR (14 downto 0);
    logn : IN STD_LOGIC_VECTOR (31 downto 0);
    p : IN STD_LOGIC_VECTOR (24 downto 0);
    p0i : IN STD_LOGIC_VECTOR (30 downto 0) );
end;


architecture behav of keygen_modp_iNTT2_ext_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv63_1 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv25_1FFFFFF : STD_LOGIC_VECTOR (24 downto 0) := "1111111111111111111111111";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_cast2_cast_cast_cast_fu_231_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast2_cast_cast_cast_reg_880 : STD_LOGIC_VECTOR (31 downto 0);
    signal stride_cast1_fu_235_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal stride_cast1_reg_887 : STD_LOGIC_VECTOR (63 downto 0);
    signal stride_cast_fu_239_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal stride_cast_reg_893 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln1334_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1334_reg_899 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_fu_253_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal n_reg_917 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1339_fu_259_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal zext_ln1339_reg_922 : STD_LOGIC_VECTOR (61 downto 0);
    signal hm_fu_292_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal hm_reg_931 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln1339_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln1343_fu_302_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1343_reg_936 : STD_LOGIC_VECTOR (63 downto 0);
    signal dt_fu_306_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal dt_reg_941 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_reg_947 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln1373_fu_333_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln1373_reg_966 : STD_LOGIC_VECTOR (62 downto 0);
    signal u_fu_352_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal u_reg_974 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal lshr_ln_reg_979 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln1345_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1345_fu_390_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_839_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln1352_reg_999 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_844_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln1353_reg_1004 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln1354_fu_416_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln1354_reg_1009 : STD_LOGIC_VECTOR (62 downto 0);
    signal v_fu_426_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal v_reg_1017 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal vla18_addr_316_reg_1022 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln1354_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal vla18_addr_317_reg_1028 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln1354_2_fu_502_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln1354_2_reg_1033 : STD_LOGIC_VECTOR (63 downto 0);
    signal v1_2_fu_507_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal d_9_fu_681_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_9_reg_1043 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal vla18_addr_315_reg_1051 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_ln1373_fu_690_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal v1_reg_179 : STD_LOGIC_VECTOR (63 downto 0);
    signal u_09_reg_191 : STD_LOGIC_VECTOR (62 downto 0);
    signal v_05_reg_202 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal idx18_reg_213 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1351_fu_412_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1358_fu_482_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1359_fu_497_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1374_fu_731_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_fu_86 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_6_fu_90 : STD_LOGIC_VECTOR (63 downto 0);
    signal idx_fu_94 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln1373_2_fu_736_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_02_fu_98 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_16_fu_695_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal d_7_fu_832_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast2_cast_cast_fu_227_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_cast2_cast_cast_fu_227_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln1337_fu_249_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_276_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal sub_ln1372_fu_322_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ni_fu_327_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1351_fu_358_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln1351_fu_362_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln_fu_367_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln1351_3_fu_375_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln1329_2_fu_394_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln1354_fu_432_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln1348_fu_436_p2 : STD_LOGIC_VECTOR (12 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln1348_fu_436_p2 : signal is "no";
    signal shl_ln67_fu_441_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln1348_7_fu_454_p2 : STD_LOGIC_VECTOR (12 downto 0);
    attribute use_dsp48 of add_ln1348_7_fu_454_p2 : signal is "no";
    signal shl_ln1348_2_fu_459_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal r1_fu_449_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal lshr_ln64_fu_472_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal r2_fu_467_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal lshr_ln65_fu_487_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln685_fu_512_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln685_fu_517_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_191_fu_523_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln685_fu_531_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal and_ln685_fu_539_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal and_ln685_fu_539_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln685_fu_544_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln685_fu_548_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln697_fu_559_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_192_fu_565_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln697_fu_573_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal and_ln697_fu_581_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal and_ln697_fu_581_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln697_fu_586_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln697_fu_590_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln697_fu_594_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_100_fu_604_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_100_fu_604_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_100_fu_604_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal mul_ln722_4_fu_613_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln722_4_fu_613_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal w_60_fu_622_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal w_60_fu_622_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal w_60_fu_622_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal zext_ln718_1_fu_627_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln723_1_fu_631_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln723_1_fu_637_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_8_fu_647_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_193_fu_652_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln724_1_fu_660_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal and_ln724_1_fu_668_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal and_ln724_1_fu_668_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln724_1_fu_673_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln724_1_fu_677_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1329_fu_704_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln66_fu_708_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_fu_716_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal lshr_ln63_fu_721_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal z_fu_755_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_fu_755_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_fu_755_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal mul_ln722_fu_764_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln722_fu_764_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal w_fu_773_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal w_fu_773_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal w_fu_773_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal zext_ln718_fu_778_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln723_fu_782_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln15_fu_788_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_fu_798_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_190_fu_803_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln724_fu_811_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal and_ln724_fu_819_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal and_ln724_fu_819_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln724_fu_824_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln724_fu_828_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_839_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_844_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_844_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal w_60_fu_622_p00 : STD_LOGIC_VECTOR (61 downto 0);
    signal w_fu_773_p00 : STD_LOGIC_VECTOR (61 downto 0);
    signal z_100_fu_604_p10 : STD_LOGIC_VECTOR (62 downto 0);
    signal z_fu_755_p10 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component keygen_mul_32ns_32ns_63_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (62 downto 0) );
    end component;


    component keygen_mul_31s_31s_31_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (30 downto 0);
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component keygen_mul_31ns_31ns_62_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (30 downto 0);
        dout : OUT STD_LOGIC_VECTOR (61 downto 0) );
    end component;


    component keygen_mul_mul_13s_9ns_13_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;



begin
    mul_32ns_32ns_63_1_1_U197 : component keygen_mul_32ns_32ns_63_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 63)
    port map (
        din0 => z_100_fu_604_p0,
        din1 => z_100_fu_604_p1,
        dout => z_100_fu_604_p2);

    mul_31s_31s_31_1_1_U198 : component keygen_mul_31s_31s_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        din0 => mul_ln722_4_fu_613_p0,
        din1 => p0i,
        dout => mul_ln722_4_fu_613_p2);

    mul_31ns_31ns_62_1_1_U199 : component keygen_mul_31ns_31ns_62_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 31,
        dout_WIDTH => 62)
    port map (
        din0 => w_60_fu_622_p0,
        din1 => w_60_fu_622_p1,
        dout => w_60_fu_622_p2);

    mul_32ns_32ns_63_1_1_U200 : component keygen_mul_32ns_32ns_63_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 63)
    port map (
        din0 => z_fu_755_p0,
        din1 => z_fu_755_p1,
        dout => z_fu_755_p2);

    mul_31s_31s_31_1_1_U201 : component keygen_mul_31s_31s_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        din0 => mul_ln722_fu_764_p0,
        din1 => p0i,
        dout => mul_ln722_fu_764_p2);

    mul_31ns_31ns_62_1_1_U202 : component keygen_mul_31ns_31ns_62_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 31,
        dout_WIDTH => 62)
    port map (
        din0 => w_fu_773_p0,
        din1 => w_fu_773_p1,
        dout => w_fu_773_p2);

    mul_mul_13s_9ns_13_4_1_U203 : component keygen_mul_mul_13s_9ns_13_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 13,
        din1_WIDTH => 9,
        dout_WIDTH => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => trunc_ln1345_fu_390_p1,
        din1 => grp_fu_839_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_839_p2);

    mul_mul_13s_9ns_13_4_1_U204 : component keygen_mul_mul_13s_9ns_13_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 13,
        din1_WIDTH => 9,
        dout_WIDTH => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_844_p0,
        din1 => grp_fu_844_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_844_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    idx18_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                idx18_reg_213 <= add_ln1354_2_reg_1033;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                idx18_reg_213 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    idx_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1339_fu_286_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                idx_fu_94 <= ap_const_lv64_0;
            elsif (((icmp_ln1334_reg_899 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln1373_fu_690_p2 = ap_const_lv1_0))) then 
                idx_fu_94 <= add_ln1373_2_fu_736_p2;
            end if; 
        end if;
    end process;

    k_02_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1339_fu_286_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                k_02_fu_98 <= ap_const_lv64_0;
            elsif (((icmp_ln1334_reg_899 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln1373_fu_690_p2 = ap_const_lv1_0))) then 
                k_02_fu_98 <= k_16_fu_695_p2;
            end if; 
        end if;
    end process;

    m_6_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1334_fu_243_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                m_6_fu_90 <= n_fu_253_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln1345_fu_347_p2 = ap_const_lv1_1))) then 
                m_6_fu_90 <= zext_ln1343_reg_936;
            end if; 
        end if;
    end process;

    t_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1334_fu_243_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                t_fu_86 <= ap_const_lv64_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln1345_fu_347_p2 = ap_const_lv1_1))) then 
                t_fu_86 <= dt_reg_941;
            end if; 
        end if;
    end process;

    u_09_reg_191_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln1354_fu_420_p2 = ap_const_lv1_1))) then 
                u_09_reg_191 <= u_reg_974;
            elsif (((icmp_ln1339_fu_286_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                u_09_reg_191 <= ap_const_lv63_0;
            end if; 
        end if;
    end process;

    v1_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln1354_fu_420_p2 = ap_const_lv1_1))) then 
                v1_reg_179 <= v1_2_fu_507_p2;
            elsif (((icmp_ln1339_fu_286_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                v1_reg_179 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    v_05_reg_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                v_05_reg_202 <= v_reg_1017;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                v_05_reg_202 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln1354_fu_420_p2 = ap_const_lv1_0))) then
                add_ln1354_2_reg_1033 <= add_ln1354_2_fu_502_p2;
                vla18_addr_316_reg_1022 <= zext_ln1358_fu_482_p1(13 - 1 downto 0);
                vla18_addr_317_reg_1028 <= zext_ln1359_fu_497_p1(13 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                d_9_reg_1043 <= d_9_fu_681_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1339_fu_286_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    dt_reg_941(63 downto 1) <= dt_fu_306_p2(63 downto 1);
                hm_reg_931 <= m_6_fu_90(63 downto 1);
                trunc_ln_reg_947 <= m_6_fu_90(13 downto 1);
                    zext_ln1343_reg_936(62 downto 0) <= zext_ln1343_fu_302_p1(62 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                icmp_ln1334_reg_899 <= icmp_ln1334_fu_243_p2;
                    p_cast2_cast_cast_cast_reg_880(30 downto 0) <= p_cast2_cast_cast_cast_fu_231_p1(30 downto 0);
                    stride_cast1_reg_887(8 downto 0) <= stride_cast1_fu_235_p1(8 downto 0);
                    stride_cast_reg_893(8 downto 0) <= stride_cast_fu_239_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln1345_fu_347_p2 = ap_const_lv1_0))) then
                lshr_ln_reg_979 <= add_ln1351_3_fu_375_p2(14 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                mul_ln1352_reg_999 <= grp_fu_839_p2;
                mul_ln1353_reg_1004 <= grp_fu_844_p2;
                    zext_ln1354_reg_1009(31 downto 0) <= zext_ln1354_fu_416_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1334_fu_243_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                n_reg_917 <= n_fu_253_p2;
                    zext_ln1339_reg_922(30 downto 0) <= zext_ln1339_fu_259_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                u_reg_974 <= u_fu_352_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                v_reg_1017 <= v_fu_426_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1334_reg_899 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln1373_fu_690_p2 = ap_const_lv1_0))) then
                vla18_addr_315_reg_1051 <= zext_ln1374_fu_731_p1(13 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1339_fu_286_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln1373_reg_966(31 downto 0) <= zext_ln1373_fu_333_p1(31 downto 0);
            end if;
        end if;
    end process;
    p_cast2_cast_cast_cast_reg_880(31) <= '0';
    stride_cast1_reg_887(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    stride_cast_reg_893(12 downto 9) <= "0000";
    zext_ln1339_reg_922(61 downto 31) <= "0000000000000000000000000000000";
    zext_ln1343_reg_936(63) <= '0';
    dt_reg_941(0) <= '0';
    zext_ln1373_reg_966(62 downto 32) <= "0000000000000000000000000000000";
    zext_ln1354_reg_1009(62 downto 32) <= "0000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln1334_fu_243_p2, icmp_ln1334_reg_899, ap_CS_fsm_state2, icmp_ln1339_fu_286_p2, ap_CS_fsm_state3, icmp_ln1345_fu_347_p2, ap_CS_fsm_state7, icmp_ln1354_fu_420_p2, ap_CS_fsm_state10, icmp_ln1373_fu_690_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((icmp_ln1334_fu_243_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((icmp_ln1334_fu_243_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln1339_fu_286_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln1345_fu_347_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln1354_fu_420_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and ((icmp_ln1334_reg_899 = ap_const_lv1_1) or (icmp_ln1373_fu_690_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    add_ln1348_7_fu_454_p2 <= std_logic_vector(unsigned(trunc_ln1354_fu_432_p1) + unsigned(mul_ln1353_reg_1004));
    add_ln1348_fu_436_p2 <= std_logic_vector(unsigned(trunc_ln1354_fu_432_p1) + unsigned(mul_ln1352_reg_999));
    add_ln1351_3_fu_375_p2 <= std_logic_vector(unsigned(shl_ln_fu_367_p3) + unsigned(igm));
    add_ln1351_fu_362_p2 <= std_logic_vector(unsigned(trunc_ln1351_fu_358_p1) + unsigned(trunc_ln_reg_947));
    add_ln1354_2_fu_502_p2 <= std_logic_vector(unsigned(idx18_reg_213) + unsigned(stride_cast1_reg_887));
    add_ln1373_2_fu_736_p2 <= std_logic_vector(unsigned(idx_fu_94) + unsigned(stride_cast1_reg_887));
    add_ln685_fu_517_p2 <= std_logic_vector(unsigned(vla18_q0) + unsigned(sub_ln685_fu_512_p2));
    add_ln697_fu_594_p2 <= std_logic_vector(unsigned(zext_ln697_fu_590_p1) + unsigned(sub_ln697_fu_559_p2));
    add_ln723_1_fu_631_p2 <= std_logic_vector(unsigned(zext_ln718_1_fu_627_p1) + unsigned(z_100_fu_604_p2));
    add_ln723_fu_782_p2 <= std_logic_vector(unsigned(zext_ln718_fu_778_p1) + unsigned(z_fu_755_p2));
    and_ln685_fu_539_p1 <= p;
    and_ln685_fu_539_p2 <= (select_ln685_fu_531_p3 and and_ln685_fu_539_p1);
    and_ln697_fu_581_p1 <= p;
    and_ln697_fu_581_p2 <= (select_ln697_fu_573_p3 and and_ln697_fu_581_p1);
    and_ln724_1_fu_668_p1 <= p;
    and_ln724_1_fu_668_p2 <= (select_ln724_1_fu_660_p3 and and_ln724_1_fu_668_p1);
    and_ln724_fu_819_p1 <= p;
    and_ln724_fu_819_p2 <= (select_ln724_fu_811_p3 and and_ln724_fu_819_p1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln1334_reg_899, ap_CS_fsm_state10, icmp_ln1373_fu_690_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)) or ((ap_const_logic_1 = ap_CS_fsm_state10) and ((icmp_ln1334_reg_899 = ap_const_lv1_1) or (icmp_ln1373_fu_690_p2 = ap_const_lv1_1))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln1334_reg_899, ap_CS_fsm_state10, icmp_ln1373_fu_690_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and ((icmp_ln1334_reg_899 = ap_const_lv1_1) or (icmp_ln1373_fu_690_p2 = ap_const_lv1_1)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    d_7_fu_832_p2 <= std_logic_vector(unsigned(zext_ln724_fu_828_p1) + unsigned(d_fu_798_p2));
    d_8_fu_647_p2 <= std_logic_vector(unsigned(trunc_ln723_1_fu_637_p4) - unsigned(p_cast2_cast_cast_cast_reg_880));
    d_9_fu_681_p2 <= std_logic_vector(unsigned(zext_ln724_1_fu_677_p1) + unsigned(d_8_fu_647_p2));
    d_fu_798_p2 <= std_logic_vector(unsigned(trunc_ln15_fu_788_p4) - unsigned(p_cast2_cast_cast_cast_reg_880));
    dt_fu_306_p2 <= std_logic_vector(shift_left(unsigned(t_fu_86),to_integer(unsigned('0' & ap_const_lv64_1(31-1 downto 0)))));
    grp_fu_839_p1 <= stride_cast_reg_893(9 - 1 downto 0);
    grp_fu_844_p0 <= std_logic_vector(signed(trunc_ln1345_fu_390_p1) + signed(trunc_ln1329_2_fu_394_p1));
    grp_fu_844_p1 <= stride_cast_reg_893(9 - 1 downto 0);
    hm_fu_292_p4 <= m_6_fu_90(63 downto 1);
    icmp_ln1334_fu_243_p2 <= "1" when (logn = ap_const_lv32_0) else "0";
    icmp_ln1339_fu_286_p2 <= "1" when (tmp_fu_276_p4 = ap_const_lv63_0) else "0";
    icmp_ln1345_fu_347_p2 <= "1" when (u_09_reg_191 = hm_reg_931) else "0";
    icmp_ln1354_fu_420_p2 <= "1" when (v_05_reg_202 = t_fu_86) else "0";
    icmp_ln1373_fu_690_p2 <= "1" when (k_02_fu_98 = n_reg_917) else "0";
    k_16_fu_695_p2 <= std_logic_vector(unsigned(k_02_fu_98) + unsigned(ap_const_lv64_1));
    lshr_ln63_fu_721_p4 <= r_fu_716_p2(14 downto 2);
    lshr_ln64_fu_472_p4 <= r1_fu_449_p2(14 downto 2);
    lshr_ln65_fu_487_p4 <= r2_fu_467_p2(14 downto 2);
    mul_ln722_4_fu_613_p0 <= z_100_fu_604_p2(31 - 1 downto 0);
    mul_ln722_fu_764_p0 <= z_fu_755_p2(31 - 1 downto 0);
    n_fu_253_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_1),to_integer(unsigned('0' & zext_ln1337_fu_249_p1(31-1 downto 0)))));
    ni_fu_327_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_1),to_integer(unsigned('0' & sub_ln1372_fu_322_p2(31-1 downto 0)))));
    p_cast2_cast_cast_cast_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_cast2_cast_cast_fu_227_p1),32));
    p_cast2_cast_cast_fu_227_p0 <= p;
        p_cast2_cast_cast_fu_227_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast2_cast_cast_fu_227_p0),31));

    r1_fu_449_p2 <= std_logic_vector(unsigned(shl_ln67_fu_441_p3) + unsigned(a));
    r2_fu_467_p2 <= std_logic_vector(unsigned(shl_ln1348_2_fu_459_p3) + unsigned(a));
    r_fu_716_p2 <= std_logic_vector(unsigned(shl_ln66_fu_708_p3) + unsigned(a));
    select_ln685_fu_531_p3 <= 
        ap_const_lv25_1FFFFFF when (tmp_191_fu_523_p3(0) = '1') else 
        ap_const_lv25_0;
    select_ln697_fu_573_p3 <= 
        ap_const_lv25_1FFFFFF when (tmp_192_fu_565_p3(0) = '1') else 
        ap_const_lv25_0;
    select_ln724_1_fu_660_p3 <= 
        ap_const_lv25_1FFFFFF when (tmp_193_fu_652_p3(0) = '1') else 
        ap_const_lv25_0;
    select_ln724_fu_811_p3 <= 
        ap_const_lv25_1FFFFFF when (tmp_190_fu_803_p3(0) = '1') else 
        ap_const_lv25_0;
        sext_ln685_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(and_ln685_fu_539_p2),31));

        sext_ln697_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(and_ln697_fu_581_p2),31));

        sext_ln724_1_fu_673_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(and_ln724_1_fu_668_p2),31));

        sext_ln724_fu_824_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(and_ln724_fu_819_p2),31));

    shl_ln1348_2_fu_459_p3 <= (add_ln1348_7_fu_454_p2 & ap_const_lv2_0);
    shl_ln66_fu_708_p3 <= (trunc_ln1329_fu_704_p1 & ap_const_lv2_0);
    shl_ln67_fu_441_p3 <= (add_ln1348_fu_436_p2 & ap_const_lv2_0);
    shl_ln_fu_367_p3 <= (add_ln1351_fu_362_p2 & ap_const_lv2_0);
    stride_cast1_fu_235_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(stride),64));
    stride_cast_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(stride),13));
    sub_ln1372_fu_322_p2 <= std_logic_vector(unsigned(ap_const_lv32_1F) - unsigned(logn));
    sub_ln685_fu_512_p2 <= std_logic_vector(unsigned(vla18_q1) - unsigned(p_cast2_cast_cast_cast_reg_880));
    sub_ln697_fu_559_p2 <= std_logic_vector(unsigned(vla18_q1) - unsigned(vla18_q0));
    tmp_190_fu_803_p3 <= d_fu_798_p2(31 downto 31);
    tmp_191_fu_523_p3 <= add_ln685_fu_517_p2(31 downto 31);
    tmp_192_fu_565_p3 <= sub_ln697_fu_559_p2(31 downto 31);
    tmp_193_fu_652_p3 <= d_8_fu_647_p2(31 downto 31);
    tmp_fu_276_p4 <= m_6_fu_90(63 downto 1);
    trunc_ln1329_2_fu_394_p1 <= t_fu_86(13 - 1 downto 0);
    trunc_ln1329_fu_704_p1 <= idx_fu_94(13 - 1 downto 0);
    trunc_ln1345_fu_390_p1 <= v1_reg_179(13 - 1 downto 0);
    trunc_ln1351_fu_358_p1 <= u_09_reg_191(13 - 1 downto 0);
    trunc_ln1354_fu_432_p1 <= idx18_reg_213(13 - 1 downto 0);
    trunc_ln15_fu_788_p4 <= add_ln723_fu_782_p2(62 downto 31);
    trunc_ln723_1_fu_637_p4 <= add_ln723_1_fu_631_p2(62 downto 31);
    u_fu_352_p2 <= std_logic_vector(unsigned(u_09_reg_191) + unsigned(ap_const_lv63_1));
    v1_2_fu_507_p2 <= std_logic_vector(unsigned(dt_reg_941) + unsigned(v1_reg_179));
    v_fu_426_p2 <= std_logic_vector(unsigned(v_05_reg_202) + unsigned(ap_const_lv64_1));

    vla18_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, vla18_addr_317_reg_1028, vla18_addr_315_reg_1051, ap_CS_fsm_state9, zext_ln1351_fu_412_p1, zext_ln1359_fu_497_p1, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            vla18_address0 <= vla18_addr_315_reg_1051;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            vla18_address0 <= vla18_addr_317_reg_1028;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            vla18_address0 <= zext_ln1359_fu_497_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            vla18_address0 <= zext_ln1351_fu_412_p1(13 - 1 downto 0);
        else 
            vla18_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    vla18_address1_assign_proc : process(ap_CS_fsm_state7, vla18_addr_316_reg_1022, ap_CS_fsm_state8, ap_CS_fsm_state10, zext_ln1358_fu_482_p1, zext_ln1374_fu_731_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            vla18_address1 <= zext_ln1374_fu_731_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            vla18_address1 <= vla18_addr_316_reg_1022;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            vla18_address1 <= zext_ln1358_fu_482_p1(13 - 1 downto 0);
        else 
            vla18_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    vla18_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            vla18_ce0 <= ap_const_logic_1;
        else 
            vla18_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    vla18_ce1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            vla18_ce1 <= ap_const_logic_1;
        else 
            vla18_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    vla18_d0_assign_proc : process(d_9_reg_1043, ap_CS_fsm_state9, ap_CS_fsm_state11, d_7_fu_832_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            vla18_d0 <= d_7_fu_832_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            vla18_d0 <= d_9_reg_1043;
        else 
            vla18_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    vla18_d1 <= std_logic_vector(unsigned(zext_ln685_fu_548_p1) + unsigned(add_ln685_fu_517_p2));

    vla18_we0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            vla18_we0 <= ap_const_lv4_F;
        else 
            vla18_we0 <= ap_const_lv4_0;
        end if; 
    end process;


    vla18_we1_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            vla18_we1 <= ap_const_lv4_F;
        else 
            vla18_we1 <= ap_const_lv4_0;
        end if; 
    end process;

    w_60_fu_622_p0 <= w_60_fu_622_p00(31 - 1 downto 0);
    w_60_fu_622_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln722_4_fu_613_p2),62));
    w_60_fu_622_p1 <= zext_ln1339_reg_922(31 - 1 downto 0);
    w_fu_773_p0 <= w_fu_773_p00(31 - 1 downto 0);
    w_fu_773_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln722_fu_764_p2),62));
    w_fu_773_p1 <= zext_ln1339_reg_922(31 - 1 downto 0);
    z_100_fu_604_p0 <= zext_ln1354_reg_1009(32 - 1 downto 0);
    z_100_fu_604_p1 <= z_100_fu_604_p10(32 - 1 downto 0);
    z_100_fu_604_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln697_fu_594_p2),63));
    z_fu_755_p0 <= zext_ln1373_reg_966(32 - 1 downto 0);
    z_fu_755_p1 <= z_fu_755_p10(32 - 1 downto 0);
    z_fu_755_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(vla18_q1),63));
    zext_ln1337_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(logn),64));
    zext_ln1339_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_cast2_cast_cast_fu_227_p1),62));
    zext_ln1343_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(hm_fu_292_p4),64));
    zext_ln1351_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_reg_979),64));
    zext_ln1354_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(vla18_q0),63));
    zext_ln1358_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln64_fu_472_p4),64));
    zext_ln1359_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln65_fu_487_p4),64));
    zext_ln1373_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ni_fu_327_p2),63));
    zext_ln1374_fu_731_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln63_fu_721_p4),64));
    zext_ln685_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln685_fu_544_p1),32));
    zext_ln697_fu_590_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln697_fu_586_p1),32));
    zext_ln718_1_fu_627_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_60_fu_622_p2),63));
    zext_ln718_fu_778_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_fu_773_p2),63));
    zext_ln724_1_fu_677_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln724_1_fu_673_p1),32));
    zext_ln724_fu_828_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln724_fu_824_p1),32));
end behav;
