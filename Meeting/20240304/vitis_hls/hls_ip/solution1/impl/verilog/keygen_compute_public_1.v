// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module keygen_compute_public_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        h_address0,
        h_ce0,
        h_we0,
        h_d0,
        h_q0,
        h_address1,
        h_ce1,
        h_we1,
        h_d1,
        h_q1,
        f_address0,
        f_ce0,
        f_q0,
        g_address0,
        g_ce0,
        g_q0,
        tmp2108_address0,
        tmp2108_ce0,
        tmp2108_we0,
        tmp2108_d0,
        tmp2108_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 116'd1;
parameter    ap_ST_fsm_state2 = 116'd2;
parameter    ap_ST_fsm_state3 = 116'd4;
parameter    ap_ST_fsm_state4 = 116'd8;
parameter    ap_ST_fsm_state5 = 116'd16;
parameter    ap_ST_fsm_state6 = 116'd32;
parameter    ap_ST_fsm_state7 = 116'd64;
parameter    ap_ST_fsm_state8 = 116'd128;
parameter    ap_ST_fsm_state9 = 116'd256;
parameter    ap_ST_fsm_state10 = 116'd512;
parameter    ap_ST_fsm_state11 = 116'd1024;
parameter    ap_ST_fsm_state12 = 116'd2048;
parameter    ap_ST_fsm_state13 = 116'd4096;
parameter    ap_ST_fsm_state14 = 116'd8192;
parameter    ap_ST_fsm_state15 = 116'd16384;
parameter    ap_ST_fsm_state16 = 116'd32768;
parameter    ap_ST_fsm_state17 = 116'd65536;
parameter    ap_ST_fsm_state18 = 116'd131072;
parameter    ap_ST_fsm_state19 = 116'd262144;
parameter    ap_ST_fsm_state20 = 116'd524288;
parameter    ap_ST_fsm_state21 = 116'd1048576;
parameter    ap_ST_fsm_state22 = 116'd2097152;
parameter    ap_ST_fsm_state23 = 116'd4194304;
parameter    ap_ST_fsm_state24 = 116'd8388608;
parameter    ap_ST_fsm_state25 = 116'd16777216;
parameter    ap_ST_fsm_state26 = 116'd33554432;
parameter    ap_ST_fsm_state27 = 116'd67108864;
parameter    ap_ST_fsm_state28 = 116'd134217728;
parameter    ap_ST_fsm_state29 = 116'd268435456;
parameter    ap_ST_fsm_state30 = 116'd536870912;
parameter    ap_ST_fsm_state31 = 116'd1073741824;
parameter    ap_ST_fsm_state32 = 116'd2147483648;
parameter    ap_ST_fsm_state33 = 116'd4294967296;
parameter    ap_ST_fsm_state34 = 116'd8589934592;
parameter    ap_ST_fsm_state35 = 116'd17179869184;
parameter    ap_ST_fsm_state36 = 116'd34359738368;
parameter    ap_ST_fsm_state37 = 116'd68719476736;
parameter    ap_ST_fsm_state38 = 116'd137438953472;
parameter    ap_ST_fsm_state39 = 116'd274877906944;
parameter    ap_ST_fsm_state40 = 116'd549755813888;
parameter    ap_ST_fsm_state41 = 116'd1099511627776;
parameter    ap_ST_fsm_state42 = 116'd2199023255552;
parameter    ap_ST_fsm_state43 = 116'd4398046511104;
parameter    ap_ST_fsm_state44 = 116'd8796093022208;
parameter    ap_ST_fsm_state45 = 116'd17592186044416;
parameter    ap_ST_fsm_state46 = 116'd35184372088832;
parameter    ap_ST_fsm_state47 = 116'd70368744177664;
parameter    ap_ST_fsm_state48 = 116'd140737488355328;
parameter    ap_ST_fsm_state49 = 116'd281474976710656;
parameter    ap_ST_fsm_state50 = 116'd562949953421312;
parameter    ap_ST_fsm_state51 = 116'd1125899906842624;
parameter    ap_ST_fsm_state52 = 116'd2251799813685248;
parameter    ap_ST_fsm_state53 = 116'd4503599627370496;
parameter    ap_ST_fsm_state54 = 116'd9007199254740992;
parameter    ap_ST_fsm_state55 = 116'd18014398509481984;
parameter    ap_ST_fsm_state56 = 116'd36028797018963968;
parameter    ap_ST_fsm_state57 = 116'd72057594037927936;
parameter    ap_ST_fsm_state58 = 116'd144115188075855872;
parameter    ap_ST_fsm_state59 = 116'd288230376151711744;
parameter    ap_ST_fsm_state60 = 116'd576460752303423488;
parameter    ap_ST_fsm_state61 = 116'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 116'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 116'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 116'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 116'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 116'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 116'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 116'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 116'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 116'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 116'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 116'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 116'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 116'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 116'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 116'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 116'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 116'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 116'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 116'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 116'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 116'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 116'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 116'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 116'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 116'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 116'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 116'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 116'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 116'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 116'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 116'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 116'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 116'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 116'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 116'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 116'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 116'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 116'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 116'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 116'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 116'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 116'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 116'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 116'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 116'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 116'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 116'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 116'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 116'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 116'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 116'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 116'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 116'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 116'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 116'd41538374868278621028243970633760768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] h_address0;
output   h_ce0;
output   h_we0;
output  [15:0] h_d0;
input  [15:0] h_q0;
output  [9:0] h_address1;
output   h_ce1;
output   h_we1;
output  [15:0] h_d1;
input  [15:0] h_q1;
output  [9:0] f_address0;
output   f_ce0;
input  [7:0] f_q0;
output  [9:0] g_address0;
output   g_ce0;
input  [7:0] g_q0;
output  [10:0] tmp2108_address0;
output   tmp2108_ce0;
output  [1:0] tmp2108_we0;
output  [15:0] tmp2108_d0;
input  [15:0] tmp2108_q0;
output  [0:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] h_address0;
reg h_ce0;
reg h_we0;
reg[15:0] h_d0;
reg[9:0] h_address1;
reg h_ce1;
reg h_we1;
reg[15:0] h_d1;
reg f_ce0;
reg g_ce0;
reg[10:0] tmp2108_address0;
reg tmp2108_ce0;
reg[1:0] tmp2108_we0;
reg[15:0] tmp2108_d0;
reg[0:0] ap_return;

(* fsm_encoding = "none" *) reg   [115:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [9:0] iGMb_address0;
reg    iGMb_ce0;
wire   [13:0] iGMb_q0;
wire  signed [16:0] grp_mq_montysqr_fu_336_ap_return;
reg   [16:0] reg_342;
wire    ap_CS_fsm_state33;
wire    grp_mq_montysqr_fu_336_ap_done;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state56;
wire    ap_CS_fsm_state67;
wire   [63:0] zext_ln824_fu_355_p1;
reg   [63:0] zext_ln824_reg_1537;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln824_fu_361_p2;
wire   [63:0] zext_ln830_fu_448_p1;
reg   [63:0] zext_ln830_reg_1563;
wire    ap_CS_fsm_state5;
wire   [10:0] u_236_fu_459_p2;
reg   [10:0] u_236_reg_1571;
wire   [0:0] icmp_ln830_fu_453_p2;
wire    ap_CS_fsm_state6;
wire   [29:0] zext_ln831_fu_475_p1;
reg   [29:0] zext_ln831_reg_1600;
reg   [9:0] h_addr_1_reg_1608;
wire   [0:0] icmp_ln831_fu_479_p2;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state12;
wire  signed [15:0] z_177_fu_530_p2;
reg  signed [15:0] z_177_reg_1623;
wire    ap_CS_fsm_state13;
wire  signed [16:0] sext_ln396_4_fu_536_p1;
reg  signed [16:0] sext_ln396_4_reg_1628;
wire  signed [31:0] sext_ln396_3_fu_541_p1;
reg  signed [31:0] sext_ln396_3_reg_1633;
wire    ap_CS_fsm_state14;
wire  signed [31:0] sext_ln471_fu_544_p1;
reg  signed [31:0] sext_ln471_reg_1639;
wire  signed [31:0] grp_fu_1325_p2;
reg  signed [31:0] z_140_reg_1645;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state20;
wire  signed [31:0] sext_ln396_5_fu_595_p1;
reg  signed [31:0] sext_ln396_5_reg_1660;
wire    ap_CS_fsm_state23;
wire  signed [31:0] grp_fu_1347_p2;
reg  signed [31:0] z_154_reg_1666;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state29;
wire   [16:0] z_179_fu_640_p2;
reg   [16:0] z_179_reg_1681;
wire    ap_CS_fsm_state32;
wire  signed [31:0] sext_ln471_1_fu_647_p1;
reg  signed [31:0] sext_ln471_1_reg_1686;
wire    ap_CS_fsm_state37;
wire  signed [31:0] grp_fu_1368_p2;
reg  signed [31:0] z_157_reg_1692;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state43;
wire  signed [31:0] sext_ln396_6_fu_698_p1;
reg  signed [31:0] sext_ln396_6_reg_1707;
wire    ap_CS_fsm_state46;
wire  signed [31:0] grp_fu_1389_p2;
reg  signed [31:0] z_160_reg_1713;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state52;
wire  signed [16:0] z_181_fu_743_p2;
reg  signed [16:0] z_181_reg_1728;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state57;
wire  signed [31:0] grp_fu_1410_p2;
reg  signed [31:0] z_163_reg_1739;
wire    ap_CS_fsm_state60;
wire    ap_CS_fsm_state63;
wire   [16:0] z_182_fu_795_p2;
reg   [16:0] z_182_reg_1754;
wire    ap_CS_fsm_state66;
wire    ap_CS_fsm_state68;
wire  signed [31:0] grp_fu_1431_p2;
reg  signed [31:0] z_166_reg_1769;
wire    ap_CS_fsm_state71;
wire    ap_CS_fsm_state74;
wire   [16:0] z_183_fu_850_p2;
reg   [16:0] z_183_reg_1784;
wire    ap_CS_fsm_state77;
wire    ap_CS_fsm_state78;
wire  signed [31:0] grp_fu_1453_p2;
reg  signed [31:0] z_169_reg_1794;
wire    ap_CS_fsm_state81;
wire    ap_CS_fsm_state84;
wire    ap_CS_fsm_state87;
wire  signed [31:0] grp_fu_1474_p2;
reg  signed [31:0] z_172_reg_1819;
wire    ap_CS_fsm_state90;
wire    ap_CS_fsm_state93;
reg   [63:0] t_9_reg_1834;
wire    ap_CS_fsm_state97;
wire   [9:0] hm_fu_986_p4;
reg   [9:0] hm_reg_1842;
wire   [0:0] icmp_ln547_fu_980_p2;
wire   [10:0] zext_ln550_fu_996_p1;
reg   [10:0] zext_ln550_reg_1848;
wire   [63:0] dt_fu_1000_p2;
reg   [63:0] dt_reg_1853;
wire   [9:0] i_18_fu_1016_p2;
reg   [9:0] i_18_reg_1870;
wire    ap_CS_fsm_state98;
wire   [0:0] icmp_ln552_fu_1011_p2;
wire   [31:0] zext_ln557_1_fu_1040_p1;
reg   [31:0] zext_ln557_1_reg_1880;
wire    ap_CS_fsm_state99;
reg   [9:0] h_addr_3_reg_1888;
wire    ap_CS_fsm_state100;
wire   [0:0] icmp_ln558_fu_1044_p2;
reg   [9:0] h_addr_4_reg_1893;
wire   [63:0] j_12_fu_1068_p2;
reg   [63:0] j_12_reg_1899;
wire   [63:0] j1_fu_1074_p2;
wire   [63:0] add_ln552_fu_1079_p2;
wire  signed [31:0] grp_fu_1496_p3;
reg  signed [31:0] z_175_reg_1914;
wire    ap_CS_fsm_state104;
wire    ap_CS_fsm_state107;
reg   [9:0] h_addr_2_reg_1932;
wire    ap_CS_fsm_state111;
wire   [0:0] icmp_ln586_fu_1223_p2;
reg   [15:0] h_load_1_reg_1938;
wire    ap_CS_fsm_state112;
wire    ap_CS_fsm_state114;
wire    grp_mq_NTT_fu_320_ap_start;
wire    grp_mq_NTT_fu_320_ap_done;
wire    grp_mq_NTT_fu_320_ap_idle;
wire    grp_mq_NTT_fu_320_ap_ready;
wire   [9:0] grp_mq_NTT_fu_320_a_address0;
wire    grp_mq_NTT_fu_320_a_ce0;
wire    grp_mq_NTT_fu_320_a_we0;
wire   [15:0] grp_mq_NTT_fu_320_a_d0;
wire    grp_mq_NTT_1_fu_328_ap_start;
wire    grp_mq_NTT_1_fu_328_ap_done;
wire    grp_mq_NTT_1_fu_328_ap_idle;
wire    grp_mq_NTT_1_fu_328_ap_ready;
wire   [10:0] grp_mq_NTT_1_fu_328_tmp2108_address0;
wire    grp_mq_NTT_1_fu_328_tmp2108_ce0;
wire   [1:0] grp_mq_NTT_1_fu_328_tmp2108_we0;
wire   [15:0] grp_mq_NTT_1_fu_328_tmp2108_d0;
wire    grp_mq_montysqr_fu_336_ap_start;
wire    grp_mq_montysqr_fu_336_ap_idle;
wire    grp_mq_montysqr_fu_336_ap_ready;
reg   [16:0] grp_mq_montysqr_fu_336_x;
reg   [63:0] indvars_iv_reg_263;
reg   [63:0] j1_10_reg_273;
reg   [9:0] i_reg_285;
reg   [63:0] j_9_reg_296;
wire    ap_CS_fsm_state110;
reg   [0:0] retval_0_reg_307;
reg    grp_mq_NTT_fu_320_ap_start_reg;
wire    ap_CS_fsm_state4;
reg    grp_mq_NTT_1_fu_328_ap_start_reg;
reg    grp_mq_montysqr_fu_336_ap_start_reg;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln557_fu_1027_p1;
wire   [63:0] zext_ln562_fu_1063_p1;
wire   [63:0] zext_ln586_fu_1218_p1;
reg   [10:0] u_02_fu_136;
wire   [10:0] u_234_fu_367_p2;
reg   [10:0] u_11_fu_140;
reg   [10:0] m_fu_144;
reg   [63:0] t_fu_148;
reg   [10:0] m_11_fu_152;
wire   [10:0] m_17_fu_1229_p2;
wire  signed [15:0] sext_ln825_fu_409_p1;
wire  signed [15:0] sext_ln826_fu_440_p1;
wire    ap_CS_fsm_state86;
wire    ap_CS_fsm_state96;
wire   [15:0] add_ln834_fu_957_p2;
wire    ap_CS_fsm_state101;
wire   [15:0] add_ln563_fu_1134_p2;
wire   [15:0] add_ln565_fu_1208_p2;
wire    ap_CS_fsm_state115;
wire  signed [15:0] sext_ln587_fu_1298_p1;
wire  signed [7:0] tmp_fu_383_p1;
wire  signed [7:0] sext_ln337_fu_391_p0;
wire   [0:0] tmp_fu_383_p3;
wire   [14:0] select_ln825_fu_395_p3;
wire  signed [14:0] sext_ln337_fu_391_p1;
wire   [14:0] add_ln825_fu_403_p2;
wire  signed [7:0] tmp_228_fu_414_p1;
wire  signed [7:0] sext_ln337_1_fu_422_p0;
wire   [0:0] tmp_228_fu_414_p3;
wire   [14:0] select_ln826_fu_426_p3;
wire  signed [14:0] sext_ln337_1_fu_422_p1;
wire   [14:0] add_ln826_fu_434_p2;
wire  signed [15:0] zext_ln831_fu_475_p0;
wire  signed [15:0] icmp_ln831_fu_479_p0;
wire  signed [15:0] zext_ln406_fu_489_p0;
wire   [15:0] grp_fu_1303_p2;
wire   [29:0] grp_fu_1310_p2;
wire   [30:0] grp_fu_1317_p3;
wire   [14:0] trunc_ln_fu_495_p4;
wire  signed [14:0] z_134_fu_504_p2;
wire   [0:0] tmp_230_fu_514_p3;
wire   [15:0] select_ln422_fu_522_p3;
wire  signed [15:0] sext_ln396_fu_510_p1;
wire  signed [15:0] zext_ln406_1_fu_551_p0;
wire   [15:0] grp_fu_1332_p2;
wire  signed [31:0] trunc_ln396_1_fu_554_p1;
wire   [31:0] grp_fu_1339_p3;
wire   [15:0] trunc_ln396_1_fu_554_p4;
wire   [16:0] zext_ln396_6_fu_563_p1;
wire   [16:0] z_146_fu_567_p2;
wire   [0:0] tmp_231_fu_573_p3;
wire   [16:0] select_ln422_1_fu_581_p3;
wire  signed [16:0] z_178_fu_589_p2;
wire  signed [15:0] zext_ln406_2_fu_602_p0;
wire   [15:0] grp_fu_1353_p2;
wire  signed [31:0] trunc_ln396_2_fu_605_p1;
wire   [31:0] grp_fu_1360_p3;
wire   [15:0] trunc_ln396_2_fu_605_p4;
wire   [16:0] zext_ln396_8_fu_614_p1;
wire   [16:0] z_155_fu_618_p2;
wire   [0:0] tmp_232_fu_624_p3;
wire   [16:0] select_ln422_2_fu_632_p3;
wire  signed [15:0] zext_ln406_3_fu_654_p0;
wire   [15:0] grp_fu_1374_p2;
wire  signed [31:0] trunc_ln396_3_fu_657_p1;
wire   [31:0] grp_fu_1381_p3;
wire   [15:0] trunc_ln396_3_fu_657_p4;
wire   [16:0] zext_ln396_10_fu_666_p1;
wire   [16:0] z_158_fu_670_p2;
wire   [0:0] tmp_233_fu_676_p3;
wire   [16:0] select_ln422_3_fu_684_p3;
wire  signed [16:0] z_180_fu_692_p2;
wire  signed [15:0] zext_ln406_4_fu_705_p0;
wire   [15:0] grp_fu_1395_p2;
wire  signed [31:0] trunc_ln396_4_fu_708_p1;
wire   [31:0] grp_fu_1402_p3;
wire   [15:0] trunc_ln396_4_fu_708_p4;
wire   [16:0] zext_ln396_12_fu_717_p1;
wire   [16:0] z_161_fu_721_p2;
wire   [0:0] tmp_234_fu_727_p3;
wire   [16:0] select_ln422_4_fu_735_p3;
wire  signed [15:0] zext_ln406_5_fu_757_p0;
wire   [15:0] grp_fu_1416_p2;
wire  signed [31:0] trunc_ln396_5_fu_760_p1;
wire   [31:0] grp_fu_1423_p3;
wire   [15:0] trunc_ln396_5_fu_760_p4;
wire   [16:0] zext_ln396_14_fu_769_p1;
wire   [16:0] z_164_fu_773_p2;
wire   [0:0] tmp_235_fu_779_p3;
wire   [16:0] select_ln422_5_fu_787_p3;
wire  signed [15:0] zext_ln406_6_fu_812_p0;
wire   [15:0] grp_fu_1438_p2;
wire  signed [31:0] trunc_ln396_6_fu_815_p1;
wire   [31:0] grp_fu_1445_p3;
wire   [15:0] trunc_ln396_6_fu_815_p4;
wire   [16:0] zext_ln396_16_fu_824_p1;
wire   [16:0] z_167_fu_828_p2;
wire   [0:0] tmp_236_fu_834_p3;
wire   [16:0] select_ln422_6_fu_842_p3;
wire  signed [15:0] zext_ln406_7_fu_864_p0;
wire   [15:0] grp_fu_1459_p2;
wire  signed [31:0] trunc_ln396_7_fu_871_p1;
wire   [31:0] grp_fu_1466_p3;
wire   [15:0] trunc_ln396_7_fu_871_p4;
wire   [16:0] zext_ln396_18_fu_880_p1;
wire   [16:0] z_170_fu_884_p2;
wire   [0:0] tmp_237_fu_890_p3;
wire   [16:0] select_ln422_7_fu_898_p3;
wire  signed [16:0] z_184_fu_906_p2;
wire  signed [15:0] zext_ln406_8_fu_919_p0;
wire   [15:0] grp_fu_1481_p2;
wire  signed [31:0] trunc_ln396_8_fu_922_p1;
wire   [31:0] grp_fu_1488_p3;
wire   [15:0] trunc_ln396_8_fu_922_p4;
wire   [16:0] zext_ln396_20_fu_931_p1;
wire   [16:0] z_173_fu_935_p2;
wire   [0:0] tmp_238_fu_941_p3;
wire   [15:0] select_ln834_fu_949_p3;
wire   [9:0] tmp_229_fu_970_p4;
wire   [9:0] add_ln557_fu_1022_p2;
wire   [9:0] trunc_ln558_fu_1050_p1;
wire   [9:0] trunc_ln541_fu_1054_p1;
wire   [9:0] add_ln562_fu_1057_p2;
wire   [16:0] zext_ln559_2_fu_1092_p1;
wire   [16:0] add_ln356_fu_1096_p2;
wire  signed [17:0] sext_ln356_fu_1102_p1;
wire   [17:0] zext_ln559_1_fu_1088_p1;
wire   [17:0] d_fu_1106_p2;
wire   [0:0] tmp_240_fu_1112_p3;
wire   [15:0] select_ln563_fu_1126_p3;
wire   [15:0] add_ln563_1_fu_1120_p2;
wire   [16:0] zext_ln559_fu_1084_p1;
wire  signed [16:0] d_13_fu_1141_p2;
wire   [0:0] tmp_241_fu_1151_p3;
wire  signed [15:0] zext_ln406_10_fu_1170_p0;
wire   [15:0] grp_fu_1504_p2;
wire  signed [31:0] trunc_ln396_s_fu_1173_p1;
wire   [31:0] grp_fu_1511_p3;
wire   [15:0] trunc_ln396_s_fu_1173_p4;
wire   [16:0] zext_ln396_24_fu_1182_p1;
wire   [16:0] z_176_fu_1186_p2;
wire   [0:0] tmp_242_fu_1192_p3;
wire   [15:0] select_ln565_fu_1200_p3;
wire   [21:0] z_fu_1246_p3;
wire   [29:0] grp_fu_1519_p4;
wire   [13:0] trunc_ln396_9_fu_1257_p4;
wire   [14:0] zext_ln396_22_fu_1266_p1;
wire   [14:0] z_174_fu_1270_p2;
wire   [0:0] tmp_239_fu_1276_p3;
wire   [14:0] select_ln587_fu_1284_p3;
wire   [14:0] add_ln587_fu_1292_p2;
wire   [14:0] grp_fu_1303_p1;
wire   [15:0] grp_fu_1310_p0;
wire   [13:0] grp_fu_1310_p1;
wire   [15:0] grp_fu_1317_p0;
wire   [13:0] grp_fu_1317_p1;
wire   [29:0] grp_fu_1317_p2;
wire    ap_CS_fsm_state10;
wire  signed [15:0] grp_fu_1332_p0;
wire   [13:0] grp_fu_1332_p1;
wire   [15:0] grp_fu_1339_p0;
wire   [13:0] grp_fu_1339_p1;
wire    ap_CS_fsm_state22;
wire  signed [16:0] grp_fu_1347_p0;
wire  signed [15:0] grp_fu_1353_p0;
wire   [13:0] grp_fu_1353_p1;
wire   [15:0] grp_fu_1360_p0;
wire   [13:0] grp_fu_1360_p1;
wire    ap_CS_fsm_state31;
wire  signed [16:0] grp_fu_1368_p0;
wire  signed [15:0] grp_fu_1374_p0;
wire   [13:0] grp_fu_1374_p1;
wire   [15:0] grp_fu_1381_p0;
wire   [13:0] grp_fu_1381_p1;
wire    ap_CS_fsm_state45;
wire  signed [16:0] grp_fu_1389_p0;
wire  signed [15:0] grp_fu_1395_p0;
wire   [13:0] grp_fu_1395_p1;
wire   [15:0] grp_fu_1402_p0;
wire   [13:0] grp_fu_1402_p1;
wire    ap_CS_fsm_state54;
wire  signed [16:0] grp_fu_1410_p0;
wire  signed [15:0] grp_fu_1416_p0;
wire   [13:0] grp_fu_1416_p1;
wire   [15:0] grp_fu_1423_p0;
wire   [13:0] grp_fu_1423_p1;
wire    ap_CS_fsm_state65;
wire  signed [15:0] grp_fu_1438_p0;
wire   [13:0] grp_fu_1438_p1;
wire   [15:0] grp_fu_1445_p0;
wire   [13:0] grp_fu_1445_p1;
wire    ap_CS_fsm_state76;
wire  signed [15:0] grp_fu_1453_p0;
wire  signed [15:0] grp_fu_1459_p0;
wire   [13:0] grp_fu_1459_p1;
wire   [15:0] grp_fu_1466_p0;
wire   [13:0] grp_fu_1466_p1;
wire   [15:0] grp_fu_1474_p1;
wire  signed [15:0] grp_fu_1481_p0;
wire   [13:0] grp_fu_1481_p1;
wire   [15:0] grp_fu_1488_p0;
wire   [13:0] grp_fu_1488_p1;
wire    ap_CS_fsm_state95;
wire  signed [14:0] grp_fu_1496_p0;
wire   [13:0] grp_fu_1496_p2;
wire  signed [15:0] grp_fu_1504_p0;
wire   [13:0] grp_fu_1504_p1;
wire   [15:0] grp_fu_1511_p0;
wire   [13:0] grp_fu_1511_p1;
wire    ap_CS_fsm_state109;
wire   [0:0] grp_fu_1519_p0;
wire   [15:0] grp_fu_1519_p1;
wire   [13:0] grp_fu_1519_p2;
wire   [21:0] grp_fu_1519_p3;
reg    grp_fu_1325_ce;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
reg    grp_fu_1368_ce;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state39;
reg    grp_fu_1410_ce;
wire    ap_CS_fsm_state58;
wire    ap_CS_fsm_state59;
reg    grp_fu_1431_ce;
wire    ap_CS_fsm_state69;
wire    ap_CS_fsm_state70;
reg    grp_fu_1453_ce;
wire    ap_CS_fsm_state79;
wire    ap_CS_fsm_state80;
reg   [0:0] ap_return_preg;
wire    ap_CS_fsm_state116;
reg   [115:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_block_state4_on_subcall_done;
reg    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
reg    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
reg    ap_ST_fsm_state33_blk;
reg    ap_ST_fsm_state34_blk;
reg    ap_ST_fsm_state35_blk;
reg    ap_ST_fsm_state36_blk;
reg    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
reg    ap_ST_fsm_state56_blk;
reg    ap_ST_fsm_state57_blk;
wire    ap_ST_fsm_state58_blk;
wire    ap_ST_fsm_state59_blk;
wire    ap_ST_fsm_state60_blk;
wire    ap_ST_fsm_state61_blk;
wire    ap_ST_fsm_state62_blk;
wire    ap_ST_fsm_state63_blk;
wire    ap_ST_fsm_state64_blk;
wire    ap_ST_fsm_state65_blk;
wire    ap_ST_fsm_state66_blk;
reg    ap_ST_fsm_state67_blk;
reg    ap_ST_fsm_state68_blk;
wire    ap_ST_fsm_state69_blk;
wire    ap_ST_fsm_state70_blk;
wire    ap_ST_fsm_state71_blk;
wire    ap_ST_fsm_state72_blk;
wire    ap_ST_fsm_state73_blk;
wire    ap_ST_fsm_state74_blk;
wire    ap_ST_fsm_state75_blk;
wire    ap_ST_fsm_state76_blk;
wire    ap_ST_fsm_state77_blk;
reg    ap_ST_fsm_state78_blk;
wire    ap_ST_fsm_state79_blk;
wire    ap_ST_fsm_state80_blk;
wire    ap_ST_fsm_state81_blk;
wire    ap_ST_fsm_state82_blk;
wire    ap_ST_fsm_state83_blk;
wire    ap_ST_fsm_state84_blk;
wire    ap_ST_fsm_state85_blk;
wire    ap_ST_fsm_state86_blk;
wire    ap_ST_fsm_state87_blk;
wire    ap_ST_fsm_state88_blk;
wire    ap_ST_fsm_state89_blk;
wire    ap_ST_fsm_state90_blk;
wire    ap_ST_fsm_state91_blk;
wire    ap_ST_fsm_state92_blk;
wire    ap_ST_fsm_state93_blk;
wire    ap_ST_fsm_state94_blk;
wire    ap_ST_fsm_state95_blk;
wire    ap_ST_fsm_state96_blk;
wire    ap_ST_fsm_state97_blk;
wire    ap_ST_fsm_state98_blk;
wire    ap_ST_fsm_state99_blk;
wire    ap_ST_fsm_state100_blk;
wire    ap_ST_fsm_state101_blk;
wire    ap_ST_fsm_state102_blk;
wire    ap_ST_fsm_state103_blk;
wire    ap_ST_fsm_state104_blk;
wire    ap_ST_fsm_state105_blk;
wire    ap_ST_fsm_state106_blk;
wire    ap_ST_fsm_state107_blk;
wire    ap_ST_fsm_state108_blk;
wire    ap_ST_fsm_state109_blk;
wire    ap_ST_fsm_state110_blk;
wire    ap_ST_fsm_state111_blk;
wire    ap_ST_fsm_state112_blk;
wire    ap_ST_fsm_state113_blk;
wire    ap_ST_fsm_state114_blk;
wire    ap_ST_fsm_state115_blk;
wire    ap_ST_fsm_state116_blk;
wire   [29:0] grp_fu_1310_p00;
wire   [30:0] grp_fu_1317_p20;
wire   [29:0] grp_fu_1339_p00;
wire   [29:0] grp_fu_1360_p00;
wire   [29:0] grp_fu_1381_p00;
wire   [29:0] grp_fu_1402_p00;
wire   [29:0] grp_fu_1423_p00;
wire   [29:0] grp_fu_1445_p00;
wire   [29:0] grp_fu_1466_p00;
wire   [31:0] grp_fu_1474_p10;
wire   [29:0] grp_fu_1488_p00;
wire  signed [17:0] grp_fu_1496_p00;
wire   [29:0] grp_fu_1511_p00;
wire   [29:0] grp_fu_1519_p30;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 116'd1;
#0 grp_mq_NTT_fu_320_ap_start_reg = 1'b0;
#0 grp_mq_NTT_1_fu_328_ap_start_reg = 1'b0;
#0 grp_mq_montysqr_fu_336_ap_start_reg = 1'b0;
#0 ap_return_preg = 1'd0;
end

keygen_compute_public_1_iGMb_ROM_AUTO_1R #(
    .DataWidth( 14 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
iGMb_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(iGMb_address0),
    .ce0(iGMb_ce0),
    .q0(iGMb_q0)
);

keygen_mq_NTT grp_mq_NTT_fu_320(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_mq_NTT_fu_320_ap_start),
    .ap_done(grp_mq_NTT_fu_320_ap_done),
    .ap_idle(grp_mq_NTT_fu_320_ap_idle),
    .ap_ready(grp_mq_NTT_fu_320_ap_ready),
    .a_address0(grp_mq_NTT_fu_320_a_address0),
    .a_ce0(grp_mq_NTT_fu_320_a_ce0),
    .a_we0(grp_mq_NTT_fu_320_a_we0),
    .a_d0(grp_mq_NTT_fu_320_a_d0),
    .a_q0(h_q0)
);

keygen_mq_NTT_1 grp_mq_NTT_1_fu_328(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_mq_NTT_1_fu_328_ap_start),
    .ap_done(grp_mq_NTT_1_fu_328_ap_done),
    .ap_idle(grp_mq_NTT_1_fu_328_ap_idle),
    .ap_ready(grp_mq_NTT_1_fu_328_ap_ready),
    .tmp2108_address0(grp_mq_NTT_1_fu_328_tmp2108_address0),
    .tmp2108_ce0(grp_mq_NTT_1_fu_328_tmp2108_ce0),
    .tmp2108_we0(grp_mq_NTT_1_fu_328_tmp2108_we0),
    .tmp2108_d0(grp_mq_NTT_1_fu_328_tmp2108_d0),
    .tmp2108_q0(tmp2108_q0)
);

keygen_mq_montysqr grp_mq_montysqr_fu_336(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_mq_montysqr_fu_336_ap_start),
    .ap_done(grp_mq_montysqr_fu_336_ap_done),
    .ap_idle(grp_mq_montysqr_fu_336_ap_idle),
    .ap_ready(grp_mq_montysqr_fu_336_ap_ready),
    .x(grp_mq_montysqr_fu_336_x),
    .ap_return(grp_mq_montysqr_fu_336_ap_return)
);

keygen_mul_mul_16ns_15ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 16 ))
mul_mul_16ns_15ns_16_4_1_U128(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp2108_q0),
    .din1(grp_fu_1303_p1),
    .ce(1'b1),
    .dout(grp_fu_1303_p2)
);

keygen_mul_mul_16ns_14ns_30_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 30 ))
mul_mul_16ns_14ns_30_4_1_U129(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1310_p0),
    .din1(grp_fu_1310_p1),
    .ce(1'b1),
    .dout(grp_fu_1310_p2)
);

keygen_mac_muladd_16ns_14ns_30ns_31_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .din2_WIDTH( 30 ),
    .dout_WIDTH( 31 ))
mac_muladd_16ns_14ns_30ns_31_4_1_U130(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1317_p0),
    .din1(grp_fu_1317_p1),
    .din2(grp_fu_1317_p2),
    .ce(1'b1),
    .dout(grp_fu_1317_p3)
);

keygen_mul_mul_16s_17s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 32 ))
mul_mul_16s_17s_32_4_1_U131(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(z_177_reg_1623),
    .din1(grp_mq_montysqr_fu_336_ap_return),
    .ce(grp_fu_1325_ce),
    .dout(grp_fu_1325_p2)
);

keygen_mul_mul_16s_14ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 16 ))
mul_mul_16s_14ns_16_4_1_U132(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1332_p0),
    .din1(grp_fu_1332_p1),
    .ce(1'b1),
    .dout(grp_fu_1332_p2)
);

keygen_mac_muladd_16ns_14ns_32s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mac_muladd_16ns_14ns_32s_32_4_1_U133(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1339_p0),
    .din1(grp_fu_1339_p1),
    .din2(z_140_reg_1645),
    .ce(1'b1),
    .dout(grp_fu_1339_p3)
);

keygen_mul_mul_17s_17s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 32 ))
mul_mul_17s_17s_32_4_1_U134(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1347_p0),
    .din1(z_178_fu_589_p2),
    .ce(1'b1),
    .dout(grp_fu_1347_p2)
);

keygen_mul_mul_16s_14ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 16 ))
mul_mul_16s_14ns_16_4_1_U135(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1353_p0),
    .din1(grp_fu_1353_p1),
    .ce(1'b1),
    .dout(grp_fu_1353_p2)
);

keygen_mac_muladd_16ns_14ns_32s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mac_muladd_16ns_14ns_32s_32_4_1_U136(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1360_p0),
    .din1(grp_fu_1360_p1),
    .din2(z_154_reg_1666),
    .ce(1'b1),
    .dout(grp_fu_1360_p3)
);

keygen_mul_mul_17s_17s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 32 ))
mul_mul_17s_17s_32_4_1_U137(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1368_p0),
    .din1(grp_mq_montysqr_fu_336_ap_return),
    .ce(grp_fu_1368_ce),
    .dout(grp_fu_1368_p2)
);

keygen_mul_mul_16s_14ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 16 ))
mul_mul_16s_14ns_16_4_1_U138(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1374_p0),
    .din1(grp_fu_1374_p1),
    .ce(1'b1),
    .dout(grp_fu_1374_p2)
);

keygen_mac_muladd_16ns_14ns_32s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mac_muladd_16ns_14ns_32s_32_4_1_U139(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1381_p0),
    .din1(grp_fu_1381_p1),
    .din2(z_157_reg_1692),
    .ce(1'b1),
    .dout(grp_fu_1381_p3)
);

keygen_mul_mul_17s_17s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 32 ))
mul_mul_17s_17s_32_4_1_U140(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1389_p0),
    .din1(z_180_fu_692_p2),
    .ce(1'b1),
    .dout(grp_fu_1389_p2)
);

keygen_mul_mul_16s_14ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 16 ))
mul_mul_16s_14ns_16_4_1_U141(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1395_p0),
    .din1(grp_fu_1395_p1),
    .ce(1'b1),
    .dout(grp_fu_1395_p2)
);

keygen_mac_muladd_16ns_14ns_32s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mac_muladd_16ns_14ns_32s_32_4_1_U142(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1402_p0),
    .din1(grp_fu_1402_p1),
    .din2(z_160_reg_1713),
    .ce(1'b1),
    .dout(grp_fu_1402_p3)
);

keygen_mul_mul_17s_17s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 32 ))
mul_mul_17s_17s_32_4_1_U143(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1410_p0),
    .din1(grp_mq_montysqr_fu_336_ap_return),
    .ce(grp_fu_1410_ce),
    .dout(grp_fu_1410_p2)
);

keygen_mul_mul_16s_14ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 16 ))
mul_mul_16s_14ns_16_4_1_U144(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1416_p0),
    .din1(grp_fu_1416_p1),
    .ce(1'b1),
    .dout(grp_fu_1416_p2)
);

keygen_mac_muladd_16ns_14ns_32s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mac_muladd_16ns_14ns_32s_32_4_1_U145(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1423_p0),
    .din1(grp_fu_1423_p1),
    .din2(z_163_reg_1739),
    .ce(1'b1),
    .dout(grp_fu_1423_p3)
);

keygen_mul_mul_17s_17s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 32 ))
mul_mul_17s_17s_32_4_1_U146(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(z_181_reg_1728),
    .din1(grp_mq_montysqr_fu_336_ap_return),
    .ce(grp_fu_1431_ce),
    .dout(grp_fu_1431_p2)
);

keygen_mul_mul_16s_14ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 16 ))
mul_mul_16s_14ns_16_4_1_U147(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1438_p0),
    .din1(grp_fu_1438_p1),
    .ce(1'b1),
    .dout(grp_fu_1438_p2)
);

keygen_mac_muladd_16ns_14ns_32s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mac_muladd_16ns_14ns_32s_32_4_1_U148(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1445_p0),
    .din1(grp_fu_1445_p1),
    .din2(z_166_reg_1769),
    .ce(1'b1),
    .dout(grp_fu_1445_p3)
);

keygen_mul_mul_16s_17s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 32 ))
mul_mul_16s_17s_32_4_1_U149(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1453_p0),
    .din1(grp_mq_montysqr_fu_336_ap_return),
    .ce(grp_fu_1453_ce),
    .dout(grp_fu_1453_p2)
);

keygen_mul_mul_16s_14ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 16 ))
mul_mul_16s_14ns_16_4_1_U150(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1459_p0),
    .din1(grp_fu_1459_p1),
    .ce(1'b1),
    .dout(grp_fu_1459_p2)
);

keygen_mac_muladd_16ns_14ns_32s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mac_muladd_16ns_14ns_32s_32_4_1_U151(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1466_p0),
    .din1(grp_fu_1466_p1),
    .din2(z_169_reg_1794),
    .ce(1'b1),
    .dout(grp_fu_1466_p3)
);

keygen_mul_mul_17s_16ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_mul_17s_16ns_32_4_1_U152(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(z_184_fu_906_p2),
    .din1(grp_fu_1474_p1),
    .ce(1'b1),
    .dout(grp_fu_1474_p2)
);

keygen_mul_mul_16s_14ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 16 ))
mul_mul_16s_14ns_16_4_1_U153(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1481_p0),
    .din1(grp_fu_1481_p1),
    .ce(1'b1),
    .dout(grp_fu_1481_p2)
);

keygen_mac_muladd_16ns_14ns_32s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mac_muladd_16ns_14ns_32s_32_4_1_U154(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1488_p0),
    .din1(grp_fu_1488_p1),
    .din2(z_172_reg_1819),
    .ce(1'b1),
    .dout(grp_fu_1488_p3)
);

keygen_am_addmul_15s_17s_14ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 17 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 32 ))
am_addmul_15s_17s_14ns_32_4_1_U155(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1496_p0),
    .din1(d_13_fu_1141_p2),
    .din2(grp_fu_1496_p2),
    .ce(1'b1),
    .dout(grp_fu_1496_p3)
);

keygen_mul_mul_16s_14ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 16 ))
mul_mul_16s_14ns_16_4_1_U156(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1504_p0),
    .din1(grp_fu_1504_p1),
    .ce(1'b1),
    .dout(grp_fu_1504_p2)
);

keygen_mac_muladd_16ns_14ns_32s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mac_muladd_16ns_14ns_32s_32_4_1_U157(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1511_p0),
    .din1(grp_fu_1511_p1),
    .din2(z_175_reg_1914),
    .ce(1'b1),
    .dout(grp_fu_1511_p3)
);

keygen_ama_submuladd_1ns_16ns_14ns_22ns_30_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 14 ),
    .din3_WIDTH( 22 ),
    .dout_WIDTH( 30 ))
ama_submuladd_1ns_16ns_14ns_22ns_30_4_1_U158(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1519_p0),
    .din1(grp_fu_1519_p1),
    .din2(grp_fu_1519_p2),
    .din3(grp_fu_1519_p3),
    .ce(1'b1),
    .dout(grp_fu_1519_p4)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state116)) begin
            ap_return_preg <= retval_0_reg_307;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_mq_NTT_1_fu_328_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln824_fu_361_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_mq_NTT_1_fu_328_ap_start_reg <= 1'b1;
        end else if ((grp_mq_NTT_1_fu_328_ap_ready == 1'b1)) begin
            grp_mq_NTT_1_fu_328_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_mq_NTT_fu_320_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln824_fu_361_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_mq_NTT_fu_320_ap_start_reg <= 1'b1;
        end else if ((grp_mq_NTT_fu_320_ap_ready == 1'b1)) begin
            grp_mq_NTT_fu_320_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_mq_montysqr_fu_336_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state13) | ((1'b1 == ap_CS_fsm_state67) & (grp_mq_montysqr_fu_336_ap_done == 1'b1)) | ((1'b1 == ap_CS_fsm_state56) & (grp_mq_montysqr_fu_336_ap_done == 1'b1)) | ((1'b1 == ap_CS_fsm_state36) & (grp_mq_montysqr_fu_336_ap_done == 1'b1)) | ((1'b1 == ap_CS_fsm_state35) & (grp_mq_montysqr_fu_336_ap_done == 1'b1)) | ((1'b1 == ap_CS_fsm_state34) & (grp_mq_montysqr_fu_336_ap_done == 1'b1)) | ((1'b1 == ap_CS_fsm_state33) & (grp_mq_montysqr_fu_336_ap_done == 1'b1)))) begin
            grp_mq_montysqr_fu_336_ap_start_reg <= 1'b1;
        end else if ((grp_mq_montysqr_fu_336_ap_ready == 1'b1)) begin
            grp_mq_montysqr_fu_336_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln547_fu_980_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state97))) begin
        i_reg_285 <= 10'd0;
    end else if (((icmp_ln558_fu_1044_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state100))) begin
        i_reg_285 <= i_18_reg_1870;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln547_fu_980_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state97))) begin
        indvars_iv_reg_263 <= t_fu_148;
    end else if (((icmp_ln558_fu_1044_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state100))) begin
        indvars_iv_reg_263 <= add_ln552_fu_1079_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln547_fu_980_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state97))) begin
        j1_10_reg_273 <= 64'd0;
    end else if (((icmp_ln558_fu_1044_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state100))) begin
        j1_10_reg_273 <= j1_fu_1074_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state110)) begin
        j_9_reg_296 <= j_12_reg_1899;
    end else if ((1'b1 == ap_CS_fsm_state99)) begin
        j_9_reg_296 <= j1_10_reg_273;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln547_fu_980_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state97))) begin
        m_11_fu_152 <= 11'd0;
    end else if (((icmp_ln586_fu_1223_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state111))) begin
        m_11_fu_152 <= m_17_fu_1229_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln830_fu_453_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        m_fu_144 <= 11'd1024;
    end else if (((icmp_ln552_fu_1011_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state98))) begin
        m_fu_144 <= zext_ln550_reg_1848;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln831_fu_479_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        retval_0_reg_307 <= 1'd0;
    end else if (((icmp_ln586_fu_1223_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state111))) begin
        retval_0_reg_307 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln830_fu_453_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        t_fu_148 <= 64'd1;
    end else if (((icmp_ln552_fu_1011_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state98))) begin
        t_fu_148 <= dt_reg_1853;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        u_02_fu_136 <= 11'd0;
    end else if (((icmp_ln824_fu_361_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        u_02_fu_136 <= u_234_fu_367_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln824_fu_361_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        u_11_fu_140 <= 11'd0;
    end else if (((icmp_ln831_fu_479_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        u_11_fu_140 <= u_236_reg_1571;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln547_fu_980_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state97))) begin
        dt_reg_1853[63 : 1] <= dt_fu_1000_p2[63 : 1];
        hm_reg_1842 <= {{m_fu_144[10:1]}};
        zext_ln550_reg_1848[9 : 0] <= zext_ln550_fu_996_p1[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln831_fu_479_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        h_addr_1_reg_1608 <= zext_ln830_reg_1563;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln586_fu_1223_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state111))) begin
        h_addr_2_reg_1932 <= zext_ln586_fu_1218_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln558_fu_1044_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state100))) begin
        h_addr_3_reg_1888 <= j_9_reg_296;
        h_addr_4_reg_1893 <= zext_ln562_fu_1063_p1;
        j_12_reg_1899 <= j_12_fu_1068_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state112)) begin
        h_load_1_reg_1938 <= h_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state98)) begin
        i_18_reg_1870 <= i_18_fu_1016_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state67) & (grp_mq_montysqr_fu_336_ap_done == 1'b1)) | ((1'b1 == ap_CS_fsm_state56) & (grp_mq_montysqr_fu_336_ap_done == 1'b1)) | ((1'b1 == ap_CS_fsm_state36) & (grp_mq_montysqr_fu_336_ap_done == 1'b1)) | ((1'b1 == ap_CS_fsm_state35) & (grp_mq_montysqr_fu_336_ap_done == 1'b1)) | ((1'b1 == ap_CS_fsm_state34) & (grp_mq_montysqr_fu_336_ap_done == 1'b1)) | ((1'b1 == ap_CS_fsm_state33) & (grp_mq_montysqr_fu_336_ap_done == 1'b1)))) begin
        reg_342 <= grp_mq_montysqr_fu_336_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        sext_ln396_3_reg_1633 <= sext_ln396_3_fu_541_p1;
        sext_ln471_reg_1639 <= sext_ln471_fu_544_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        sext_ln396_4_reg_1628 <= sext_ln396_4_fu_536_p1;
        z_177_reg_1623 <= z_177_fu_530_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        sext_ln396_5_reg_1660 <= sext_ln396_5_fu_595_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        sext_ln396_6_reg_1707 <= sext_ln396_6_fu_698_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        sext_ln471_1_reg_1686 <= sext_ln471_1_fu_647_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state97)) begin
        t_9_reg_1834 <= t_fu_148;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        u_236_reg_1571 <= u_236_fu_459_p2;
        zext_ln830_reg_1563[10 : 0] <= zext_ln830_fu_448_p1[10 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        z_140_reg_1645 <= grp_fu_1325_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        z_154_reg_1666 <= grp_fu_1347_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        z_157_reg_1692 <= grp_fu_1368_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        z_160_reg_1713 <= grp_fu_1389_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        z_163_reg_1739 <= grp_fu_1410_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        z_166_reg_1769 <= grp_fu_1431_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        z_169_reg_1794 <= grp_fu_1453_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state90)) begin
        z_172_reg_1819 <= grp_fu_1474_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state104)) begin
        z_175_reg_1914 <= grp_fu_1496_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        z_179_reg_1681 <= z_179_fu_640_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        z_181_reg_1728 <= z_181_fu_743_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        z_182_reg_1754 <= z_182_fu_795_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        z_183_reg_1784 <= z_183_fu_850_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state99)) begin
        zext_ln557_1_reg_1880[13 : 0] <= zext_ln557_1_fu_1040_p1[13 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        zext_ln824_reg_1537[10 : 0] <= zext_ln824_fu_355_p1[10 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        zext_ln831_reg_1600[15 : 0] <= zext_ln831_fu_475_p1[15 : 0];
    end
end

assign ap_ST_fsm_state100_blk = 1'b0;

assign ap_ST_fsm_state101_blk = 1'b0;

assign ap_ST_fsm_state102_blk = 1'b0;

assign ap_ST_fsm_state103_blk = 1'b0;

assign ap_ST_fsm_state104_blk = 1'b0;

assign ap_ST_fsm_state105_blk = 1'b0;

assign ap_ST_fsm_state106_blk = 1'b0;

assign ap_ST_fsm_state107_blk = 1'b0;

assign ap_ST_fsm_state108_blk = 1'b0;

assign ap_ST_fsm_state109_blk = 1'b0;

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state110_blk = 1'b0;

assign ap_ST_fsm_state111_blk = 1'b0;

assign ap_ST_fsm_state112_blk = 1'b0;

assign ap_ST_fsm_state113_blk = 1'b0;

assign ap_ST_fsm_state114_blk = 1'b0;

assign ap_ST_fsm_state115_blk = 1'b0;

assign ap_ST_fsm_state116_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

always @ (*) begin
    if ((grp_mq_montysqr_fu_336_ap_done == 1'b0)) begin
        ap_ST_fsm_state14_blk = 1'b1;
    end else begin
        ap_ST_fsm_state14_blk = 1'b0;
    end
end

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

always @ (*) begin
    if ((grp_mq_montysqr_fu_336_ap_done == 1'b0)) begin
        ap_ST_fsm_state33_blk = 1'b1;
    end else begin
        ap_ST_fsm_state33_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_mq_montysqr_fu_336_ap_done == 1'b0)) begin
        ap_ST_fsm_state34_blk = 1'b1;
    end else begin
        ap_ST_fsm_state34_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_mq_montysqr_fu_336_ap_done == 1'b0)) begin
        ap_ST_fsm_state35_blk = 1'b1;
    end else begin
        ap_ST_fsm_state35_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_mq_montysqr_fu_336_ap_done == 1'b0)) begin
        ap_ST_fsm_state36_blk = 1'b1;
    end else begin
        ap_ST_fsm_state36_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_mq_montysqr_fu_336_ap_done == 1'b0)) begin
        ap_ST_fsm_state37_blk = 1'b1;
    end else begin
        ap_ST_fsm_state37_blk = 1'b0;
    end
end

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state4_on_subcall_done)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

always @ (*) begin
    if ((grp_mq_montysqr_fu_336_ap_done == 1'b0)) begin
        ap_ST_fsm_state56_blk = 1'b1;
    end else begin
        ap_ST_fsm_state56_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_mq_montysqr_fu_336_ap_done == 1'b0)) begin
        ap_ST_fsm_state57_blk = 1'b1;
    end else begin
        ap_ST_fsm_state57_blk = 1'b0;
    end
end

assign ap_ST_fsm_state58_blk = 1'b0;

assign ap_ST_fsm_state59_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state60_blk = 1'b0;

assign ap_ST_fsm_state61_blk = 1'b0;

assign ap_ST_fsm_state62_blk = 1'b0;

assign ap_ST_fsm_state63_blk = 1'b0;

assign ap_ST_fsm_state64_blk = 1'b0;

assign ap_ST_fsm_state65_blk = 1'b0;

assign ap_ST_fsm_state66_blk = 1'b0;

always @ (*) begin
    if ((grp_mq_montysqr_fu_336_ap_done == 1'b0)) begin
        ap_ST_fsm_state67_blk = 1'b1;
    end else begin
        ap_ST_fsm_state67_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_mq_montysqr_fu_336_ap_done == 1'b0)) begin
        ap_ST_fsm_state68_blk = 1'b1;
    end else begin
        ap_ST_fsm_state68_blk = 1'b0;
    end
end

assign ap_ST_fsm_state69_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state70_blk = 1'b0;

assign ap_ST_fsm_state71_blk = 1'b0;

assign ap_ST_fsm_state72_blk = 1'b0;

assign ap_ST_fsm_state73_blk = 1'b0;

assign ap_ST_fsm_state74_blk = 1'b0;

assign ap_ST_fsm_state75_blk = 1'b0;

assign ap_ST_fsm_state76_blk = 1'b0;

assign ap_ST_fsm_state77_blk = 1'b0;

always @ (*) begin
    if ((grp_mq_montysqr_fu_336_ap_done == 1'b0)) begin
        ap_ST_fsm_state78_blk = 1'b1;
    end else begin
        ap_ST_fsm_state78_blk = 1'b0;
    end
end

assign ap_ST_fsm_state79_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state80_blk = 1'b0;

assign ap_ST_fsm_state81_blk = 1'b0;

assign ap_ST_fsm_state82_blk = 1'b0;

assign ap_ST_fsm_state83_blk = 1'b0;

assign ap_ST_fsm_state84_blk = 1'b0;

assign ap_ST_fsm_state85_blk = 1'b0;

assign ap_ST_fsm_state86_blk = 1'b0;

assign ap_ST_fsm_state87_blk = 1'b0;

assign ap_ST_fsm_state88_blk = 1'b0;

assign ap_ST_fsm_state89_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state90_blk = 1'b0;

assign ap_ST_fsm_state91_blk = 1'b0;

assign ap_ST_fsm_state92_blk = 1'b0;

assign ap_ST_fsm_state93_blk = 1'b0;

assign ap_ST_fsm_state94_blk = 1'b0;

assign ap_ST_fsm_state95_blk = 1'b0;

assign ap_ST_fsm_state96_blk = 1'b0;

assign ap_ST_fsm_state97_blk = 1'b0;

assign ap_ST_fsm_state98_blk = 1'b0;

assign ap_ST_fsm_state99_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state116) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state116)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state116)) begin
        ap_return = retval_0_reg_307;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        f_ce0 = 1'b1;
    end else begin
        f_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        g_ce0 = 1'b1;
    end else begin
        g_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | ((1'b1 == ap_CS_fsm_state14) & (grp_mq_montysqr_fu_336_ap_done == 1'b1)))) begin
        grp_fu_1325_ce = 1'b1;
    end else begin
        grp_fu_1325_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | ((1'b1 == ap_CS_fsm_state37) & (grp_mq_montysqr_fu_336_ap_done == 1'b1)))) begin
        grp_fu_1368_ce = 1'b1;
    end else begin
        grp_fu_1368_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | ((1'b1 == ap_CS_fsm_state57) & (grp_mq_montysqr_fu_336_ap_done == 1'b1)))) begin
        grp_fu_1410_ce = 1'b1;
    end else begin
        grp_fu_1410_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state69) | ((1'b1 == ap_CS_fsm_state68) & (grp_mq_montysqr_fu_336_ap_done == 1'b1)))) begin
        grp_fu_1431_ce = 1'b1;
    end else begin
        grp_fu_1431_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state79) | ((1'b1 == ap_CS_fsm_state78) & (grp_mq_montysqr_fu_336_ap_done == 1'b1)))) begin
        grp_fu_1453_ce = 1'b1;
    end else begin
        grp_fu_1453_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        grp_mq_montysqr_fu_336_x = z_183_reg_1784;
    end else if ((1'b1 == ap_CS_fsm_state67)) begin
        grp_mq_montysqr_fu_336_x = z_182_reg_1754;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        grp_mq_montysqr_fu_336_x = z_181_reg_1728;
    end else if (((1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34))) begin
        grp_mq_montysqr_fu_336_x = reg_342;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        grp_mq_montysqr_fu_336_x = z_179_reg_1681;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_mq_montysqr_fu_336_x = sext_ln396_4_reg_1628;
    end else begin
        grp_mq_montysqr_fu_336_x = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state115)) begin
        h_address0 = h_addr_2_reg_1932;
    end else if ((1'b1 == ap_CS_fsm_state100)) begin
        h_address0 = zext_ln562_fu_1063_p1;
    end else if (((1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state86))) begin
        h_address0 = h_addr_1_reg_1608;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        h_address0 = zext_ln824_reg_1537;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        h_address0 = grp_mq_NTT_fu_320_a_address0;
    end else begin
        h_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state111)) begin
        h_address1 = zext_ln586_fu_1218_p1;
    end else if ((1'b1 == ap_CS_fsm_state110)) begin
        h_address1 = h_addr_4_reg_1893;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        h_address1 = h_addr_3_reg_1888;
    end else if ((1'b1 == ap_CS_fsm_state100)) begin
        h_address1 = j_9_reg_296;
    end else begin
        h_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state115) | (1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state100))) begin
        h_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        h_ce0 = grp_mq_NTT_fu_320_a_ce0;
    end else begin
        h_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state110) | (1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state100))) begin
        h_ce1 = 1'b1;
    end else begin
        h_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state115)) begin
        h_d0 = sext_ln587_fu_1298_p1;
    end else if ((1'b1 == ap_CS_fsm_state96)) begin
        h_d0 = add_ln834_fu_957_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        h_d0 = sext_ln826_fu_440_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        h_d0 = grp_mq_NTT_fu_320_a_d0;
    end else begin
        h_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state110)) begin
        h_d1 = add_ln565_fu_1208_p2;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        h_d1 = add_ln563_fu_1134_p2;
    end else begin
        h_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state115) | (1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state3))) begin
        h_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        h_we0 = grp_mq_NTT_fu_320_a_we0;
    end else begin
        h_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state110))) begin
        h_we1 = 1'b1;
    end else begin
        h_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state98)) begin
        iGMb_ce0 = 1'b1;
    end else begin
        iGMb_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp2108_address0 = zext_ln830_fu_448_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp2108_address0 = zext_ln824_reg_1537;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp2108_address0 = grp_mq_NTT_1_fu_328_tmp2108_address0;
    end else begin
        tmp2108_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5))) begin
        tmp2108_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp2108_ce0 = grp_mq_NTT_1_fu_328_tmp2108_ce0;
    end else begin
        tmp2108_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp2108_d0 = sext_ln825_fu_409_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp2108_d0 = grp_mq_NTT_1_fu_328_tmp2108_d0;
    end else begin
        tmp2108_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp2108_we0 = 2'd3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp2108_we0 = grp_mq_NTT_1_fu_328_tmp2108_we0;
    end else begin
        tmp2108_we0 = 2'd0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln824_fu_361_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln830_fu_453_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state97;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln831_fu_479_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state116;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (grp_mq_montysqr_fu_336_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            if (((1'b1 == ap_CS_fsm_state33) & (grp_mq_montysqr_fu_336_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            if (((1'b1 == ap_CS_fsm_state34) & (grp_mq_montysqr_fu_336_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state35 : begin
            if (((1'b1 == ap_CS_fsm_state35) & (grp_mq_montysqr_fu_336_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            if (((1'b1 == ap_CS_fsm_state36) & (grp_mq_montysqr_fu_336_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state37 : begin
            if (((1'b1 == ap_CS_fsm_state37) & (grp_mq_montysqr_fu_336_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            if (((1'b1 == ap_CS_fsm_state56) & (grp_mq_montysqr_fu_336_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end
        end
        ap_ST_fsm_state57 : begin
            if (((1'b1 == ap_CS_fsm_state57) & (grp_mq_montysqr_fu_336_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            if (((1'b1 == ap_CS_fsm_state67) & (grp_mq_montysqr_fu_336_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end
        end
        ap_ST_fsm_state68 : begin
            if (((1'b1 == ap_CS_fsm_state68) & (grp_mq_montysqr_fu_336_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            if (((1'b1 == ap_CS_fsm_state78) & (grp_mq_montysqr_fu_336_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state97 : begin
            if (((icmp_ln547_fu_980_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state97))) begin
                ap_NS_fsm = ap_ST_fsm_state111;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state98;
            end
        end
        ap_ST_fsm_state98 : begin
            if (((icmp_ln552_fu_1011_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state98))) begin
                ap_NS_fsm = ap_ST_fsm_state97;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state99;
            end
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            if (((icmp_ln558_fu_1044_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state100))) begin
                ap_NS_fsm = ap_ST_fsm_state98;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state101;
            end
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state111 : begin
            if (((icmp_ln586_fu_1223_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state111))) begin
                ap_NS_fsm = ap_ST_fsm_state116;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state112;
            end
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln356_fu_1096_p2 = ($signed(zext_ln559_2_fu_1092_p1) + $signed(17'd118783));

assign add_ln552_fu_1079_p2 = (dt_reg_1853 + indvars_iv_reg_263);

assign add_ln557_fu_1022_p2 = (i_reg_285 + hm_reg_1842);

assign add_ln562_fu_1057_p2 = (trunc_ln558_fu_1050_p1 + trunc_ln541_fu_1054_p1);

assign add_ln563_1_fu_1120_p2 = (h_q1 + h_q0);

assign add_ln563_fu_1134_p2 = (select_ln563_fu_1126_p3 + add_ln563_1_fu_1120_p2);

assign add_ln565_fu_1208_p2 = (select_ln565_fu_1200_p3 + trunc_ln396_s_fu_1173_p4);

assign add_ln587_fu_1292_p2 = (select_ln587_fu_1284_p3 + zext_ln396_22_fu_1266_p1);

assign add_ln825_fu_403_p2 = ($signed(select_ln825_fu_395_p3) + $signed(sext_ln337_fu_391_p1));

assign add_ln826_fu_434_p2 = ($signed(select_ln826_fu_426_p3) + $signed(sext_ln337_1_fu_422_p1));

assign add_ln834_fu_957_p2 = (select_ln834_fu_949_p3 + trunc_ln396_8_fu_922_p4);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state100 = ap_CS_fsm[32'd99];

assign ap_CS_fsm_state101 = ap_CS_fsm[32'd100];

assign ap_CS_fsm_state104 = ap_CS_fsm[32'd103];

assign ap_CS_fsm_state107 = ap_CS_fsm[32'd106];

assign ap_CS_fsm_state109 = ap_CS_fsm[32'd108];

assign ap_CS_fsm_state110 = ap_CS_fsm[32'd109];

assign ap_CS_fsm_state111 = ap_CS_fsm[32'd110];

assign ap_CS_fsm_state112 = ap_CS_fsm[32'd111];

assign ap_CS_fsm_state114 = ap_CS_fsm[32'd113];

assign ap_CS_fsm_state115 = ap_CS_fsm[32'd114];

assign ap_CS_fsm_state116 = ap_CS_fsm[32'd115];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd89];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd92];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd94];

assign ap_CS_fsm_state96 = ap_CS_fsm[32'd95];

assign ap_CS_fsm_state97 = ap_CS_fsm[32'd96];

assign ap_CS_fsm_state98 = ap_CS_fsm[32'd97];

assign ap_CS_fsm_state99 = ap_CS_fsm[32'd98];

always @ (*) begin
    ap_block_state4_on_subcall_done = ((grp_mq_NTT_1_fu_328_ap_done == 1'b0) | (grp_mq_NTT_fu_320_ap_done == 1'b0));
end

assign d_13_fu_1141_p2 = (zext_ln559_fu_1084_p1 - zext_ln559_2_fu_1092_p1);

assign d_fu_1106_p2 = ($signed(sext_ln356_fu_1102_p1) + $signed(zext_ln559_1_fu_1088_p1));

assign dt_fu_1000_p2 = t_fu_148 << 64'd1;

assign f_address0 = zext_ln824_fu_355_p1;

assign g_address0 = zext_ln824_fu_355_p1;

assign grp_fu_1303_p1 = 16'd21816;

assign grp_fu_1310_p0 = grp_fu_1310_p00;

assign grp_fu_1310_p00 = $unsigned(zext_ln406_fu_489_p0);

assign grp_fu_1310_p1 = 30'd12289;

assign grp_fu_1317_p0 = zext_ln831_reg_1600;

assign grp_fu_1317_p1 = 30'd10952;

assign grp_fu_1317_p2 = grp_fu_1317_p20;

assign grp_fu_1317_p20 = grp_fu_1310_p2;

assign grp_fu_1332_p0 = grp_fu_1325_p2[15:0];

assign grp_fu_1332_p1 = 16'd12287;

assign grp_fu_1339_p0 = grp_fu_1339_p00;

assign grp_fu_1339_p00 = $unsigned(zext_ln406_1_fu_551_p0);

assign grp_fu_1339_p1 = 30'd12289;

assign grp_fu_1347_p0 = sext_ln471_reg_1639;

assign grp_fu_1353_p0 = grp_fu_1347_p2[15:0];

assign grp_fu_1353_p1 = 16'd12287;

assign grp_fu_1360_p0 = grp_fu_1360_p00;

assign grp_fu_1360_p00 = $unsigned(zext_ln406_2_fu_602_p0);

assign grp_fu_1360_p1 = 30'd12289;

assign grp_fu_1368_p0 = sext_ln396_5_reg_1660;

assign grp_fu_1374_p0 = grp_fu_1368_p2[15:0];

assign grp_fu_1374_p1 = 16'd12287;

assign grp_fu_1381_p0 = grp_fu_1381_p00;

assign grp_fu_1381_p00 = $unsigned(zext_ln406_3_fu_654_p0);

assign grp_fu_1381_p1 = 30'd12289;

assign grp_fu_1389_p0 = sext_ln471_1_reg_1686;

assign grp_fu_1395_p0 = grp_fu_1389_p2[15:0];

assign grp_fu_1395_p1 = 16'd12287;

assign grp_fu_1402_p0 = grp_fu_1402_p00;

assign grp_fu_1402_p00 = $unsigned(zext_ln406_4_fu_705_p0);

assign grp_fu_1402_p1 = 30'd12289;

assign grp_fu_1410_p0 = sext_ln396_6_reg_1707;

assign grp_fu_1416_p0 = grp_fu_1410_p2[15:0];

assign grp_fu_1416_p1 = 16'd12287;

assign grp_fu_1423_p0 = grp_fu_1423_p00;

assign grp_fu_1423_p00 = $unsigned(zext_ln406_5_fu_757_p0);

assign grp_fu_1423_p1 = 30'd12289;

assign grp_fu_1438_p0 = grp_fu_1431_p2[15:0];

assign grp_fu_1438_p1 = 16'd12287;

assign grp_fu_1445_p0 = grp_fu_1445_p00;

assign grp_fu_1445_p00 = $unsigned(zext_ln406_6_fu_812_p0);

assign grp_fu_1445_p1 = 30'd12289;

assign grp_fu_1453_p0 = sext_ln396_3_reg_1633;

assign grp_fu_1459_p0 = grp_fu_1453_p2[15:0];

assign grp_fu_1459_p1 = 16'd12287;

assign grp_fu_1466_p0 = grp_fu_1466_p00;

assign grp_fu_1466_p00 = $unsigned(zext_ln406_7_fu_864_p0);

assign grp_fu_1466_p1 = 30'd12289;

assign grp_fu_1474_p1 = grp_fu_1474_p10;

assign grp_fu_1474_p10 = h_q0;

assign grp_fu_1481_p0 = grp_fu_1474_p2[15:0];

assign grp_fu_1481_p1 = 16'd12287;

assign grp_fu_1488_p0 = grp_fu_1488_p00;

assign grp_fu_1488_p00 = $unsigned(zext_ln406_8_fu_919_p0);

assign grp_fu_1488_p1 = 30'd12289;

assign grp_fu_1496_p0 = grp_fu_1496_p00;

assign grp_fu_1496_p00 = ((tmp_241_fu_1151_p3[0:0] == 1'b1) ? 18'd12289 : 18'd0);

assign grp_fu_1496_p2 = zext_ln557_1_reg_1880;

assign grp_fu_1504_p0 = grp_fu_1496_p3[15:0];

assign grp_fu_1504_p1 = 16'd12287;

assign grp_fu_1511_p0 = grp_fu_1511_p00;

assign grp_fu_1511_p00 = $unsigned(zext_ln406_10_fu_1170_p0);

assign grp_fu_1511_p1 = 30'd12289;

assign grp_fu_1519_p0 = 16'd0;

assign grp_fu_1519_p1 = h_q1 << 16'd6;

assign grp_fu_1519_p2 = 30'd12289;

assign grp_fu_1519_p3 = grp_fu_1519_p30;

assign grp_fu_1519_p30 = z_fu_1246_p3;

assign grp_mq_NTT_1_fu_328_ap_start = grp_mq_NTT_1_fu_328_ap_start_reg;

assign grp_mq_NTT_fu_320_ap_start = grp_mq_NTT_fu_320_ap_start_reg;

assign grp_mq_montysqr_fu_336_ap_start = grp_mq_montysqr_fu_336_ap_start_reg;

assign hm_fu_986_p4 = {{m_fu_144[10:1]}};

assign iGMb_address0 = zext_ln557_fu_1027_p1;

assign i_18_fu_1016_p2 = (i_reg_285 + 10'd1);

assign icmp_ln547_fu_980_p2 = ((tmp_229_fu_970_p4 == 10'd0) ? 1'b1 : 1'b0);

assign icmp_ln552_fu_1011_p2 = ((i_reg_285 == hm_reg_1842) ? 1'b1 : 1'b0);

assign icmp_ln558_fu_1044_p2 = ((j_9_reg_296 < indvars_iv_reg_263) ? 1'b1 : 1'b0);

assign icmp_ln586_fu_1223_p2 = ((m_11_fu_152 == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln824_fu_361_p2 = ((u_02_fu_136 == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln830_fu_453_p2 = ((u_11_fu_140 == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln831_fu_479_p0 = tmp2108_q0;

assign icmp_ln831_fu_479_p2 = ((icmp_ln831_fu_479_p0 == 16'd0) ? 1'b1 : 1'b0);

assign j1_fu_1074_p2 = (dt_reg_1853 + j1_10_reg_273);

assign j_12_fu_1068_p2 = (j_9_reg_296 + 64'd1);

assign m_17_fu_1229_p2 = (m_11_fu_152 + 11'd1);

assign select_ln422_1_fu_581_p3 = ((tmp_231_fu_573_p3[0:0] == 1'b1) ? 17'd12289 : 17'd0);

assign select_ln422_2_fu_632_p3 = ((tmp_232_fu_624_p3[0:0] == 1'b1) ? 17'd12289 : 17'd0);

assign select_ln422_3_fu_684_p3 = ((tmp_233_fu_676_p3[0:0] == 1'b1) ? 17'd12289 : 17'd0);

assign select_ln422_4_fu_735_p3 = ((tmp_234_fu_727_p3[0:0] == 1'b1) ? 17'd12289 : 17'd0);

assign select_ln422_5_fu_787_p3 = ((tmp_235_fu_779_p3[0:0] == 1'b1) ? 17'd12289 : 17'd0);

assign select_ln422_6_fu_842_p3 = ((tmp_236_fu_834_p3[0:0] == 1'b1) ? 17'd12289 : 17'd0);

assign select_ln422_7_fu_898_p3 = ((tmp_237_fu_890_p3[0:0] == 1'b1) ? 17'd12289 : 17'd0);

assign select_ln422_fu_522_p3 = ((tmp_230_fu_514_p3[0:0] == 1'b1) ? 16'd12289 : 16'd0);

assign select_ln563_fu_1126_p3 = ((tmp_240_fu_1112_p3[0:0] == 1'b1) ? 16'd0 : 16'd53247);

assign select_ln565_fu_1200_p3 = ((tmp_242_fu_1192_p3[0:0] == 1'b1) ? 16'd0 : 16'd53247);

assign select_ln587_fu_1284_p3 = ((tmp_239_fu_1276_p3[0:0] == 1'b1) ? 15'd0 : 15'd20479);

assign select_ln825_fu_395_p3 = ((tmp_fu_383_p3[0:0] == 1'b1) ? 15'd12289 : 15'd0);

assign select_ln826_fu_426_p3 = ((tmp_228_fu_414_p3[0:0] == 1'b1) ? 15'd12289 : 15'd0);

assign select_ln834_fu_949_p3 = ((tmp_238_fu_941_p3[0:0] == 1'b1) ? 16'd0 : 16'd53247);

assign sext_ln337_1_fu_422_p0 = g_q0;

assign sext_ln337_1_fu_422_p1 = sext_ln337_1_fu_422_p0;

assign sext_ln337_fu_391_p0 = f_q0;

assign sext_ln337_fu_391_p1 = sext_ln337_fu_391_p0;

assign sext_ln356_fu_1102_p1 = $signed(add_ln356_fu_1096_p2);

assign sext_ln396_3_fu_541_p1 = z_177_reg_1623;

assign sext_ln396_4_fu_536_p1 = z_177_fu_530_p2;

assign sext_ln396_5_fu_595_p1 = z_178_fu_589_p2;

assign sext_ln396_6_fu_698_p1 = z_180_fu_692_p2;

assign sext_ln396_fu_510_p1 = z_134_fu_504_p2;

assign sext_ln471_1_fu_647_p1 = grp_mq_montysqr_fu_336_ap_return;

assign sext_ln471_fu_544_p1 = grp_mq_montysqr_fu_336_ap_return;

assign sext_ln587_fu_1298_p1 = $signed(add_ln587_fu_1292_p2);

assign sext_ln825_fu_409_p1 = $signed(add_ln825_fu_403_p2);

assign sext_ln826_fu_440_p1 = $signed(add_ln826_fu_434_p2);

assign tmp_228_fu_414_p1 = g_q0;

assign tmp_228_fu_414_p3 = tmp_228_fu_414_p1[32'd7];

assign tmp_229_fu_970_p4 = {{m_fu_144[10:1]}};

assign tmp_230_fu_514_p3 = z_134_fu_504_p2[32'd14];

assign tmp_231_fu_573_p3 = z_146_fu_567_p2[32'd16];

assign tmp_232_fu_624_p3 = z_155_fu_618_p2[32'd16];

assign tmp_233_fu_676_p3 = z_158_fu_670_p2[32'd16];

assign tmp_234_fu_727_p3 = z_161_fu_721_p2[32'd16];

assign tmp_235_fu_779_p3 = z_164_fu_773_p2[32'd16];

assign tmp_236_fu_834_p3 = z_167_fu_828_p2[32'd16];

assign tmp_237_fu_890_p3 = z_170_fu_884_p2[32'd16];

assign tmp_238_fu_941_p3 = z_173_fu_935_p2[32'd16];

assign tmp_239_fu_1276_p3 = z_174_fu_1270_p2[32'd14];

assign tmp_240_fu_1112_p3 = d_fu_1106_p2[32'd17];

assign tmp_241_fu_1151_p3 = d_13_fu_1141_p2[32'd16];

assign tmp_242_fu_1192_p3 = z_176_fu_1186_p2[32'd16];

assign tmp_fu_383_p1 = f_q0;

assign tmp_fu_383_p3 = tmp_fu_383_p1[32'd7];

assign trunc_ln396_1_fu_554_p1 = grp_fu_1339_p3;

assign trunc_ln396_1_fu_554_p4 = {{trunc_ln396_1_fu_554_p1[31:16]}};

assign trunc_ln396_2_fu_605_p1 = grp_fu_1360_p3;

assign trunc_ln396_2_fu_605_p4 = {{trunc_ln396_2_fu_605_p1[31:16]}};

assign trunc_ln396_3_fu_657_p1 = grp_fu_1381_p3;

assign trunc_ln396_3_fu_657_p4 = {{trunc_ln396_3_fu_657_p1[31:16]}};

assign trunc_ln396_4_fu_708_p1 = grp_fu_1402_p3;

assign trunc_ln396_4_fu_708_p4 = {{trunc_ln396_4_fu_708_p1[31:16]}};

assign trunc_ln396_5_fu_760_p1 = grp_fu_1423_p3;

assign trunc_ln396_5_fu_760_p4 = {{trunc_ln396_5_fu_760_p1[31:16]}};

assign trunc_ln396_6_fu_815_p1 = grp_fu_1445_p3;

assign trunc_ln396_6_fu_815_p4 = {{trunc_ln396_6_fu_815_p1[31:16]}};

assign trunc_ln396_7_fu_871_p1 = grp_fu_1466_p3;

assign trunc_ln396_7_fu_871_p4 = {{trunc_ln396_7_fu_871_p1[31:16]}};

assign trunc_ln396_8_fu_922_p1 = grp_fu_1488_p3;

assign trunc_ln396_8_fu_922_p4 = {{trunc_ln396_8_fu_922_p1[31:16]}};

assign trunc_ln396_9_fu_1257_p4 = {{grp_fu_1519_p4[29:16]}};

assign trunc_ln396_s_fu_1173_p1 = grp_fu_1511_p3;

assign trunc_ln396_s_fu_1173_p4 = {{trunc_ln396_s_fu_1173_p1[31:16]}};

assign trunc_ln541_fu_1054_p1 = t_9_reg_1834[9:0];

assign trunc_ln558_fu_1050_p1 = j_9_reg_296[9:0];

assign trunc_ln_fu_495_p4 = {{grp_fu_1317_p3[30:16]}};

assign u_234_fu_367_p2 = (u_02_fu_136 + 11'd1);

assign u_236_fu_459_p2 = (u_11_fu_140 + 11'd1);

assign z_134_fu_504_p2 = ($signed(trunc_ln_fu_495_p4) + $signed(15'd20479));

assign z_146_fu_567_p2 = ($signed(zext_ln396_6_fu_563_p1) + $signed(17'd118783));

assign z_155_fu_618_p2 = ($signed(zext_ln396_8_fu_614_p1) + $signed(17'd118783));

assign z_158_fu_670_p2 = ($signed(zext_ln396_10_fu_666_p1) + $signed(17'd118783));

assign z_161_fu_721_p2 = ($signed(zext_ln396_12_fu_717_p1) + $signed(17'd118783));

assign z_164_fu_773_p2 = ($signed(zext_ln396_14_fu_769_p1) + $signed(17'd118783));

assign z_167_fu_828_p2 = ($signed(zext_ln396_16_fu_824_p1) + $signed(17'd118783));

assign z_170_fu_884_p2 = ($signed(zext_ln396_18_fu_880_p1) + $signed(17'd118783));

assign z_173_fu_935_p2 = ($signed(zext_ln396_20_fu_931_p1) + $signed(17'd118783));

assign z_174_fu_1270_p2 = ($signed(zext_ln396_22_fu_1266_p1) + $signed(15'd20479));

assign z_176_fu_1186_p2 = ($signed(zext_ln396_24_fu_1182_p1) + $signed(17'd118783));

assign z_177_fu_530_p2 = ($signed(select_ln422_fu_522_p3) + $signed(sext_ln396_fu_510_p1));

assign z_178_fu_589_p2 = (select_ln422_1_fu_581_p3 + z_146_fu_567_p2);

assign z_179_fu_640_p2 = (select_ln422_2_fu_632_p3 + z_155_fu_618_p2);

assign z_180_fu_692_p2 = (select_ln422_3_fu_684_p3 + z_158_fu_670_p2);

assign z_181_fu_743_p2 = (select_ln422_4_fu_735_p3 + z_161_fu_721_p2);

assign z_182_fu_795_p2 = (select_ln422_5_fu_787_p3 + z_164_fu_773_p2);

assign z_183_fu_850_p2 = (select_ln422_6_fu_842_p3 + z_167_fu_828_p2);

assign z_184_fu_906_p2 = (select_ln422_7_fu_898_p3 + z_170_fu_884_p2);

assign z_fu_1246_p3 = {{h_load_1_reg_1938}, {6'd0}};

assign zext_ln396_10_fu_666_p1 = trunc_ln396_3_fu_657_p4;

assign zext_ln396_12_fu_717_p1 = trunc_ln396_4_fu_708_p4;

assign zext_ln396_14_fu_769_p1 = trunc_ln396_5_fu_760_p4;

assign zext_ln396_16_fu_824_p1 = trunc_ln396_6_fu_815_p4;

assign zext_ln396_18_fu_880_p1 = trunc_ln396_7_fu_871_p4;

assign zext_ln396_20_fu_931_p1 = trunc_ln396_8_fu_922_p4;

assign zext_ln396_22_fu_1266_p1 = trunc_ln396_9_fu_1257_p4;

assign zext_ln396_24_fu_1182_p1 = trunc_ln396_s_fu_1173_p4;

assign zext_ln396_6_fu_563_p1 = trunc_ln396_1_fu_554_p4;

assign zext_ln396_8_fu_614_p1 = trunc_ln396_2_fu_605_p4;

assign zext_ln406_10_fu_1170_p0 = grp_fu_1504_p2;

assign zext_ln406_1_fu_551_p0 = grp_fu_1332_p2;

assign zext_ln406_2_fu_602_p0 = grp_fu_1353_p2;

assign zext_ln406_3_fu_654_p0 = grp_fu_1374_p2;

assign zext_ln406_4_fu_705_p0 = grp_fu_1395_p2;

assign zext_ln406_5_fu_757_p0 = grp_fu_1416_p2;

assign zext_ln406_6_fu_812_p0 = grp_fu_1438_p2;

assign zext_ln406_7_fu_864_p0 = grp_fu_1459_p2;

assign zext_ln406_8_fu_919_p0 = grp_fu_1481_p2;

assign zext_ln406_fu_489_p0 = grp_fu_1303_p2;

assign zext_ln550_fu_996_p1 = hm_fu_986_p4;

assign zext_ln557_1_fu_1040_p1 = iGMb_q0;

assign zext_ln557_fu_1027_p1 = add_ln557_fu_1022_p2;

assign zext_ln559_1_fu_1088_p1 = h_q1;

assign zext_ln559_2_fu_1092_p1 = h_q0;

assign zext_ln559_fu_1084_p1 = h_q1;

assign zext_ln562_fu_1063_p1 = add_ln562_fu_1057_p2;

assign zext_ln586_fu_1218_p1 = m_11_fu_152;

assign zext_ln824_fu_355_p1 = u_02_fu_136;

assign zext_ln830_fu_448_p1 = u_11_fu_140;

assign zext_ln831_fu_475_p0 = tmp2108_q0;

assign zext_ln831_fu_475_p1 = $unsigned(zext_ln831_fu_475_p0);

always @ (posedge ap_clk) begin
    zext_ln824_reg_1537[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    zext_ln830_reg_1563[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    zext_ln831_reg_1600[29:16] <= 14'b00000000000000;
    zext_ln550_reg_1848[10] <= 1'b0;
    dt_reg_1853[0] <= 1'b0;
    zext_ln557_1_reg_1880[31:14] <= 18'b000000000000000000;
end

endmodule //keygen_compute_public_1
